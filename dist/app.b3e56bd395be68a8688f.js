!function(e){function t(t){for(var r,i,c=t[0],l=t[1],u=t[2],f=0,m=[];f<c.length;f++)i=c[f],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&m.push(a[i][0]),a[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(s&&s(t);m.length;)m.shift()();return o.push.apply(o,u||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,c=1;c<n.length;c++){var l=n[c];0!==a[l]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={0:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var s=l;o.push([431,1,2]),n()}({107:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return l}));var r=n(16),a=n(58),o=n(273),i=n(2),c=n.n(i);function l(t){var n=t.isLoading;return e.createElement(e.Fragment,null,n&&e.createElement(r.a,{style:{height:"100vh",width:"100vw",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column"}},e.createElement(a.a,{variant:"text",color:"primary",size:"large",disabled:!0,style:{fontWeight:"bolder"}},"Saving changes"),e.createElement(o.a,null)))}l.propTypes={isLoading:c.a.bool}}).call(this,n(0))},139:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return o}));var r=n(2),a=n.n(r);function o(t){var n=e.useRef(!0);n.current&&(n.current=!1,t())}o.propTypes={func:a.a.func}}).call(this,n(0))},142:function(e,t,n){"use strict";t.a=n.p+"management-background.a008de8139581b0dabf1832ed1c9c46e.jpg"},213:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return c}));var r=n(81),a=n.n(r),o=n(82),i=function(){return a.a.get("".concat(o.a,"/login")).then((function(e){return location.assign(e.data)}))},c=function(e){return a.a.post("".concat(o.a,"/login"),{token:e},{withCredentials:!0}).then((function(e){return Promise.resolve(e.data)}))}},224:function(e,t,n){"use strict";t.a=n.p+"arrow.d08328f62d19b66f8ea8d6d006724c8b.png"},226:function(e,t,n){"use strict";var r=n.p+"easy-login.3e91b8d88735689079afd076e3e07423.png",a=n.p+"link-management-page.48004d133b5fc22577704c95eb35f3d8.png",o=n.p+"start-right-away.4e217262d2c8d86d5e0f6ee432aefbcf.png",i=n.p+"make-headers.cffac634f29d38ddbd1f4467a573ebc4.png",c=n.p+"handle-table.3c586914a96d4afeddc5c7ad3d7df354.png",l=n.p+"mymenu.9fdd58aca74eb48d955f835c9ec8796e.png",u=n.p+"slide0.0aa295a3b7b4d3013286f524c4764cd7.png";t.a=[{name:"Quick start guide",src:"".concat(u),description:"GUIDE"},{name:"Sign in with Google",src:"".concat(r),description:"Sign in with google"},{name:"Move on to management page",src:"".concat(a),description:"Move on to management page"},{name:"Click the blue button",src:"".concat(o),description:'click "get started right away" button'},{name:"Make Headers",src:"".concat(i),description:"make headers"},{name:"Create, Edit, Remove table records",src:"".concat(c),description:"handle table"},{name:"Use mymenu to handle data",src:"".concat(l),description:"use mymenu"}]},232:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return l}));var r=n(81),a=n.n(r),o=n(82),i=function(){return a.a.get("".concat(o.a,"/guestbook"))},c=function(e){return a.a.post("".concat(o.a,"/guestbook"),{data:{content:e}},{withCredentials:!0})},l=function(e){return a.a.delete("".concat(o.a,"/guestbook"),{data:{article_id:e}},{withCredentials:!0})}},281:function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return c}));var r=n(16),a=n(58),o=n(583),i={exportButton:!0,grouping:!0,selection:!0,headerStyle:{fontWeight:"bolder"},actionsColumnIndex:-1,columnsButton:!0,debounceInterval:160,pageSize:15,pageSizeOptions:[5,15,30,50,100]},c={pagination:{labelDisplayedRows:"{count} rows | {from}-{to}"},toolbar:{nRowsSelected:"{0} row(s) selected"},header:{actions:"Edit"},body:{emptyDataSourceMessage:e.createElement(r.a,{style:{display:"flex",flexDirection:"column"}},e.createElement(a.a,{variant:"text",color:"primary",size:"large",disabled:!0,style:{fontWeight:"bolder"}},"No Records to display"),e.createElement(a.a,{variant:"text",color:"primary",size:"large",disabled:!0,endIcon:e.createElement(o.a,null),style:{fontWeight:"bolder"}},"Click the plus icon on the right above for a new record. "))}}}).call(this,n(0))},381:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return w}));var r=n(79),a=n(568),o=n(272),i=n(172),c=n(58),l=n(65),u=n(425),s=n(34),f=n(382),m=n(383),d=n(89),p=n(387);function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E=Object(s.a)((function(e){return{root:{flexGrow:1,alignItems:"flex-start",paddingTop:18,paddingBottom:18},left:{flexGrow:1,paddingLeft:30,justify:"flex-start"},center:{flexGrow:1},right:{display:"flex",paddingRight:45,justify:"flex-end",flexDirection:"row",padding:"0 ".concat(e.spacing(3))}}}));function w(t){var n=y(e.useState({menu:!1}),2),s=n[0],h=n[1],v=E(),w=function(e,t){return function(n){var r=!!t&&!s[e];h(g(g({},s),{},b({},e,r)))}},O=e.useContext(d.c),S=O.name?"MYPAGE":"LOGIN",x=O.name?e.createElement(p.a,null):null;return e.createElement(e.Fragment,null,e.createElement(f.a,t,e.createElement(a.a,{color:"inherit",style:{boxShadow:"none"}},e.createElement(o.a,null,e.createElement(i.a,{container:!0,spacing:3},e.createElement(i.a,{container:!0,className:v.root},e.createElement(i.a,{item:!0,className:v.left},e.createElement(r.b,{to:"/",style:{textDecoration:"none"}},e.createElement(c.a,{variant:"outlined"}," Home ")),["guestbook","management"].map((function(t){return e.createElement(r.b,{to:"/".concat(t),style:{textDecoration:"none"},key:t},e.createElement(c.a,{variant:"outlined"}," ",t," "))}))),e.createElement(i.a,{item:!0,className:v.center},e.createElement("span",null)),e.createElement(i.a,{item:!0,className:v.right},e.createElement(c.a,{variant:"outlined",color:"primary",onClick:w(S,!0),style:{marginRight:"5px"}},S),x,e.createElement(l.a,{open:s[S],onClose:w(S,!1),variant:"persistent"},Object(m.a)(g(g({},t),{},{anchor:S,toggleDrawer:w,profile:O}))))),e.createElement(u.a,null))))))}}).call(this,n(0))},382:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return o}));var r=n(553),a=n(423);function o(t){var n=t.children,o=Object(r.a)();return e.createElement(a.a,{appear:!1,direction:"down",in:!o},n)}}).call(this,n(0))},383:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return D}));var r=n(283),a=n(108),o=n(95),i=n(556),c=n(235),l=n(425),u=n(17),s=n(109),f=n(146),m=n(41),d=n(16),p=n(168),h=n(58),g=n(34),b=n(384),y=n(385),v=n(213),E=n(557),w=n(558),O=n(559),S=n(426),x=n(79),j=n(68),C=n(89),A=n(2),I=n.n(A);function k(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return P(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return P(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function P(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var N=Object(g.a)((function(e){return{list:{width:"23vw",height:"100vh",display:"flex",justifyContent:"start",flexDirection:"column"},listItem:{width:"100%"},listItemText:{textAlign:"center",color:"#838282",marginBottom:"30px"},largeAvatar:{width:e.spacing(9),height:e.spacing(9)},inline:{display:"inline"},listText:{color:"#838282",textAlign:"center"},modal:{top:"50%",left:"50%",transform:"translate(-50%, -50%)",position:"absolute",width:400,minWidth:400,backgroundColor:e.palette.background.paper,border:"2px solid #000",boxShadow:e.shadows[5],padding:e.spacing(2,4,3),display:"flex",flexDirection:"column"},modalRowBox:{display:"flex",flexDirection:"row",justifyContent:"center",alignItems:"center"},modalColBox:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"start"},button:{fontWeight:"bolder"}}}));function D(t){var n=t.anchor,g=t.toggleDrawer,A=t.profile,I=N(),P=e.useContext(C.a),D=k(e.useState(""),2),T=D[0],R=D[1];var M=k(e.useState(!1),2),L=M[0],B=M[1],W=!!A&&!!A.name;return e.createElement("div",{className:I.list,role:"presentation",onClick:g(n,!1),onKeyDown:g(n,!1)},e.createElement(r.a,null,e.createElement(a.a,{primary:W?"PROFILE":"LOGIN MENU",className:I.listItemText}),W?e.createElement(e.Fragment,null,e.createElement(o.a,{alignItems:"center",className:I.listItem},e.createElement(i.a,null,e.createElement(c.a,{src:A.picture,className:I.largeAvatar,alt:A.name})),e.createElement(a.a,{primary:A.name,className:I.listText}),e.createElement("br",null)),e.createElement(l.a,{variant:"inset",component:"li"}),e.createElement(o.a,{className:I.listItem,divider:!0},e.createElement(a.a,{primary:"EMAIL : ",secondary:e.createElement(e.Fragment,null,e.createElement(u.a,{component:"span",variant:"body2",color:"textPrimary",className:I.inline},A.email))})),e.createElement(o.a,{className:I.listItem,divider:!0}),e.createElement(o.a,{className:I.listItem,divider:!0},e.createElement(E.a,{color:"primary",style:{marginRight:"1vw"}}),e.createElement(a.a,{secondary:"EDIT HEADERS"}),e.createElement(x.b,{to:"/headers"},e.createElement(s.a,{edge:"end","aria-label":"edit-header"},e.createElement(w.a,{color:"primary",fontSize:"large"})))),e.createElement(o.a,{className:I.listItem,divider:!0}),e.createElement(o.a,{className:I.listItem,divider:!0},e.createElement(O.a,{color:"secondary",style:{marginRight:"1vw"}}),e.createElement(a.a,{secondary:"REMOVE ALL DATA"}),e.createElement(s.a,{edge:"end","aria-label":"edit-header",onClick:function(){return B(!0)}},e.createElement(S.a,{color:"secondary",fontSize:"large"}))),e.createElement(f.a,{open:L,onClose:function(){return B(!1)},"aria-labelledby":"modal-title","aria-describedby":"modal-contents"},e.createElement(m.a,{className:I.modal},e.createElement(d.a,{className:I.modalRowBox},e.createElement(s.a,{edge:"start","aria-label":"edit-header",disabled:!0},e.createElement(S.a,{color:"secondary",fontSize:"large"})),e.createElement(u.a,{id:"modal-title",variant:"button",display:"block",style:{fontWeight:"bolder"}},"Caution : permanent deletion")),e.createElement(d.a,{className:I.modalColBox},e.createElement(u.a,{id:"modal-contents",variant:"body1",style:{fontWeight:"bold"}},"All data will be deleted and cannot be recovered.\n                                Please enter your email correctly to continue."),e.createElement(u.a,{variant:"caption"},A.email)),e.createElement(d.a,{className:I.modalRowBox},e.createElement(p.a,{label:"E-MAIL",onChange:function(e){return R(e.target.value)}}),e.createElement(h.a,{className:I.button,variant:"contained",color:"secondary",size:"large",onClick:function(){T===A.email?Object(j.b)({},[],[{}]).then((function(e){P({open:!0,result:"success"===e.result?"success":"error"}),setTimeout((function(){location.replace(location.origin)}),1500)})).catch((function(e){throw new Error(e)})):P({open:!0,result:"error"})}},"submit"))))):e.createElement(o.a,{button:!0,className:I.listItem,onClick:function(){Object(v.b)()}},e.createElement(b.a,{signIn:y.a}))))}D.propTypes={anchor:I.a.string.isRequired,toggleDrawer:I.a.func.isRequired,profile:I.a.object.isRequired}}).call(this,n(0))},384:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return i}));var r=n(34),a=n(16),o=Object(r.a)((function(e){return{button:{width:"100%",height:"100%"}}}));function i(t){var n=o(),r=t.signIn;return e.createElement(a.a,{component:"span"},e.createElement("img",{src:r,className:n.button}))}}).call(this,n(0))},385:function(e,t,n){"use strict";t.a=n.p+"googleSignin.1ce1aaa5a127fa3e492a12bb62f99304.png"},387:function(e,t,n){"use strict";(function(e){var r=n(389),a=n.n(r),o=n(110),i=n(95),c=n(109),l=n(34),u=n(5),s=n(234);function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var d=Object(l.a)((function(e){return{logout:{justifyContent:"flex-end",padding:"2px",margin:0,width:"auto"}}})),p=Object(u.a)((function(e){return{tooltip:{backgroundColor:e.palette.common.white,color:"rgba(0, 0, 0, 0.87)",boxShadow:e.shadows[2],fontSize:14,fontWeight:"bold"}}}))(o.a);t.a=function(){var t=d(),n=f(Object(s.a)(["profile","user"]),3),r=(n[0],n[1],n[2]);return e.createElement(e.Fragment,null,e.createElement(i.a,{className:t.logout},e.createElement(p,{title:"Log-out"},e.createElement(c.a,{style:{padding:4},onClick:function(){r("profile"),r("user"),location.href=location.origin}},e.createElement(a.a,null)))))}}).call(this,n(0))},390:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return A}));var r=n(107),a=n(16),o=n(41),i=n(17),c=n(110),l=n(109),u=n(235),s=n(168),f=n(34),m=n(2),d=n.n(m),p=n(57),h=n(139),g=n(232),b=n(391),y=n.n(b);function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e){return function(e){if(Array.isArray(e))return j(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||x(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||x(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(e,t){if(e){if("string"==typeof e)return j(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?j(e,t):void 0}}function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var C=Object(f.a)((function(e){return{container:{width:"100%",height:"120vh",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column",color:"white"},paper:{width:"75vw",height:"85vh",display:"flex",justifyContent:"center",flexDirection:"column",alignItems:"center"},backLogo:{color:"white",fontWeight:"bolder",position:"absolute",display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",zIndex:1,opacity:.3},chatContainer:{height:"80%",width:"100%",padding:"0.5vw 5vw",display:"flex",justifyContent:"flex-start",alignItems:"flex-start",flexDirection:"column",backgroundColor:"#d0d0d0",overflowY:"scroll",overflowX:"hidden"},inputBox:{width:"40vw",marginTop:"5vh"},bubble:{display:"flex",flexDirection:"column",color:"white",border:"thick #8a8a8a",borderRadius:"15px",backgroundColor:"#8e8e8e",padding:"5px 12px",margin:"0px 6px",maxWidth:"60vw",overflow:"hidden"},myBubble:{display:"flex",flexDirection:"column",color:"white",border:"thick #8a8a8a",borderRadius:"15px",backgroundColor:"#789fff",padding:"5px 12px",margin:"0px 6px",maxWidth:"60vw",overflow:"hidden"},chatBox:{display:"flex",flexDirection:"row",padding:"2px"},OtherAvatar:{color:"#fff",backgroundColor:"black"},myAvatar:{color:"#fff",backgroundColor:"#2764ff"}}}));function A(t){var n=t.isLoading,f=C(),m=e.useRef(),d=S(e.useState({open:!1}),2),b=d[0],v=d[1],w=S(e.useState({open:!1}),2),x=w[0],j=w[1],A=S(e.useState({open:!1}),2),I=A[0],k=A[1],P=S(e.useState({open:!1}),2),N=P[0],D=P[1],T=S(e.useState({input:"",chatLogs:[]}),2),R=T[0],M=T[1],L=e.useRef(),B=e.useRef(),W=e.useRef(!0),z=function(){Object(g.b)().then((function(e){var t=O(e.data);console.log(t),L.current=O(t),M(E(E({},R),{},{chatLogs:O(t)}))})).catch((function(e){D({open:!0})}))};Object(h.a)((function(){z()}));var F=function(e){var t=e.currentTarget.dataset.id;console.log("삭제요청 ID : ".concat(t)),Object(g.a)(t).then((function(e){"deleted"===e.result&&setTimeout(k({open:!0}),3e3),z()})).catch((function(e){console.log(e),D({open:!0}),z()}))},G=function(e){if(13===e.keyCode){var t=m.current?m.current.querySelector("#message"):"";t.value&&(t.focus(),B.current.scrollTo(0,B.current.scrollHeight),t.value&&(!1===W.current?j({open:!0}):Object(g.c)(t.value).then((function(e){200===e.status&&(setTimeout((function(){W.current=!0}),15e3),W.current=!1,v({open:!0,status:"success"}),z())})).catch((function(e){400!==e.response.status&&500!==e.response.status||v({open:!0,status:"error"})}))))}};return e.useEffect((function(){return window.addEventListener("keydown",G),function(){return window.removeEventListener("keydown",G)}}),[]),e.createElement(e.Fragment,null,e.createElement(r.a,{isLoading:n}),e.createElement(a.a,{className:f.container},e.createElement(o.a,{className:f.paper,elevation:5},e.createElement(a.a,{className:f.chatContainer,ref:B},e.createElement(i.a,{variant:"h3",color:"textPrimary",className:f.backLogo},"PREPARING"),R.chatLogs.map((function(t,n){return t.own?e.createElement(c.a,{interactive:!0,placement:"right",key:n,title:e.createElement(l.a,{onClick:F,color:"primary",size:"small","data-id":t._id},e.createElement(y.a,null))},e.createElement(a.a,{className:f.chatBox,style:{alignSelf:"flex-end"}},e.createElement(o.a,{className:f.myBubble},e.createElement(i.a,{variant:"caption",style:{fontSize:"0.5rem",lineHeight:"0.8"}},t.date),t.content),e.createElement(u.a,{className:f.myAvatar,src:t.picture}))):e.createElement(a.a,{className:f.chatBox,key:n},e.createElement(u.a,{className:f.OtherAvatar,src:t.picture}),e.createElement(o.a,{className:f.bubble},e.createElement(i.a,{variant:"caption",style:{fontSize:"0.5rem",lineHeight:"0.8"}},t.date),t.content))}))),e.createElement(a.a,{className:f.inputBox},e.createElement(s.a,{id:"message",size:"medium",label:"message",style:{margin:8},value:R.input,onChange:function(e){var t=e.target.value;t.length<120?M(E(E({},R),{},{input:t})):t.length>=95&&v({open:!0})},autoFocus:!0,placeholder:"Enter a message",fullWidth:!0,ref:function(e){return m.current=e},margin:"normal",InputLabelProps:{shrink:!0},variant:"outlined"})))),e.createElement(p.a,{open:b.open,onClose:function(){return v({open:!1})},content:"success"===b.status?"SUCCESS":"error"===b.status?"FAILED : LOGIN FIRST":"max length : 120",status:"success"===b.status?"success":"error"}),e.createElement(p.a,{open:x.open,onClose:function(){return j({open:!1})},content:"FAILED : sorry TOO FAST , Interval : 15s",status:"error"}),e.createElement(p.a,{open:I.open,onClose:function(){return k({open:!1})},content:"Deleted",status:"success"}),e.createElement(p.a,{open:N.open,onClose:function(){return D({open:!1})},content:"Error ! ",status:"error"}))}A.propTypes={isLoading:d.a.bool}}).call(this,n(0))},392:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return A}));var r=n(234),a=n(393),o=n.n(a),i=n(398),c=n(281),l=n(139),u=n(68),s=n(399),f=n(400),m=n(401),d=n(57),p=n(16),h=n(89),g=n(107),b=n(2),y=n.n(b);function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e){return function(e){if(Array.isArray(e))return C(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||j(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||j(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){if(e){if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(e,t):void 0}}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function A(t){var n=t.isLoading,a=e.useContext(h.b),b=x(Object(r.a)(["profile"]),3),y=(b[0],b[1],b[2],x(e.useState({open:!1}),2)),v=y[0],w=y[1],j=x(e.useState({open:!1}),2),C=j[0],A=j[1],I=x(e.useState({open:!1}),2),k=I[0],P=I[1],N=x(e.useState({open:!1}),2),D=N[0],T=N[1],R=x(e.useState({defaultPage:!0,hasTable:!1,columns:[],data:[]}),2),M=R[0],L=R[1],B=e.useRef();Object(l.a)((function(){Object(u.a)().then((function(e){console.log("status : ".concat(e.status," , data : ").concat(JSON.stringify(e.data))),200===e.status&&e.data.headers&&(setTimeout((function(){w({open:!0})}),400),L({columns:Object(f.a)(e.data.headers,e.data.groupings),data:e.data.data,defaultPage:!1,hasTable:!0}))})).catch((function(e){console.log(e),P({open:!0})}))}));var W=function(e){var t=[],n=[],r=B.current.dataManager.columns.reduce((function(e,t,r){return e["header".concat(r)]=t.title,n.push(t.grouping),e}),{});B.current.dataManager.data.forEach((function(e,n){e.tableData;var r=S(e,["tableData"]);t.push(r)})),Object(u.b)(r,n,t).catch((function(e){if(e)throw new Error(e)})),e||A({open:!0})};e.useEffect((function(){var e=function(){return T({open:!D.open})},t=function(e){(navigator.platform.match("Mac")?e.metaKey:e.ctrlKey&&83===e.keyCode)&&(e.preventDefault(),W())};return window.addEventListener("keydown",t),window.addEventListener("dblclick",e),function(){window.removeEventListener("dblclick",e),window.removeEventListener("keydown",t),B.current&&(B.current.dataManager&&W(!0)),B.current&&(B.current.dataManager&&a("success"))}}),[]);var z=function(){return e.createElement(p.a,{style:{height:"100px"}})};return e.createElement(e.Fragment,null,e.createElement(g.a,{isLoading:n}),M.defaultPage?e.createElement(s.a,{state:M,setState:L}):e.createElement(p.a,null,e.createElement(i.a,{open:D.open,onClose:function(){T({open:!1})}}),e.createElement(z,null),e.createElement(o.a,{tableRef:B,title:e.createElement(m.a,{setSavedSnack:A,dataManager:B.current?B.current.dataManager:{}}),columns:M.columns,data:M.data,localization:c.a,options:c.b,actions:[{tooltip:"Remove the Selected row(s)",icon:"delete",onClick:function(e,t){var n=O(M.data);t.forEach((function(e){n.splice(n.indexOf(e),1)})),L((function(e){return E(E({},e),{},{data:n})}))}}],editable:{onRowAdd:function(e){return new Promise((function(t){setTimeout((function(){L((function(t){var n=O(t.data);return n.push(e),E(E({},t),{},{data:n})})),t()}),400)}))},onRowUpdate:function(e,t){return new Promise((function(n){setTimeout((function(){t&&L((function(n){var r=O(n.data);return r[r.indexOf(t)]=e,E(E({},n),{},{data:r})})),n()}),400)}))}}}),e.createElement(z,null),e.createElement(d.a,{open:v.open,onClose:function(){return w({open:!1})},content:"need some help? ? double-click any space !",status:"success"}),e.createElement(d.a,{open:C.open,onClose:function(){return A({open:!1})},content:"SAVED !",status:"success"}),e.createElement(d.a,{open:k.open,onClose:function(){return P({open:!1})},content:"ERROR !",status:"error"})))}A.propTypes={isLoading:y.a.bool}}).call(this,n(0))},398:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return d}));var r=n(34),a=n(573),o=n(576),i=n(283),c=n(95),l=n(16),u=n(108),s=n(2),f=n.n(s),m=Object(r.a)((function(e){}));function d(t){var n=m(),r=t.open,s=t.onClose;return e.createElement(a.a,{onClose:s,open:r},e.createElement(o.a,null," BASIC MANUAL "),e.createElement(i.a,null,[{icon:"add_box",description:"[Add] rows."},{icon:"create",description:"[Edit] records."},{icon:"search",description:"Type down words to [search]."},{icon:"save_alt",description:"[Download] files in CVS format."},{icon:"view_week",description:"[Select] columns to be displayed"},{icon:"playlist_add_check",description:"Follow the steps below to [delete] rows."},{icon:"check_box",description:" ① Select the checkbox on the row."},{icon:"fact_check",description:" ② Check the number of the rows selected."},{icon:"delete",description:" ③ Click the Bin icon on the right above."},{icon:"playlist_add_check",description:"Follow the steps below to [Edit] headers."},{icon:"menu",description:" ① Open MYPAGE"},{icon:"create",description:" ② Click the Pencil icon"}].map((function(t,r){return e.createElement(c.a,{key:"".concat(t," + ").concat(r)},e.createElement(l.a,{component:"span",className:"material-icons ".concat(n.icon),style:{width:"3vw"}},t.icon),e.createElement(u.a,{primary:t.description}))}))))}d.propTypes={open:f.a.bool.isRequired,onClose:f.a.func.isRequired}}).call(this,n(0))},399:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return v}));var r=n(96),a=n(16),o=n(17),i=n(58),c=n(34),l=n(142),u=n(79),s=n(2),f=n.n(s);function m(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=Object(c.a)((function(e){return{container:{width:"100%",height:"100vh",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column",backgroundImage:"url(".concat(l.a,")"),color:"white"},button:{fontWeight:"bolder",margin:e.spacing(1)},buttonContainer:{flexDirection:"row",display:"flex",justifyContent:"center",alignItems:"center",margin:e.spacing(1)},text:h(h({},e.typography.button),{},{backgroundColor:"inherit",textShadow:"0.5px 0.5px 1px #0000005c",margin:"0 1vw 1.7vh",color:"#6a748c"})}})),y={columns:[{title:"Name",field:"Name",grouping:!1},{title:"Surname",field:"Surname"},{title:"Birth Year",field:"Birth Year"},{title:"Phone",field:"Phone",grouping:!1},{title:"Gender",field:"Gender"},{title:"Memo",field:"Memo"}],data:[{Name:"Mehmet",Surname:"Baran","Birth Year":1983,Phone:"01046509995",Gender:1,Memo:""},{Name:"Adam",Surname:"Adam","Birth Year":1984,Phone:"01046509795",Gender:2,Memo:""},{Name:"Mehmet",Surname:"Atom","Birth Year":1985,Phone:"01046509695",Gender:1,Memo:""},{Name:"mul",Surname:"Kongna","Birth Year":1986,Phone:"01046509195",Gender:1,Memo:""},{Name:"Jack",Surname:"Jack","Birth Year":1987,Phone:"01046509295",Gender:2,Memo:""},{Name:"Bob",Surname:"Bob","Birth Year":1988,Phone:"01046509395",Gender:2,Memo:""}]};function v(t){var n=t.state,c=t.setState,l=(t.match,m(e.useState(!1),2)),s=l[0],f=l[1],d=m(e.useState(!1),2),p=d[0],g=d[1],v=b();return e.useEffect((function(){f(!0),setTimeout(g(!0),1500)}),[]),e.createElement(r.a,{in:s,timeout:{enter:800,exit:500}},e.createElement(a.a,{className:v.container},e.createElement(o.a,{variant:"h1",color:"initial",style:{textShadow:"5px 1.5px 1.5px gray"}},"Management Table"),e.createElement(o.a,{variant:"subtitle2",gutterBottom:!0,style:{textShadow:"2px 2px 1px black"}},"You may try the DEMO if this your first time, or get started right away!"),e.createElement(r.a,{in:p,timeout:{enter:3e3,exit:500}},e.createElement(a.a,{className:v.buttonContainer},e.createElement(i.a,{className:v.button,variant:"contained",color:"secondary",size:"large",onClick:function(){c(h(h({},n),{},{columns:y.columns,data:y.data,defaultPage:!n.defaultPage}))}},"USE DEMO"),e.createElement(u.b,{to:"/headers",style:{textDecoration:"none"}},e.createElement(i.a,{className:v.button,variant:"contained",color:"primary",size:"large"},"GET STARTED RIGHT AWAY"))))))}v.propTypes={state:f.a.shape({defaultPage:f.a.bool.isRequired,hasTable:f.a.bool.isRequired,columns:f.a.array,data:f.a.array}),setState:f.a.func.isRequired}}).call(this,n(0))},400:function(e,t,n){"use strict";t.a=function(e,t){return console.log("data parsing!!!!"),Object.values(e).filter((function(e){return e})).map((function(e,n){return{title:e,field:e,grouping:t[n]}}))}},401:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var r=n(110),a=n(58),o=n(68),i=n(2),c=n.n(i);function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function u(t){var n=t.setSavedSnack,i=t.dataManager;return e.createElement(r.a,{title:"Click to SAVE ( Ctrl + S )"},e.createElement(a.a,{style:{fontWeight:"bolder"},variant:"contained",color:"secondary",onClick:function(){return e=[],t=[],r=i.columns.reduce((function(e,n,r){return e["header".concat(r)]=n.title,t.push(n.grouping),e}),{}),i.data.forEach((function(t,n){t.tableData;var r=l(t,["tableData"]);e.push(r)})),console.log(" result : \n          ".concat(JSON.stringify(e),"\n          ").concat(t,"\n          ").concat(JSON.stringify(r),"\n        ")),void Object(o.b)(r,t,e).then((function(e){"success"===e.result?n({open:!0}):setErrorSnack({open:!0})})).catch((function(e){setErrorSnack({open:!0})}));var e,t,r}},"SAVE"))}u.propTypes={setSavedSnack:c.a.func.isRequired,dataManager:c.a.object}}).call(this,n(0))},402:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return P}));var r=n(34),a=n(16),o=n(96),i=n(41),c=n(17),l=n(168),u=n(110),s=n(275),f=n(142),m=n(224),d=n(68),p=n(139),h=n(234),g=n(57),b=n(107),y=n(89),v=n(2),E=n.n(v);function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){S(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function S(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e){return function(e){if(Array.isArray(e))return A(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||C(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||C(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(e,t){if(e){if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(e,t):void 0}}function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var I=Object(r.a)((function(e){return{container:{width:"100%",height:"120vh",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row",backgroundImage:"url(".concat(f.a,")")},paper:{flexDirection:"column",alignContent:"space-around",marginTop:"10vh"},formRoot:{"& > *":{margin:"0.5vh 1vw",width:"60ch",minWidth:"40ch",display:"flex"}},arrow:{width:"10vw",height:"10vh",alignSelf:"center",background:"no-repeat center/80% url(".concat(m.a,")"),backgroundSize:"contain",marginLeft:"3vw",transform:"rotate(90deg)"},description:{alignSelf:"center"}}})),k={header0:"",header1:"",header2:"",header3:"",header4:"",header5:"",header6:"",header7:"",header8:"",header9:""};function P(t){var n=t.isLoading,r=I(),f=e.useContext(y.b),m=j(Object(h.a)(["profile"]),3),v=(m[0],m[1],m[2]),E=j(e.useState(!1),2),w=E[0],C=E[1],A=j(e.useState({open:!1}),2),P=A[0],N=A[1],D=j(e.useState({open:!1,content:""}),2),T=D[0],R=D[1],M=j(e.useState({headers:k,groupings:Array(10).fill(!1)}),2),L=M[0],B=M[1],W=e.useRef();Object(p.a)((function(){Object(d.a)().then((function(e){if(console.log("response : ".concat(JSON.stringify(e))),200===e.status){for(var t=e.data&&e.data.groupings?e.data.groupings.length:0,n=e.data&&e.data.groupings?x(e.data.groupings):[],r=0;r<10-t;r++)n.push(!1);for(var a=e.data&&e.data.headers?e.data.headers:{},o=Object.values(a).length;o<10;o++)a["header".concat(o)]="";W.current={headers:a,groupings:n},console.log(W.current),B({headers:a,groupings:n})}else 204===e.status?(setTimeout(z(),3500),R({open:!0,status:"error",content:"Please log in again."})):R({open:!0,status:"error",content:"error (code : ".concat(e.status,")")})})).catch((function(e){e&&(console.log(e),setTimeout(z(),3500),R({open:!0,status:"error",content:"Please log in again."}))}))})),e.useEffect((function(){W.current={headers:O({},L.headers),groupings:x(L.groupings)}}),[L.headers,L.groupings]),e.useEffect((function(){return C(!0),function(){var e=F(W.current.headers,W.current.groupings,!0);f("error"===e?"error":"success")}}),[]);var z=function(){v("profile"),location.href=location.origin},F=function(e,t,n){return Object.values(e).every((function(e){return e.length<=15}))?0===Object.values(e).filter((function(e){return e})).length?(N({open:!0}),"error"):void Object(d.c)(e,t).then((function(e){n||R({open:!0,content:e.result})})).catch((function(e){setTimeout(z(),2e3),R({open:!0,status:"error",content:"Please log in again."})})):(N({open:!0}),"error")};return e.createElement(e.Fragment,null,e.createElement(b.a,{isLoading:n}),e.createElement(a.a,{className:r.container},e.createElement(o.a,{in:w,timeout:{enter:1500}},e.createElement(i.a,{className:r.paper,elevation:4},e.createElement("form",{className:r.formRoot,autoComplete:"off"},e.createElement(a.a,{component:"div"},e.createElement(c.a,{variant:"h4",color:"textPrimary",style:{fontWeight:"bolder"}},"Header Edit Form"),e.createElement(a.a,{color:Object.values(L.headers).every((function(e){return e.length<=15}))?"blue":"red"},e.createElement(c.a,{variant:"subtitle2",color:"initial"},"Header should be less than 15 letters."))),Object.values(L.headers).map((function(t,n){return e.createElement("div",{key:n},e.createElement(l.a,{required:0===n,id:"".concat(n),key:n,label:"header-".concat(n+1),value:L.headers["header".concat(n)],margin:"normal",onChange:function(e){return function(e,t){B(O(O({},L),{},{headers:O(O({},L.headers),{},S({},"header".concat(t),e.target.value))}))}(e,n)},error:L.headers["header".concat(n)].length>15}),e.createElement(u.a,{title:"\r\nYou can arrange the data with a valid header, \r\nUnique values are not commonly used for this function in general.\r\ne.g.) name, address, mobile NO. etc.\r\n",placement:"right",enterDelay:200,leaveDelay:200},e.createElement(s.a,{checked:L.groupings[n],onChange:function(e){return function(e,t){B(O(O({},L),{},{groupings:L.groupings.map((function(n,r){return r===t?e.target.checked:n}))}))}(e,n)}})),0===n?e.createElement(a.a,{component:"span",className:r.description}," Grouping!?"):null)}))))),e.createElement(u.a,{title:"SUBMIT","aria-label":"submit",placement:"top",enterDelay:200,leaveDelay:400},e.createElement(a.a,{className:r.arrow,onMouseOver:function(e){return e.target.style.cursor="pointer"},onClick:function(){return F(L.headers,L.groupings)}})),e.createElement(g.a,{open:P.open,onClose:function(){return N({open:!1})},content:"Header should be less than 15 letters :(",status:"error"}),e.createElement(g.a,{open:T.open,onClose:function(){return R({open:!1})},content:T.content,status:"error"===T.status?"error":"success"})))}P.propTypes={isLoading:E.a.bool}}).call(this,n(0))},403:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(34),a=n(404),o=n(409),i=n(414),c=n(107),l=n(2),u=n.n(l),s=Object(r.a)((function(e){return{root:{display:"flex",flexWrap:"wrap",justifyContent:"center",backgroundColor:"white"}}}));function f(t){var n=t.isLoading,r=s();return e.createElement("div",{className:r.root},e.createElement(c.a,{isLoading:n}),e.createElement(i.a,null),e.createElement(a.a,null),e.createElement(o.a,null))}f.propTypes={isLoading:u.a.bool}}).call(this,n(0))},404:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return g}));var r=n(34),a=n(96),o=n(16),i=n(148),c=n(41),l=n(405),u=n(226),s=n(407),f=n(408);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h=Object(r.a)((function(e){return{root:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",height:"100vh",width:"100vw",backgroundImage:"url(".concat(f.a,")"),backgroundSize:"cover"},paper:{minWidth:750,maxWidth:"1000px",width:"70vw",height:"65vh",margin:e.spacing(4),backgroundColor:"inherit"},textPaper:{minWidth:350,width:"70vw",alignSelf:"center",justifyContent:"center",backgroundColor:"inherit"}}}));function g(){var t=d(e.useState(!1),2),n=t[0],r=t[1],f=d(e.useState(0),2),p=f[0],g=f[1],b=d(e.useState(0),2),y=b[0],v=b[1],E=h(),w=e.useRef();return console.log("currentSlide : ".concat(p)),e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return r(e.isIntersecting)})),g(0)}),{rootMargin:"-70px 0px"});return e.observe(w.current),function(){return e.unobserve(w.current)}}),[]),e.createElement(e.Fragment,null,e.createElement(a.a,{in:n,timeout:{enter:3e3,exit:800}},e.createElement(o.a,{className:E.root,ref:w},e.createElement(i.a,m({in:n,style:{transformOrigin:"50% 100%"}},n?{timeout:{appear:1500,enter:1500,exit:1e3}}:{}),e.createElement(c.a,{elevation:4,className:E.paper},e.createElement(l.a,{list:u.a,currentSlide:p,setCurrentSlide:g,setStepper:v}))),e.createElement(i.a,m({in:n,style:{transformOrigin:"50% 100%"}},n?{timeout:{appear:2e3,enter:1500,exit:1e3}}:{}),e.createElement(c.a,{elevation:4,className:E.textPaper},e.createElement(s.a,{stepper:y}))))))}}).call(this,n(0))},405:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return s}));var r=n(422),a=n(16),o=n(17),i=n(34),c=n(2),l=n.n(c),u=Object(i.a)((function(e){return{textContainer:{width:"100%",backgroundColor:"inherit",color:"#fff",textShadow:"2px 1.5px 1.5px gray",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column"}}}));function s(t){var n=u(),i=t.list?t.list:[{}],c=t.setStepper,l=t.currentSlide,s=t.setCurrentSlide;return e.createElement(r.a,{slideIndex:l,afterSlide:function(e){return c(t=e),void s(t);var t},autoplay:!1,autoplayInterval:3e3,transitionMode:"scroll",speed:800,heightMode:"max"},i.map((function(t,r){return e.createElement(a.a,{style:{width:"100%",height:"100%"},key:r},r>0?e.createElement(a.a,{className:n.textContainer},e.createElement(o.a,{variant:"h3",color:"inherit",style:{fontWeight:"bolder"}},"#".concat(r," ").concat(t.name))):null,e.createElement(a.a,{style:{height:"100%"}},0===r?e.createElement(a.a,{className:n.textContainer,style:{height:"100%",alignItems:"center"}},e.createElement(o.a,{variant:"h3",color:"inherit",style:{fontWeight:"bolder"}},"QUICK START GUIDE",e.createElement("img",{src:""})),e.createElement(o.a,{variant:"h6",color:"inherit",style:{fontWeight:"bold"}},"Make your work easier"),e.createElement(o.a,{variant:"subtitle1",color:"inherit",style:{fontWeight:"bold"}},"Turn the slide over and check."),e.createElement(o.a,{variant:"subtitle1",color:"inherit",style:{fontWeight:"bold"}},"It consists of a few slides.")):e.createElement("img",{src:t.src})))})))}s.propTypes={setStepper:l.a.func.isRequired,currentSlide:l.a.number.isRequired,setCurrentSlide:l.a.func.isRequired}}).call(this,n(0))},407:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return d}));var r=n(34),a=n(16),o=n(582),i=n(579),c=n(580),l=n(17),u=n(226),s=n(2),f=n.n(s),m=Object(r.a)((function(e){return{root:{width:"100%",flexDirection:"row",fontWeight:"bolder"},inline:{display:"inline"}}}));function d(t){var n=t.stepper,r=m();return e.createElement(a.a,{className:r.root},e.createElement(o.a,{activeStep:n,orientation:"horizontal",style:{backgroundColor:"inherit"}},u.a.map((function(t,r){return e.createElement(i.a,{completed:r<n,key:r},e.createElement(c.a,null,e.createElement(l.a,{variant:"caption",style:{fontWeight:"bolder"}},t.name)))}))))}d.propTypes={stepper:f.a.number.isRequired}}).call(this,n(0))},408:function(e,t,n){"use strict";t.a=n.p+"whitebackground.fb140f5e810dc2146dad1b6f03caf9c8.jpg"},409:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return g}));var r=n(96),a=n(16),o=n(235),i=n(17),c=n(34),l=n(410),u=n(411),s=n(412),f=n(413);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h=Object(c.a)((function(e){return{root:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",height:"100vh",width:"100vw",backgroundImage:"url(".concat(f.a,")"),backgroundSize:"cover"},logoBox:{display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row"},bigAvatar:{width:e.spacing(12),height:e.spacing(12)},textWithShadow:{color:"#fff",fontWeight:"bolder",fontSize:"4rem",marginLeft:"2vw",textShadow:"1px 5px 5px #9e9999"},descriptionBox:{display:"flex",color:"#fff",flexDirection:"column",justifyContent:"center",alignItems:"center",maxWidth:"50vw",margin:"0 0 0 3vw"}}}));function g(){var t=d(e.useState(!1),2),n=t[0],c=t[1],f=h(),p=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return c(e.isIntersecting)}))}),{rootMargin:"-70px 0px"});return e.observe(p.current),function(){return e.unobserve(p.current)}}),[]),e.createElement(e.Fragment,null,e.createElement(r.a,{in:n,timeout:{enter:2e3,exit:800}},e.createElement(a.a,{className:f.root,ref:p},e.createElement(u.a,null,e.createElement(a.a,{className:f.logoBox},e.createElement(r.a,m({in:n},n?{timeout:{enter:5e3,exit:800}}:{}),e.createElement(o.a,{alt:"help",src:l.a,className:f.bigAvatar})),e.createElement(i.a,{variant:"button",className:f.textWithShadow}," Management App ")),e.createElement(a.a,{className:f.descriptionBox},e.createElement(i.a,{variant:"subtitle2"},"An application that you can easily create & design your own data."),e.createElement(i.a,{variant:"subtitle2"},"Get started with your Google account!"),e.createElement(i.a,{variant:"subtitle2"},"This app will not keep any personal information."))),e.createElement(s.a,null))))}}).call(this,n(0))},410:function(e,t,n){"use strict";t.a=n.p+"moon.f206bc3d5be8311c77d9897da44e1f65.png"},411:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var r=n(34),a=n(96),o=n(16);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return c(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var l=Object(r.a)((function(e){return{root:(t={margin:0,padding:"1vw",display:"flex",flexWrap:"wrap",width:"100%",justifyContent:"center",flexDirection:"column",alignItems:"center"},n="margin",r="auto",n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t)};var t,n,r}));function u(t){var n=t.children,r=i(e.useState(!1),2),c=r[0],u=r[1],s=l(),f=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return u(e.isIntersecting)}))}),{rootMargin:"-50px 0px"});return e.observe(f.current),function(){return e.unobserve(f.current)}}),[]),e.createElement(a.a,{in:c,timeout:{enter:2e3,exit:800}},e.createElement(o.a,{className:s.root,boxShadow:4,ref:f},n))}}).call(this,n(0))},412:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(34),a=n(148),o=n(16),i=n(17);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s=Object(r.a)((function(e){return{root:{display:"flex",flexDirection:"row",justifyContent:"center",alignItems:"flex-start",width:"100%",height:"35vh",backgroundColor:"inherit"},innerBox:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",backgroundColor:"inherit",width:"30vw",color:"#eaeaea",textShadow:"1px 5px 5px #9e9999"}}}));function f(){var t=s(),n=l(e.useState(!1),2),r=n[0],u=n[1],f=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){u(e.isIntersecting)}))}),{rootMargin:"150px 0px"});return e.observe(f.current),function(){return e.unobserve(f.current)}}),[]),e.createElement(e.Fragment,null,e.createElement(a.a,c({in:r,style:{transformOrigin:"50% 100%"}},r?{timeout:{appear:1500,enter:1500,exit:1e3}}:{}),e.createElement(o.a,{className:t.root,ref:f},e.createElement(o.a,{className:t.innerBox},e.createElement(i.a,{variant:"h4",style:{fontWeight:"bolder"}},"SOME TEXT")),e.createElement(o.a,{className:t.innerBox},e.createElement(i.a,{variant:"h4",style:{fontWeight:"bolder"}},"SOME TEXT")))))}}).call(this,n(0))},413:function(e,t,n){"use strict";t.a=n.p+"black.3f02a132738700226c84ed1f5863d59a.png"},414:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return m}));var r=n(34),a=n(16),o=n(17),i=n(96),c=n(415),l=n(416);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var f=Object(r.a)((function(e){return{root:{display:"flex",flexDirection:"column",flexWrap:"wrap",justifyContent:"center",alignContent:"center",height:"100vh",width:"100%",backgroundImage:"url(".concat(l.a,")"),backgroundSize:"cover",color:"white"}}}));function m(){var t=f(),n=u(e.useState(!1),2),r=n[0],l=n[1],s=e.useRef(!0),m=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return l(e.isIntersecting)})),s.current&&(s.current=!1)}),{rootMargin:"-350px 0px"});return e.observe(m.current),function(){return e.unobserve(m.current)}}),[]),e.createElement(i.a,{in:r,timeout:{enter:1300,exit:800}},e.createElement(a.a,{className:t.root,ref:m},e.createElement(o.a,{variant:"h1",color:"inherit",style:{textShadow:"5px 1.5px 1.5px gray"}},s.current?"WELCOME":"Ready to start?"),s.current?null:e.createElement(c.a,null)))}}).call(this,n(0))},415:function(e,t,n){"use strict";(function(e){var r=n(16),a=n(58),o=n(34),i=n(584),c=n(79);function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=Object(o.a)((function(e){return{button:{width:"fit-content",marginBottom:"0.5vh"},text:u(u({},e.typography.button),{},{backgroundColor:"inherit",textShadow:"2px 1px 1px gray",color:"inherit"}),innerBox:{marginTop:"1vh",color:"white"}}}));t.a=function(){var t=f();return e.createElement(r.a,{className:t.innerBox},e.createElement(c.b,{to:"/management",style:{textDecoration:"none",color:"white"}},e.createElement(a.a,{size:"large",color:"secondary",variant:"contained",startIcon:e.createElement(i.a,{color:"inherit",style:{fontSize:30}}),className:t.button},"GET STARTED")))}}).call(this,n(0))},416:function(e,t,n){"use strict";t.a=n.p+"desk.3207c1ef94c867f80b0e9df6ac78d52b.jpg"},417:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return p}));var r=n(17),a=n(34),o=n(574),i=n(578),c=n(418),l=n(224),u=n(16),s=n(110),f=n(142);function m(){return e.createElement(r.a,{variant:"body2",color:"textSecondary"},"Copyright © ",e.createElement(i.a,{color:"inherit",href:"#"},"Jack's Website")," ",(new Date).getFullYear(),".")}var d=Object(a.a)((function(e){return{root:{display:"flex",flexDirection:"column",minHeight:"20vh",justifyContent:"center"},footer:{padding:e.spacing(3,2),marginTop:"auto",background:e.palette.grey[200],textAlign:"center",color:"white"},arrow:{width:"4vw",height:"4vw",padding:"3vw",alignSelf:"center",marginBottom:"2vh",marginTop:"2vh",backgroundSize:"contain"}}}));function p(t){var n=d(),r=t.location;console.log("location.pathname? ".concat(r.pathname));return e.createElement(e.Fragment,null,"/guestbook"===r.pathname?null:e.createElement(e.Fragment,null,e.createElement(u.a,{className:n.root,style:"/"===r.pathname?{background:"linear-gradient(black, #eeeeee)"}:{backgroundImage:"url(".concat(f.a,")"),backgroundSize:"auto",transform:"scaleY(-1)"}},e.createElement(s.a,{title:"Move to Top","aria-label":"move-to-top",placement:"top",enterDelay:350,leaveDelay:150},e.createElement(u.a,{className:n.arrow,style:"/"===r.pathname?{background:"no-repeat center/80% url(".concat(c.a,")")}:{background:"no-repeat center/80% url(".concat(l.a,")"),transform:"rotate(180deg)"},onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},onMouseOver:function(e){return function(e){e.target.style.cursor="pointer"}(e)}}))),e.createElement("footer",{className:n.footer},e.createElement(o.a,{maxWidth:"sm"},e.createElement(m,{style:{fontWeight:"bolder"}})))))}}).call(this,n(0))},418:function(e,t,n){"use strict";t.a=n.p+"white-arrow.c4422a7bc5ee23d081b3566f93e91f1f.png"},420:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return d}));var r=n(16),a=n(41),o=n(17),i=n(58),c=n(34),l=n(2),u=n.n(l);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return f(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var m=Object(c.a)((function(e){return{root:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",width:"100vw",height:"100vh"},paper:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",width:"80vw",padding:"5vh",color:e.palette.grey[500],fontWeight:"bolder"},paper2:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"flex-start",marginTop:"3vh",fontWeight:"bolder"},button:{marginTop:"5vh",fontWeight:"bolder"}}}));function d(t){var n=t.error,c=(t.componentStack,t.resetErrorBoundary),l=m(),u=s(e.useState(30),2),f=u[0],d=u[1];return e.useEffect((function(){f<=0&&location.replace(location.origin),console.log("second :  ".concat(f));var e=setInterval((function(){d(f-1)}),1e3);return function(){return clearInterval(e)}}),[f]),e.createElement(r.a,{className:l.root},e.createElement(a.a,{className:l.paper},e.createElement(o.a,{variant:"h5"}," ","ERROR : ".concat(n.message)," "),e.createElement(o.a,{variant:"h3"}," ","Will go back to the HOME","  "),e.createElement(o.a,{variant:"h2"}," ","in ".concat(f," seconds."),"  "),e.createElement(i.a,{className:l.button,variant:"outlined",color:"secondary",size:"large",onClick:c},"Return to Home Now"),e.createElement(a.a,{className:l.paper2,elevation:0},e.createElement(o.a,{variant:"subtitle1"}," ","Please check below.","  "),e.createElement(o.a,{variant:"subtitle2"}," ","1. Login timeout - Login Retention Time: 2 hours","  "),e.createElement(o.a,{variant:"subtitle2"}," ","2. Invalid Request","  "))))}d.propTypes={resetErrorBoundary:u.a}}).call(this,n(0))},431:function(e,t,n){"use strict";n.r(t),function(e){var t=n(18),r=n.n(t),a=n(89),o=n(585);r.a.render(e.createElement(o.a,null,e.createElement(a.d,null)),document.getElementById("root"))}.call(this,n(0))},57:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return c}));var r=n(569),a=n(586),o=n(2),i=n.n(o);function c(t){var n=t.open,o=t.onClose,i=t.content,c=t.status,l=t.direction;return e.createElement(r.a,{open:n,onClose:o,anchorOrigin:l||{vertical:"top",horizontal:"center"}},e.createElement(a.a,{onClose:o,severity:c,variant:"filled",message:{fontWeight:"bolder",fontSize:"5rem"}},i))}c.propTypes={open:i.a.bool.isRequired,onClose:i.a.func,content:i.a.string,status:i.a.oneOf(["error","success"]),direction:i.a.object}}).call(this,n(0))},68:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return l}));var r=n(81),a=n.n(r),o=n(82),i=function(){return a.a.get("".concat(o.a,"/management"),{withCredentials:!0})},c=function(e,t){return console.log("saving headers : \n    headers : ".concat(JSON.stringify(e),"\n    groupings : ").concat(JSON.stringify(t))),a.a.put("".concat(o.a,"/headers"),{headers:e,groupings:t},{withCredentials:!0}).then((function(e){return Promise.resolve(e.data)}))},l=function(e,t,n){return a.a.put("".concat(o.a,"/data"),{headers:e,groupings:t,data:n},{withCredentials:!0}).then((function(e){return 400===e.status?Promise.reject(400):Promise.resolve(e.data)}))}},82:function(e,t,n){"use strict";t.a="https://management-apple.herokuapp.com"},89:function(e,t,n){"use strict";(function(e){n.d(t,"c",(function(){return w})),n.d(t,"b",(function(){return S})),n.d(t,"a",(function(){return x})),n.d(t,"d",(function(){return j}));var r=n(79),a=n(27),o=n(381),i=n(390),c=n(392),l=n(402),u=n(575),s=n(403),f=n(417),m=n(419),d=n.n(m),p=n(234),h=n(213),g=n(57),b=n(420),y=n(421);function v(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return E(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var w=e.createContext(),O=e.createContext(),S=e.createContext(),x=e.createContext();function j(){var t=d.a.parse(window.location.hash.substr(1)).id_token,n=v(Object(p.a)(["profile"]),3),m=n[0],E=n[1],j=(n[2],v(e.useState(m.profile),2)),C=j[0],A=j[1],I=v(e.useState(!1),2),k=I[0],P=I[1],N=v(e.useState({open:!1,result:"success"}),2),D=N[0],T=N[1],R=e.useRef(0);return e.useEffect((function(){t&&(console.log("fetch API 실행"),Object(h.a)(t).then((function(e){console.log("response data : ".concat(JSON.stringify(e)));var t=e.name,n=e.email,r=e.picture;E("profile",{name:t,email:n,picture:r},{path:"/",maxAge:7200})})).catch((function(e){throw new Error("Login Failed. Please authorize the use of cookies in your browser.")})))}),[t]),e.useEffect((function(){m.profile&&(console.log("cookies.profile : ".concat(JSON.stringify(m.profile))),A(m.profile))}),[m.profile]),e.createElement(e.Fragment,null,e.createElement(y.ErrorBoundary,{FallbackComponent:b.a,onError:function(e,t){console.log("error : ".concat(e,"\n                componentStack : ").concat(t))},onReset:function(){return location.replace(location.origin)}},e.createElement(w.Provider,{value:C||{name:""}},"          ",e.createElement(O.Provider,{value:A},"   ",e.createElement(S.Provider,{value:function(e){return function(e){var t=setInterval((function(){console.log("progress : ".concat(R.current)),P(!0),R.current=R.current<100?R.current+20:100,100===R.current&&(R.current=0,P(!1),T({open:!0,result:e}),clearInterval(t))}),200)}(e)}},"  ",e.createElement(x.Provider,{value:T},"  ",e.createElement(u.a,null),e.createElement(r.a,null,e.createElement(o.a,null),e.createElement(a.c,null,e.createElement(a.a,{exact:!0,path:"/",render:function(){return e.createElement(s.a,{isLoading:k})}}),e.createElement(a.a,{path:"/guestbook",render:function(){return e.createElement(i.a,{isLoading:k})}}),e.createElement(a.a,{path:"/management",render:function(){return e.createElement(c.a,{isLoading:k})}}),e.createElement(a.a,{path:"/headers",render:function(){return e.createElement(l.a,{isLoading:k})}})),e.createElement(a.a,{path:"/",render:function(t){return e.createElement(f.a,t)}})))))),e.createElement(g.a,{open:D.open,onClose:function(){return T({open:!1})},content:"error"===D.result?"Not saved.\n                Reason : Invalid input.":" SAVED ",status:D.result,direction:{vertical:"top",horizontal:"right"}})))}}).call(this,n(0))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2N1c3RvbUhvb2svTG9hZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3VzdG9tSG9vay91c2VPbkZpcnN0UmVuZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbWFuYWdlbWVudC1iYWNrZ3JvdW5kLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9Mb2dpbkFQSS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2Fycm93LnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2Vhc3ktbG9naW4ucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvbGluay1tYW5hZ2VtZW50LXBhZ2UucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3RhcnQtcmlnaHQtYXdheS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9tYWtlLWhlYWRlcnMucG5nIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvaGFuZGxlLXRhYmxlLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL215bWVudS5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9zbGlkZTAucG5nIiwid2VicGFjazovLy8uL3NyYy9ob21lL0ltYWdlU2xpZGVTb3VyY2VzLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsL0d1ZXN0Ym9va0FQSS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFuYWdlbWVudC9UYWJsZU9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL25hdi9OYXYuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2N1c3RvbUhvb2svSGlkZU9uU2Nocm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbmF2L1NpZGVNZW51TGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbmF2L1NpZ25JbkJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9uSW1hZ2UvZ29vZ2xlU2lnbmluLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvbmF2L1NpZ25PdXRCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2d1ZXN0Ym9vay9HdWVzdGJvb2suanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hbmFnZW1lbnQvTWFuYWdlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFuYWdlbWVudC9NYW51YWxEaWFsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hbmFnZW1lbnQvRGVmYXVsdFBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvcGFyc2VEYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9tYW5hZ2VtZW50L1NhdmVCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hbmFnZW1lbnQvSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaG9tZS9Ib21lLmpzIiwid2VicGFjazovLy8uL3NyYy9ob21lL0ludHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaG9tZS9DYXJvdXNlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaG9tZS9MaXN0Q2Fyb3VzZWxEZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3doaXRlYmFja2dyb3VuZC5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2hvbWUvSW50cm9kdWN0aW9uMi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL21vb24ucG5nIiwid2VicGFjazovLy8uL3NyYy9ob21lL0Nyb3NzbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaG9tZS9EZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL2JsYWNrLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvaG9tZS9NYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9ob21lL1N0YXJ0QnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvZGVzay5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvb3Rlci9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy93aGl0ZS1hcnJvdy5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2N1c3RvbUhvb2svRXJyb3JGYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2N1c3RvbUhvb2svU25hY2tCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvTWFuYWdlbWVudEFQSS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9zZXJ2ZXJVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiZXhlY3V0ZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImRlZmVycmVkTW9kdWxlcyIsImFwcGx5IiwiY2hlY2tEZWZlcnJlZE1vZHVsZXMiLCJyZXN1bHQiLCJkZWZlcnJlZE1vZHVsZSIsImZ1bGZpbGxlZCIsImoiLCJkZXBJZCIsInNwbGljZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIjAiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsIkxvYWRpbmciLCJpc0xvYWRpbmciLCJSZWFjdCIsIkZyYWdtZW50Iiwic3R5bGUiLCJoZWlnaHQiLCJ3aWR0aCIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJmbGV4RGlyZWN0aW9uIiwidmFyaWFudCIsImNvbG9yIiwic2l6ZSIsImRpc2FibGVkIiwiZm9udFdlaWdodCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImJvb2wiLCJ1c2VPbkZpcnN0UmVuZGVyIiwiZnVuYyIsImlzRmlyc3RSZWYiLCJ1c2VSZWYiLCJjdXJyZW50IiwicmVkaXJlY3RHb29nbGVMb2dpbiIsImF4aW9zIiwic2VydmVyVVJMIiwidGhlbiIsInJlcyIsImxvY2F0aW9uIiwiYXNzaWduIiwiZ2V0VG9rZW5BbmRQcm9maWxlIiwidG9rZW4iLCJwb3N0Iiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNyYyIsInNsaWRlMCIsImRlc2NyaXB0aW9uIiwiZWFzeUxvZ2luIiwibGlua01hbmFnZW1lbnRQYWdlIiwic3RhcnRSaWdodEF3YXkiLCJtYWtlSGVhZGVycyIsImhhbmRsZVRhYmxlIiwidXNlTXltZW51IiwiZ2V0R3Vlc3Rib29rTGlzdCIsInBvc3RHdWVzdGJvb2siLCJjb250ZW50IiwiZGVsZXRlR3Vlc3Rib29rIiwiYXJ0aWNsZV9pZCIsIm9wdGlvbnMiLCJleHBvcnRCdXR0b24iLCJncm91cGluZyIsInNlbGVjdGlvbiIsImhlYWRlclN0eWxlIiwiYWN0aW9uc0NvbHVtbkluZGV4IiwiY29sdW1uc0J1dHRvbiIsImRlYm91bmNlSW50ZXJ2YWwiLCJwYWdlU2l6ZSIsInBhZ2VTaXplT3B0aW9ucyIsImxvY2FsaXphdGlvbiIsInBhZ2luYXRpb24iLCJsYWJlbERpc3BsYXllZFJvd3MiLCJ0b29sYmFyIiwiblJvd3NTZWxlY3RlZCIsImhlYWRlciIsImFjdGlvbnMiLCJib2R5IiwiZW1wdHlEYXRhU291cmNlTWVzc2FnZSIsImVuZEljb24iLCJ1c2VTdHlsZXMiLCJtYWtlU3R5bGVzIiwidGhlbWUiLCJyb290IiwiZmxleEdyb3ciLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImxlZnQiLCJwYWRkaW5nTGVmdCIsImp1c3RpZnkiLCJjZW50ZXIiLCJyaWdodCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmciLCJzcGFjaW5nIiwiTmF2IiwicHJvcHMiLCJ1c2VTdGF0ZSIsIm1lbnUiLCJzdGF0ZSIsInNldFN0YXRlIiwiY2xhc3NlcyIsInRvZ2dsZURyYXdlciIsImFuY2hvciIsIm9wZW4iLCJldmVudCIsImZsYWciLCJwcm9maWxlIiwidXNlQ29udGV4dCIsIlVzZXJDb250ZXh0IiwiTG9nb3V0QnRuIiwiYm94U2hhZG93IiwiY29udGFpbmVyIiwiY2xhc3NOYW1lIiwiaXRlbSIsInRvIiwidGV4dERlY29yYXRpb24iLCJtYXAiLCJsaW5rIiwib25DbGljayIsIm1hcmdpblJpZ2h0Iiwib25DbG9zZSIsIlNpZGVNZW51TGlzdCIsIkhpZGVPblNjcm9sbCIsImNoaWxkcmVuIiwidHJpZ2dlciIsInVzZVNjcm9sbFRyaWdnZXIiLCJhcHBlYXIiLCJkaXJlY3Rpb24iLCJpbiIsImxpc3QiLCJsaXN0SXRlbSIsImxpc3RJdGVtVGV4dCIsInRleHRBbGlnbiIsIm1hcmdpbkJvdHRvbSIsImxhcmdlQXZhdGFyIiwiaW5saW5lIiwibGlzdFRleHQiLCJtb2RhbCIsInRvcCIsInRyYW5zZm9ybSIsInBvc2l0aW9uIiwibWluV2lkdGgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwYWxldHRlIiwiYmFja2dyb3VuZCIsInBhcGVyIiwiYm9yZGVyIiwic2hhZG93cyIsIm1vZGFsUm93Qm94IiwibW9kYWxDb2xCb3giLCJidXR0b24iLCJNZW51TGlzdCIsImhhbmRsZUdsb2JhbFNuYWNrYmFyIiwiR2xvYmFsU25hY2tiYXJDb250ZXh0IiwiZW1haWxJbnB1dCIsInNldEVtYWlsSW5wdXQiLCJzZXRNb2RhbCIsImlzTG9nZ2VkIiwicm9sZSIsIm9uS2V5RG93biIsInByaW1hcnkiLCJwaWN0dXJlIiwiYWx0IiwiY29tcG9uZW50IiwiZGl2aWRlciIsInNlY29uZGFyeSIsImVtYWlsIiwiZWRnZSIsImFyaWEtbGFiZWwiLCJmb250U2l6ZSIsImFyaWEtbGFiZWxsZWRieSIsImFyaWEtZGVzY3JpYmVkYnkiLCJpZCIsImxhYmVsIiwib25DaGFuZ2UiLCJlIiwidGFyZ2V0Iiwic2F2ZURhdGEiLCJzZXRUaW1lb3V0IiwicmVwbGFjZSIsIm9yaWdpbiIsImVyciIsIkVycm9yIiwic2lnbkluIiwiZ29vZ2xlU2lnbmluSW1hZ2UiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwidXNlU3R5bGUiLCJTaWduSW5CdXR0b24iLCJsb2dvdXQiLCJtYXJnaW4iLCJMaWdodFRvb2x0aXAiLCJ3aXRoU3R5bGVzIiwidG9vbHRpcCIsImNvbW1vbiIsIndoaXRlIiwiVG9vbHRpcCIsInVzZUNvb2tpZXMiLCJyZW1vdmVDb29raWUiLCJ0aXRsZSIsImhyZWYiLCJiYWNrTG9nbyIsInpJbmRleCIsIm9wYWNpdHkiLCJjaGF0Q29udGFpbmVyIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiaW5wdXRCb3giLCJtYXJnaW5Ub3AiLCJidWJibGUiLCJib3JkZXJSYWRpdXMiLCJtYXhXaWR0aCIsIm92ZXJmbG93IiwibXlCdWJibGUiLCJjaGF0Qm94IiwiT3RoZXJBdmF0YXIiLCJteUF2YXRhciIsIkd1ZXN0Ym9vayIsImlucHV0UmVmIiwic25hY2siLCJzZXRTbmFjayIsInRvb0Zhc3RTbmFjayIsInNldFRvb0Zhc3RTbmFjayIsImRlbGV0ZWRTbmFjayIsInNldERlbGV0ZWRTbmFjayIsImVycm9yU25hY2siLCJzZXRFcnJvclNuYWNrIiwiaW5wdXQiLCJjaGF0TG9ncyIsImxvZ1JlZiIsImNoYXRDb250YWluZXJSZWYiLCJ0cmFuc3BvcnRhYmxlUmVmIiwiZ2V0TGlzdCIsImNvbnNvbGUiLCJsb2ciLCJoYW5kbGVPbkRlbGV0ZUNsaWNrIiwiY3VycmVudFRhcmdldCIsImRhdGFzZXQiLCJlbnRlcktleUhhbmRsZXIiLCJrZXlDb2RlIiwicXVlcnlTZWxlY3RvciIsImZvY3VzIiwic2Nyb2xsVG8iLCJzY3JvbGxIZWlnaHQiLCJzdGF0dXMiLCJlcnJvciIsInVzZUVmZmVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZWxldmF0aW9uIiwicmVmIiwiYXJ0aWNsZSIsImluZGV4Iiwib3duIiwiaW50ZXJhY3RpdmUiLCJwbGFjZW1lbnQiLCJkYXRhLWlkIiwiX2lkIiwiYWxpZ25TZWxmIiwibGluZUhlaWdodCIsImRhdGUiLCJhdXRvRm9jdXMiLCJwbGFjZWhvbGRlciIsImZ1bGxXaWR0aCIsInYiLCJJbnB1dExhYmVsUHJvcHMiLCJzaHJpbmsiLCJNYW5hZ2VtZW50VGFibGUiLCJoYW5kbGVQcm9ncmVzcyIsIlByb2dyZXNzQ29udGV4dCIsInNhdmVkU25hY2siLCJzZXRTYXZlZFNuYWNrIiwiZGlhbG9nIiwic2V0RGlhbG9nIiwiZGVmYXVsdFBhZ2UiLCJoYXNUYWJsZSIsImNvbHVtbnMiLCJ0YWJsZVJlZiIsImdldE1hbmFnZW1lbnRUYWJsZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoZWFkZXJzIiwicGFyc2VEYXRhIiwiZ3JvdXBpbmdzIiwiaGFuZGxlT25TYXZlIiwiaXNBdXRvU2F2ZSIsImRhdGFNYW5hZ2VyIiwicmVkdWNlIiwib2JqIiwiZm9yRWFjaCIsInRhYmxlRGF0YSIsInJlc3QiLCJvbmRiQ2xpY2siLCJvbktleWRvd24iLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsIm1hdGNoIiwibWV0YUtleSIsImN0cmxLZXkiLCJwcmV2ZW50RGVmYXVsdCIsIk1hcmdpbiIsImljb24iLCJkZWxldGlvbnMiLCJpbmRleE9mIiwicHJldkRhdGEiLCJlZGl0YWJsZSIsIm9uUm93QWRkIiwibmV3RGF0YSIsInByZXZTdGF0ZSIsIm9uUm93VXBkYXRlIiwib2xkRGF0YSIsIk1hbnVhbERpYWxvZyIsImJhY2tncm91bmRJbWFnZSIsImJ1dHRvbkNvbnRhaW5lciIsInRleHQiLCJ0eXBvZ3JhcGh5IiwidGV4dFNoYWRvdyIsImRlZmF1bHREYXRhIiwiZmllbGQiLCJEZWZhdWx0UGFnZSIsImZhZGUiLCJzZXRGYWRlIiwiZmFkZTIiLCJzZXRGYWRlMiIsInRpbWVvdXQiLCJlbnRlciIsImV4aXQiLCJndXR0ZXJCb3R0b20iLCJzaGFwZSIsImFycmF5IiwidmFsdWVzIiwiZmlsdGVyIiwiU2F2ZUJ1dHRvbiIsImFsaWduQ29udGVudCIsImZvcm1Sb290IiwiYXJyb3ciLCJiYWNrZ3JvdW5kU2l6ZSIsIm1hcmdpbkxlZnQiLCJkZWZhdWx0SGVhZGVyIiwiSGVhZGVycyIsInJlc3VsdFNuYWNrIiwic2V0UmVzdWx0U25hY2siLCJBcnJheSIsImZpbGwiLCJzZXREYXRhIiwiZGF0YVJlZiIsImdyb3VwaW5nTGVuZ3RoIiwiaGFuZGxlTG9nb3V0IiwiaGFuZGxlU3VibWl0IiwiZXZlcnkiLCJzYXZlSGVhZGVycyIsImF1dG9Db21wbGV0ZSIsInJlcXVpcmVkIiwiaGFuZGxlSW5wdXRDaGFuZ2UiLCJlbnRlckRlbGF5IiwibGVhdmVEZWxheSIsImNoZWNrZWQiLCJoYW5kbGVHcm91cGluZ3MiLCJvbk1vdXNlT3ZlciIsImN1cnNvciIsImZsZXhXcmFwIiwiSG9tZSIsInRleHRQYXBlciIsIkludHJvZHVjdGlvbiIsImdyb3ciLCJzZXRHcm93IiwiY3VycmVudFNsaWRlIiwic2V0Q3VycmVudFNsaWRlIiwic3RlcHBlciIsInNldFN0ZXBwZXIiLCJkb21SZWYiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJyb290TWFyZ2luIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsInRyYW5zZm9ybU9yaWdpbiIsImltYWdlTGlzdCIsInRleHRDb250YWluZXIiLCJJbWFnZUNhcm91c2VsIiwic2xpZGVJbmRleCIsImFmdGVyU2xpZGUiLCJhdXRvcGxheSIsImF1dG9wbGF5SW50ZXJ2YWwiLCJ0cmFuc2l0aW9uTW9kZSIsInNwZWVkIiwiaGVpZ2h0TW9kZSIsImltYWdlIiwibnVtYmVyIiwiRGVzY3JpcHRpb25MaXN0IiwiYWN0aXZlU3RlcCIsIm9yaWVudGF0aW9uIiwic2xpZGVTb3VyY2UiLCJjb21wbGV0ZWQiLCJsb2dvQm94IiwiYmlnQXZhdGFyIiwidGV4dFdpdGhTaGFkb3ciLCJkZXNjcmlwdGlvbkJveCIsIm1vb25JbWFnZSIsIkNyb3NzbGluZSIsImlubmVyQm94IiwiRGVzY3JpcHRpb24iLCJNYWluIiwic3RhcnRJY29uIiwiQ29weXJpZ2h0IiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwibWluSGVpZ2h0IiwiZm9vdGVyIiwiZ3JleSIsIlN0aWNreUZvb3RlciIsInBhdGhuYW1lIiwibWFuYWdlbWVudEJhY2tncm91bmQiLCJ3aGl0ZUFycm93IiwiYmVoYXZpb3IiLCJ0cmFuc2l0aW9uIiwicGFwZXIyIiwiRXJyb3JGYWxsYmFjayIsInJlc2V0RXJyb3JCb3VuZGFyeSIsImNvbXBvbmVudFN0YWNrIiwic2Vjb25kIiwic2V0U2Vjb25kIiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJtZXNzYWdlIiwiUmVhY3RET00iLCJyZW5kZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiQ3VzdG9tU25hY2tiYXIiLCJhbmNob3JPcmlnaW4iLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJzZXZlcml0eSIsIm9uZU9mIiwicHV0IiwicmVqZWN0IiwiY3JlYXRlQ29udGV4dCIsIkxvZ291dENvbnRleHQiLCJBcHAiLCJpZF90b2tlbiIsInFzIiwicGFyc2UiLCJoYXNoIiwic3Vic3RyIiwiY29va2llcyIsInNldENvb2tpZSIsInNldFByb2ZpbGUiLCJzZXRJc0xvYWRpbmciLCJnbG9iYWxTbmFja2JhciIsInNldEdsb2JhbFNuYWNrYmFyIiwicHJvZ3Jlc3NSZWYiLCJwYXRoIiwibWF4QWdlIiwiRmFsbGJhY2tDb21wb25lbnQiLCJvbkVycm9yIiwib25SZXNldCIsIlByb3ZpZGVyIiwiaGFuZGxlQmVm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QUFJMUIsT0FBUSxTQUFDL1UsR0FBRCxPQUFTLGdCQUFDLElBQVdBLFdBTXJELGdCQUFDLElBQUQsQ0FBZ0JRLEtBQU04VixFQUFlOVYsS0FBTWlCLFFBQVMsa0JBQUk4VSxFQUFrQixDQUFDL1YsTUFBSyxLQUNoRi9DLFFBQWlDLFVBQXhCNlksRUFBZXZlLE9BQWYsc0RBQ2lCLFVBQVdzUixPQUFRaU4sRUFBZXZlLE9BQzVEaUssVUFBVyxDQUFDb1QsU0FBUyxNQUFPQyxXQUFXLGdCIiwiZmlsZSI6ImFwcC5iM2U1NmJkMzk1YmU2OGE4Njg4Zi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbNDMxLDEsMl0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCJpbXBvcnQge0JveCwgQ2lyY3VsYXJQcm9ncmVzcywgQnV0dG9ufSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2FkaW5nICh7aXNMb2FkaW5nfSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAge1xyXG4gICAgICAgIGlzTG9hZGluZyAmJiBcclxuICAgICAgICAgICAgKDxCb3ggc3R5bGU9e3toZWlnaHQ6JzEwMHZoJywgd2lkdGg6JzEwMHZ3JywgZGlzcGxheTonZmxleCcsIGp1c3RpZnlDb250ZW50OidjZW50ZXInLFxyXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOidjZW50ZXInLCBmbGV4RGlyZWN0aW9uOidjb2x1bW4nfX0+XHJcbiAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD0ndGV4dCdcclxuICAgICAgICAgICAgY29sb3I9J3ByaW1hcnknXHJcbiAgICAgICAgICAgIHNpemU9J2xhcmdlJ1xyXG4gICAgICAgICAgICBkaXNhYmxlZFxyXG4gICAgICAgICAgICBzdHlsZT17e2ZvbnRXZWlnaHQ6J2JvbGRlcid9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtgU2F2aW5nIGNoYW5nZXNgfVxyXG4gICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxDaXJjdWxhclByb2dyZXNzLz5cclxuICAgICAgICAgICAgPC9Cb3g+KVxyXG4gICAgICAgIH1cclxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgIClcclxufVxyXG5cclxuTG9hZGluZy5wcm9wVHlwZXMgPSB7XHJcbiAgICBpc0xvYWRpbmcgOiBQcm9wVHlwZXMuYm9vbFxyXG59IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbi8vIGNvbnRzdHJ1Y3RvciDtm4VcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlT25GaXJzdFJlbmRlciAoZnVuYykge1xyXG4gICAgY29uc3QgaXNGaXJzdFJlZiA9IFJlYWN0LnVzZVJlZih0cnVlKTtcclxuICAgIGlmIChpc0ZpcnN0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBpc0ZpcnN0UmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgICBmdW5jKCk7XHJcbiAgICB9XHJcbn1cclxudXNlT25GaXJzdFJlbmRlci5wcm9wVHlwZXMgPSB7XHJcbiAgICBmdW5jIDogUHJvcFR5cGVzLmZ1bmNcclxufSIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJtYW5hZ2VtZW50LWJhY2tncm91bmQuYTAwOGRlODEzOTU4MWIwZGFiZjE4MzJlZDFjOWM0NmUuanBnXCI7IiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgc2VydmVyVVJMIGZyb20gXCIuL3NlcnZlclVSTFwiO1xyXG5cclxuLy8gVVJMIGV4cG9ydFxyXG4vLyBzZXZlcuyXkOyEnCDrsJvsnYAgdXJs66GcIOumrOuLpOydtOugie2KuFxyXG5leHBvcnQgY29uc3QgcmVkaXJlY3RHb29nbGVMb2dpbiA9ICgpID0+IGF4aW9zLmdldChgJHtzZXJ2ZXJVUkx9L2xvZ2luYCkudGhlbihyZXMgPT4gbG9jYXRpb24uYXNzaWduKHJlcy5kYXRhKSk7XHJcbmV4cG9ydCBjb25zdCBnZXRUb2tlbkFuZFByb2ZpbGUgPSAodG9rZW4pID0+IHtcclxuICAgIHJldHVybiBheGlvcy5wb3N0KGAke3NlcnZlclVSTH0vbG9naW5gLCB7dG9rZW59ICx7XHJcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzIDogdHJ1ZSxcclxuICAgIH0pLnRoZW4ocmVzcG9uc2U9PlByb21pc2UucmVzb2x2ZShyZXNwb25zZS5kYXRhKSk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhcnJvdy5kMDgzMjhmNjJkMTliNjZmOGVhOGQ2ZDAwNjcyNGM4Yi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZWFzeS1sb2dpbi4zZTkxYjhkODg3MzU2ODkwNzlhZmQwNzZlM2UwNzQyMy5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwibGluay1tYW5hZ2VtZW50LXBhZ2UuNDgwMDRkMTMzYjVmYzIyNTc3NzA0Yzk1ZWIzNWYzZDgucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInN0YXJ0LXJpZ2h0LWF3YXkuNGUyMTcyNjJkMmM4ZDg2ZDVlMGY2ZWU0MzJhZWZiY2YucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIm1ha2UtaGVhZGVycy5jZmZhYzYzNGYyOWQzOGRkYmQxZjQ0NjdhNTczZWJjNC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaGFuZGxlLXRhYmxlLjNjNTg2OTE0YTk2ZDRhZmVkZGM1YzdhZDNkN2RmMzU0LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJteW1lbnUuOWZkZDU4YWNhNzRlYjQ4ZDk1NWY4MzVjOWVjODc5NmUucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNsaWRlMC4wYWEyOTVhM2I3YjRkMzAxMzI4NmY1MjRjNDc2NGNkNy5wbmdcIjsiLCJpbXBvcnQgZWFzeUxvZ2luIGZyb20gXCIuLi9pbWFnZXMvZWFzeS1sb2dpbi5wbmdcIjtcclxuaW1wb3J0IGxpbmtNYW5hZ2VtZW50UGFnZSBmcm9tIFwiLi4vaW1hZ2VzL2xpbmstbWFuYWdlbWVudC1wYWdlLnBuZ1wiO1xyXG5pbXBvcnQgc3RhcnRSaWdodEF3YXkgZnJvbSBcIi4uL2ltYWdlcy9zdGFydC1yaWdodC1hd2F5LnBuZ1wiO1xyXG5pbXBvcnQgbWFrZUhlYWRlcnMgZnJvbSBcIi4uL2ltYWdlcy9tYWtlLWhlYWRlcnMucG5nXCI7XHJcbmltcG9ydCBoYW5kbGVUYWJsZSBmcm9tIFwiLi4vaW1hZ2VzL2hhbmRsZS10YWJsZS5wbmdcIjtcclxuaW1wb3J0IHVzZU15bWVudSBmcm9tIFwiLi4vaW1hZ2VzL215bWVudS5wbmdcIjtcclxuaW1wb3J0IHNsaWRlMCBmcm9tIFwiLi4vaW1hZ2VzL3NsaWRlMC5wbmdcIjtcclxuZXhwb3J0IGRlZmF1bHQgW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWUgOiAnUXVpY2sgc3RhcnQgZ3VpZGUnLFxyXG4gICAgICAgIHNyYyA6IGAke3NsaWRlMH1gLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uIDogJ0dVSURFJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZSA6ICdTaWduIGluIHdpdGggR29vZ2xlJyxcclxuICAgICAgICBzcmMgOiBgJHtlYXN5TG9naW59YCxcclxuICAgICAgICBkZXNjcmlwdGlvbiA6ICdTaWduIGluIHdpdGggZ29vZ2xlJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZSA6ICdNb3ZlIG9uIHRvIG1hbmFnZW1lbnQgcGFnZScsXHJcbiAgICAgICAgc3JjIDogYCR7bGlua01hbmFnZW1lbnRQYWdlfWAsXHJcbiAgICAgICAgZGVzY3JpcHRpb24gOiAnTW92ZSBvbiB0byBtYW5hZ2VtZW50IHBhZ2UnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lIDogJ0NsaWNrIHRoZSBibHVlIGJ1dHRvbicsXHJcbiAgICAgICAgc3JjIDogYCR7c3RhcnRSaWdodEF3YXl9YCxcclxuICAgICAgICBkZXNjcmlwdGlvbiA6ICdjbGljayBcImdldCBzdGFydGVkIHJpZ2h0IGF3YXlcIiBidXR0b24nLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lIDogJ01ha2UgSGVhZGVycycsXHJcbiAgICAgICAgc3JjIDogYCR7bWFrZUhlYWRlcnN9YCxcclxuICAgICAgICBkZXNjcmlwdGlvbiA6ICdtYWtlIGhlYWRlcnMnLFxyXG5cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZSA6ICdDcmVhdGUsIEVkaXQsIFJlbW92ZSB0YWJsZSByZWNvcmRzJyxcclxuICAgICAgICBzcmMgOiBgJHtoYW5kbGVUYWJsZX1gLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uIDogJ2hhbmRsZSB0YWJsZScsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWUgOiAnVXNlIG15bWVudSB0byBoYW5kbGUgZGF0YScsXHJcbiAgICAgICAgc3JjIDogYCR7dXNlTXltZW51fWAsXHJcbiAgICAgICAgZGVzY3JpcHRpb24gOiAndXNlIG15bWVudScsXHJcbiAgICB9LFxyXG5dOyIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCBzZXJ2ZXJVUkwgZnJvbSAnLi9zZXJ2ZXJVUkwnO1xyXG5cclxuLy8gZ3Vlc3Rib29rIGxpc3Qg67Cb7JWE7Jik6riwIDMw6rCcXHJcbmV4cG9ydCBjb25zdCBnZXRHdWVzdGJvb2tMaXN0ID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChheGlvcy5nZXQoYCR7c2VydmVyVVJMfS9ndWVzdGJvb2tgKSlcclxufVxyXG5cclxuLy8g65Ox66GdXHJcbmV4cG9ydCBjb25zdCBwb3N0R3Vlc3Rib29rID0gKGNvbnRlbnQpID0+IHtcclxuICAgIHJldHVybiBheGlvcy5wb3N0KGAke3NlcnZlclVSTH0vZ3Vlc3Rib29rYCAsIHtcclxuICAgICAgICBkYXRhIDoge1xyXG4gICAgICAgICAgICBjb250ZW50XHJcbiAgICAgICAgfVxyXG4gICAgfSwge3dpdGhDcmVkZW50aWFsczp0cnVlfSlcclxufVxyXG5cclxuLy8g7IiY7KCVXHJcbi8vIGV4cG9ydCBjb25zdCB1cGRhdGVHdWVzdGJvb2sgPSAoYXJ0aWNsZUlkLCBjb250ZW50KSA9PiB7XHJcbi8vICAgICByZXR1cm4gYXhpb3MucHV0KGAke3NlcnZlclVSTH0vZ3Vlc3Rib29rYCwge1xyXG4vLyAgICAgICAgIGRhdGEgOiB7XHJcbi8vICAgICAgICAgICAgIGFydGljbGVJZCxcclxuLy8gICAgICAgICAgICAgY29udGVudFxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH0se3dpdGhDcmVkZW50aWFscyA6IHRydWV9KVxyXG4vLyB9XHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlR3Vlc3Rib29rID0gKGFydGljbGVfaWQpID0+IHtcclxuICAgIHJldHVybiBheGlvcy5kZWxldGUoYCR7c2VydmVyVVJMfS9ndWVzdGJvb2tgICwge1xyXG4gICAgICAgIGRhdGEgOiB7XHJcbiAgICAgICAgICAgIGFydGljbGVfaWRcclxuICAgICAgICB9XHJcbiAgICB9LHsgd2l0aENyZWRlbnRpYWxzOnRydWV9KVxyXG59IiwiaW1wb3J0IHsgQnV0dG9uLCBCb3ggfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmVcIjtcclxuaW1wb3J0IHtBZGRCb3h9IGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucyc7XHJcbi8vIERBVEEgVEFCTEUgT1BUSU9OU1xyXG5cclxuIGV4cG9ydCBjb25zdCBvcHRpb25zPSB7XHJcbiAgICBleHBvcnRCdXR0b246IHRydWUsXHJcbiAgICBncm91cGluZzp0cnVlLFxyXG4gICAgc2VsZWN0aW9uOnRydWUsXHJcbiAgICBoZWFkZXJTdHlsZTp7IFxyXG4gICAgICAgIGZvbnRXZWlnaHQ6J2JvbGRlcicsXHJcbiAgICB9LFxyXG4gICAgYWN0aW9uc0NvbHVtbkluZGV4Oi0xLCAgLy8g7JWh7IWYIOyVhOydtOy9mOychOy5mFxyXG4gICAgY29sdW1uc0J1dHRvbiA6IHRydWUsIFxyXG4gICAgZGVib3VuY2VJbnRlcnZhbCA6IDE2MCwgLy8g66Gc65Sp7Iuc6rCEXHJcbiAgICBwYWdlU2l6ZSA6IDE1LCAgICAgICAgICAvLyDtjpjsnbTsp4DsgqzsnbTspohcclxuICAgIHBhZ2VTaXplT3B0aW9ucyA6IFs1LCAxNSwgMzAsIDUwLCAxMDBdLCAvLyDtjpjsnbTspogg7IKs7J207KaIIOyiheulmFxyXG4gIH1cclxuIGV4cG9ydCBjb25zdCBsb2NhbGl6YXRpb24gPSB7XHJcbiAgICBwYWdpbmF0aW9uIDogeyBsYWJlbERpc3BsYXllZFJvd3MgOiAne2NvdW50fSByb3dzIHwge2Zyb219LXt0b30nICwgfSxcclxuICAgIHRvb2xiYXI6IHtuUm93c1NlbGVjdGVkOiAnezB9IHJvdyhzKSBzZWxlY3RlZCd9LFxyXG4gICAgaGVhZGVyOiB7YWN0aW9uczogJ0VkaXQnfSxcclxuICAgIGJvZHk6IHtlbXB0eURhdGFTb3VyY2VNZXNzYWdlOiBcclxuICAgICAgICAoXHJcbiAgICAgICAgPEJveCBzdHlsZT17e2Rpc3BsYXk6J2ZsZXgnLCBmbGV4RGlyZWN0aW9uOidjb2x1bW4nfX0+XHJcbiAgICAgICAgPEJ1dHRvbiB2YXJpYW50PSd0ZXh0J1xyXG4gICAgICAgIGNvbG9yPSdwcmltYXJ5J1xyXG4gICAgICAgIHNpemU9J2xhcmdlJ1xyXG4gICAgICAgIGRpc2FibGVkXHJcbiAgICAgICAgc3R5bGU9e3tmb250V2VpZ2h0Oidib2xkZXInfX0+XHJcbiAgICAgICAgICB7YE5vIFJlY29yZHMgdG8gZGlzcGxheWB9XHJcbiAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgPEJ1dHRvbiB2YXJpYW50PSd0ZXh0J1xyXG4gICAgICAgIGNvbG9yPSdwcmltYXJ5J1xyXG4gICAgICAgIHNpemU9J2xhcmdlJ1xyXG4gICAgICAgIGRpc2FibGVkXHJcbiAgICAgICAgZW5kSWNvbj17PEFkZEJveC8+fVxyXG4gICAgICAgIHN0eWxlPXt7Zm9udFdlaWdodDonYm9sZGVyJ319XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAge2BDbGljayB0aGUgcGx1cyBpY29uIG9uIHRoZSByaWdodCBhYm92ZSBmb3IgYSBuZXcgcmVjb3JkLiBgfVxyXG4gICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgIDwvQm94PlxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG4gIH1cclxuIiwiaW1wb3J0IHsgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCB7VG9vbGJhciwgRHJhd2VyICwgQnV0dG9uICwgR3JpZCxcclxuICAgICBEaXZpZGVyLCBBcHBCYXIgYXMgQXBwYmFyLFxyXG59IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcclxuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XHJcbmltcG9ydCBIaWRlT25TY2hyb2xsIGZyb20gXCIuLi9jdXN0b21Ib29rL0hpZGVPblNjaHJvbGxcIjtcclxuaW1wb3J0IFNpZGVNZW51TGlzdCBmcm9tIFwiLi9TaWRlTWVudUxpc3RcIjtcclxuaW1wb3J0IHsgVXNlckNvbnRleHQgfSBmcm9tIFwiLi4vYXBwXCI7XHJcbmltcG9ydCBTaWduT3V0QnV0dG9uIGZyb20gXCIuL1NpZ25PdXRCdXR0b25cIjtcclxuXHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgICBmbGV4R3JvdzogMSxcclxuICAgICAgICBhbGlnbkl0ZW1zOidmbGV4LXN0YXJ0JyxcclxuICAgICAgICBwYWRkaW5nVG9wOjE4LFxyXG4gICAgICAgIHBhZGRpbmdCb3R0b206MTgsXHJcbiAgICB9LFxyXG4gICAgbGVmdCA6IHtcclxuICAgICAgICBmbGV4R3JvdzogMSxcclxuICAgICAgICBwYWRkaW5nTGVmdDozMCxcclxuICAgICAgICBqdXN0aWZ5OidmbGV4LXN0YXJ0J1xyXG4gICAgfSxcclxuICAgIGNlbnRlciA6IHtcclxuICAgICAgICBmbGV4R3JvdzogMSxcclxuICAgIH0sXHJcbiAgICByaWdodCA6IHtcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIHBhZGRpbmdSaWdodDo0NSxcclxuICAgICAgICBqdXN0aWZ5OidmbGV4LWVuZCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbiA6ICdyb3cnLFxyXG4gICAgICAgIHBhZGRpbmc6YDAgJHt0aGVtZS5zcGFjaW5nKDMpfWBcclxuICAgIH0sXHJcbiAgfSkpO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOYXYgKHByb3BzKSB7XHJcbiAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcclxuICAgICAgICBtZW51IDogZmFsc2UsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuICAgIGNvbnN0IHRvZ2dsZURyYXdlciA9IChhbmNob3IsIG9wZW4pID0+IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZsYWcgPSBvcGVuPyBzdGF0ZVthbmNob3JdID8gZmFsc2UgOiB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgc2V0U3RhdGUoeyAuLi5zdGF0ZSwgW2FuY2hvcl06IGZsYWcgfSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvZmlsZSA9IFJlYWN0LnVzZUNvbnRleHQoVXNlckNvbnRleHQpO1xyXG4gICAgY29uc3QgYW5jaG9yID0gcHJvZmlsZS5uYW1lPyAnTVlQQUdFJyA6J0xPR0lOJztcclxuICAgIGNvbnN0IGxpbmtzID0gWydndWVzdGJvb2snLCdtYW5hZ2VtZW50J107XHJcbiAgICBjb25zdCBMb2dvdXRCdG4gPSBwcm9maWxlLm5hbWU/IDxTaWduT3V0QnV0dG9uLz4gOiBudWxsO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgIDxIaWRlT25TY2hyb2xsIHsuLi5wcm9wc30+XHJcbiAgICAgICAgPEFwcGJhciBjb2xvcj0naW5oZXJpdCcgc3R5bGU9e3tib3hTaGFkb3c6J25vbmUnfX0+XHJcbiAgICAgICAgICAgIDxUb29sYmFyPlxyXG4gICAgICAgIDxHcmlkIGNvbnRhaW5lciBzcGFjaW5nPXszfT5cclxuICAgICAgICAgICAgPEdyaWQgY29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0gY2xhc3NOYW1lPXtjbGFzc2VzLmxlZnR9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPScvJyBzdHlsZT17e3RleHREZWNvcmF0aW9uIDogJ25vbmUnfX0+PEJ1dHRvbiB2YXJpYW50PSdvdXRsaW5lZCc+IEhvbWUgPC9CdXR0b24+PC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIHtsaW5rcy5tYXAoKGxpbmspID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89e2AvJHtsaW5rfWB9IHN0eWxlPXt7dGV4dERlY29yYXRpb24gOiAnbm9uZSd9fSBrZXk9e2xpbmt9PjxCdXR0b24gdmFyaWFudD0nb3V0bGluZWQnPiB7bGlua30gPC9CdXR0b24+PC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgPC9HcmlkPlxyXG4gICAgICAgICAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9e2NsYXNzZXMuY2VudGVyfT48c3Bhbj48L3NwYW4+PC9HcmlkPlxyXG4gICAgICAgICAgICAgICAgPEdyaWQgaXRlbSBjbGFzc05hbWU9e2NsYXNzZXMucmlnaHR9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD0nb3V0bGluZWQnIGNvbG9yPSdwcmltYXJ5JyBvbkNsaWNrPXt0b2dnbGVEcmF3ZXIoYW5jaG9yLCB0cnVlKX0gc3R5bGU9e3ttYXJnaW5SaWdodDonNXB4J319PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7YW5jaG9yfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIHtMb2dvdXRCdG59XHJcbiAgICAgICAgICAgICAgICAgICAgPERyYXdlciBvcGVuPXtzdGF0ZVthbmNob3JdfSBvbkNsb3NlPXt0b2dnbGVEcmF3ZXIoYW5jaG9yLCBmYWxzZSl9IHZhcmlhbnQ9J3BlcnNpc3RlbnQnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7U2lkZU1lbnVMaXN0KCB7Li4ucHJvcHMsIGFuY2hvciAsdG9nZ2xlRHJhd2VyICwgcHJvZmlsZX0gKX1cclxuICAgICAgICAgICAgICAgICAgICA8L0RyYXdlcj5cclxuICAgICAgICAgICAgICAgIDwvR3JpZD5cclxuICAgICAgICAgICAgPC9HcmlkPlxyXG4gICAgICAgICAgICA8RGl2aWRlci8+XHJcbiAgICAgICAgPC9HcmlkPlxyXG4gICAgICAgICAgICA8L1Rvb2xiYXI+XHJcbiAgICAgICAgPC9BcHBiYXI+XHJcbiAgICAgICAgPC9IaWRlT25TY2hyb2xsPlxyXG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQgdXNlU2Nyb2xsVHJpZ2dlciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvdXNlU2Nyb2xsVHJpZ2dlclwiO1xyXG5pbXBvcnQgU2xpZGUgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvU2xpZGUnO1xyXG5cclxuLy8gR05C7J2YIOyKrOudvOydtOuTnOq4sOuKpVxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIaWRlT25TY3JvbGwocHJvcHMpIHtcclxuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcclxuICBjb25zdCB0cmlnZ2VyID0gdXNlU2Nyb2xsVHJpZ2dlcigpO1xyXG4gIHJldHVybiAoXHJcbiAgICA8U2xpZGUgYXBwZWFyPXtmYWxzZX0gZGlyZWN0aW9uPVwiZG93blwiIGluPXshdHJpZ2dlcn0+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvU2xpZGU+XHJcbiAgKTtcclxufSIsIlxyXG5pbXBvcnQge0xpc3QsIExpc3RJdGVtVGV4dCwgTGlzdEl0ZW1BdmF0YXIgLCBEaXZpZGVyLCBMaXN0SXRlbSwgVHlwb2dyYXBoeSAsIEF2YXRhciwgSWNvbkJ1dHRvbiAsXHJcbiAgICAgTW9kYWwsIEJveCwgQnV0dG9uLFxyXG4gICAgIFBhcGVyLFxyXG4gICAgIFRleHRGaWVsZH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgU2lnbkluQnV0dG9uIGZyb20gJy4vU2lnbkluQnV0dG9uJztcclxuaW1wb3J0IGdvb2dsZVNpZ25pbkltYWdlIGZyb20gJy4uL2J1dHRvbkltYWdlL2dvb2dsZVNpZ25pbi5wbmcnO1xyXG5pbXBvcnQge3JlZGlyZWN0R29vZ2xlTG9naW59IGZyb20gJy4uL3V0aWwvTG9naW5BUEknO1xyXG5pbXBvcnQge0VkaXQsIEluZm8sIERlbGV0ZUZvcmV2ZXIsIFdhcm5pbmd9IGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucydcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBzYXZlRGF0YSB9IGZyb20gXCIuLi91dGlsL01hbmFnZW1lbnRBUElcIjtcclxuaW1wb3J0IHtHbG9iYWxTbmFja2JhckNvbnRleHR9IGZyb20gJy4uL2FwcCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHRoZW1lID0+ICh7XHJcbiAgICBsaXN0IDoge1xyXG4gICAgICAgIHdpZHRoIDogJzIzdncnLFxyXG4gICAgICAgIGhlaWdodDogJzEwMHZoJyxcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ3N0YXJ0JyxcclxuICAgICAgICBmbGV4RGlyZWN0aW9uIDogJ2NvbHVtbidcclxuICAgIH0sXHJcbiAgICBsaXN0SXRlbSA6IHtcclxuICAgICAgICB3aWR0aCA6ICcxMDAlJyxcclxuICAgIH0sXHJcbiAgICBsaXN0SXRlbVRleHQgOiB7XHJcbiAgICAgICAgdGV4dEFsaWduIDogJ2NlbnRlcicsXHJcbiAgICAgICAgY29sb3IgOiAnIzgzODI4MicsXHJcbiAgICAgICAgbWFyZ2luQm90dG9tIDogJzMwcHgnLFxyXG4gICAgfSxcclxuICAgIGxhcmdlQXZhdGFyIDoge1xyXG4gICAgICAgIHdpZHRoIDogdGhlbWUuc3BhY2luZyg5KSxcclxuICAgICAgICBoZWlnaHQgOiB0aGVtZS5zcGFjaW5nKDkpLFxyXG4gICAgfSxcclxuICAgIGlubGluZSA6IHtcclxuICAgICAgICBkaXNwbGF5IDogJ2lubGluZSdcclxuICAgIH0sXHJcbiAgICBsaXN0VGV4dCA6IHtcclxuICAgICAgICBjb2xvciA6ICcjODM4MjgyJyxcclxuICAgICAgICB0ZXh0QWxpZ246J2NlbnRlcidcclxuICAgIH0sXHJcbiAgICBtb2RhbCA6IHtcclxuICAgICAgICB0b3AgOiAnNTAlJyxcclxuICAgICAgICBsZWZ0IDogJzUwJScsXHJcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKC01MCUsIC01MCUpYCxcclxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICB3aWR0aDogNDAwLFxyXG4gICAgICAgIG1pbldpZHRoIDogNDAwLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxyXG4gICAgICAgIGJvcmRlcjogJzJweCBzb2xpZCAjMDAwJyxcclxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNV0sXHJcbiAgICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygyLCA0LCAzKSxcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGZsZXhEaXJlY3Rpb24gOiAnY29sdW1uJ1xyXG4gICAgfSxcclxuICAgIG1vZGFsUm93Qm94IDoge1xyXG4gICAgICAgIGRpc3BsYXkgOiAnZmxleCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbiA6ICdyb3cnLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25JdGVtcyA6ICdjZW50ZXInXHJcbiAgICB9LFxyXG4gICAgbW9kYWxDb2xCb3ggOiB7XHJcbiAgICAgICAgZGlzcGxheSA6ICdmbGV4JyxcclxuICAgICAgICBmbGV4RGlyZWN0aW9uIDogJ2NvbHVtbicsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQgOiAnY2VudGVyJyxcclxuICAgICAgICBhbGlnbkl0ZW1zIDogJ3N0YXJ0J1xyXG4gICAgfSxcclxuICAgIGJ1dHRvbiA6IHtcclxuICAgICAgICBmb250V2VpZ2h0Oidib2xkZXInXHJcbiAgICB9XHJcbn0pKVxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNZW51TGlzdCAoe2FuY2hvciAsIHRvZ2dsZURyYXdlciwgcHJvZmlsZX0pIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuICAgIGNvbnN0IGhhbmRsZUdsb2JhbFNuYWNrYmFyID0gUmVhY3QudXNlQ29udGV4dChHbG9iYWxTbmFja2JhckNvbnRleHQpO1xyXG4gICAgY29uc3QgW2VtYWlsSW5wdXQsIHNldEVtYWlsSW5wdXRdID0gUmVhY3QudXNlU3RhdGUoJycpO1xyXG4gICAgZnVuY3Rpb24gaGFuZGxlT25DbGlja0xvZ2luICgpIHtcclxuICAgICAgICByZWRpcmVjdEdvb2dsZUxvZ2luKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVPbkNsaWNrTW9kYWwgPSAoKSA9PiBzZXRNb2RhbCh0cnVlKTtcclxuICAgIGNvbnN0IGhhbmRsZU9uQ2xvc2VNb2RhbCA9ICgpID0+IHNldE1vZGFsKGZhbHNlKTtcclxuICAgIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gKGUpID0+IHNldEVtYWlsSW5wdXQoZS50YXJnZXQudmFsdWUpO1xyXG4gICAgY29uc3QgaGFuZGxlT25TdWJtaXQgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGVtYWlsSW5wdXQgPT09IHByb2ZpbGUuZW1haWwpIHtcclxuICAgICAgICAgICAgc2F2ZURhdGEoe30sW10sW3t9XSkudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUdsb2JhbFNuYWNrYmFyKHtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuOnRydWUsIFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogZGF0YS5yZXN1bHQgPT09ICdzdWNjZXNzJyA/ICdzdWNjZXNzJyA6ICdlcnJvcidcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UobG9jYXRpb24ub3JpZ2luKTtcclxuICAgICAgICAgICAgICAgIH0sMTUwMCk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgKGVycik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaGFuZGxlR2xvYmFsU25hY2tiYXIoe1xyXG4gICAgICAgICAgICAgICAgb3Blbjp0cnVlLCBcclxuICAgICAgICAgICAgICAgIHJlc3VsdDonZXJyb3InXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IFttb2RhbCwgc2V0TW9kYWxdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgaXNMb2dnZWQgPSBwcm9maWxlPyBwcm9maWxlLm5hbWU/IHRydWUgOiBmYWxzZSA6IGZhbHNlO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5saXN0fVxyXG4gICAgICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIlxyXG4gICAgICAgIG9uQ2xpY2s9e3RvZ2dsZURyYXdlcihhbmNob3IsIGZhbHNlKX1cclxuICAgICAgICBvbktleURvd249e3RvZ2dsZURyYXdlcihhbmNob3IsIGZhbHNlKX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8TGlzdD5cclxuICAgICAgICAgICAgICAgIDxMaXN0SXRlbVRleHQgcHJpbWFyeT17aXNMb2dnZWQ/ICdQUk9GSUxFJyA6ICdMT0dJTiBNRU5VJ30gY2xhc3NOYW1lPXtjbGFzc2VzLmxpc3RJdGVtVGV4dH0+XHJcbiAgICAgICAgICAgICAgICA8L0xpc3RJdGVtVGV4dD5cclxuXHJcbiAgICAgICAgICAgIHtpc0xvZ2dlZD8gXHJcblxyXG4gICAgICAgICAgICAoPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgPExpc3RJdGVtIGFsaWduSXRlbXM9J2NlbnRlcicgY2xhc3NOYW1lPXtjbGFzc2VzLmxpc3RJdGVtfT5cclxuICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1BdmF0YXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxBdmF0YXIgc3JjPXtwcm9maWxlLnBpY3R1cmV9IGNsYXNzTmFtZT17Y2xhc3Nlcy5sYXJnZUF2YXRhcn0gYWx0PXtwcm9maWxlLm5hbWV9Lz5cclxuICAgICAgICAgICAgICAgICAgICA8L0xpc3RJdGVtQXZhdGFyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbVRleHQgcHJpbWFyeT17cHJvZmlsZS5uYW1lfSBjbGFzc05hbWU9e2NsYXNzZXMubGlzdFRleHR9PjwvTGlzdEl0ZW1UZXh0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxici8+XHJcbiAgICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxyXG4gICAgICAgICAgICAgICAgPERpdmlkZXIgdmFyaWFudD1cImluc2V0XCIgY29tcG9uZW50PVwibGlcIiAvPlxyXG4gICAgICAgICAgICAgICAgPExpc3RJdGVtIGNsYXNzTmFtZT17Y2xhc3Nlcy5saXN0SXRlbX0gZGl2aWRlcj5cclxuICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9J0VNQUlMIDogJyBzZWNvbmRhcnk9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjb21wb25lbnQ9J3NwYW4nIHZhcmlhbnQ9J2JvZHkyJyBjb2xvcj0ndGV4dFByaW1hcnknIGNsYXNzTmFtZT17Y2xhc3Nlcy5pbmxpbmV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9maWxlLmVtYWlsfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1UZXh0PlxyXG4gICAgICAgICAgICAgICAgPC9MaXN0SXRlbT5cclxuICAgICAgICAgICAgICAgIDxMaXN0SXRlbSBjbGFzc05hbWU9e2NsYXNzZXMubGlzdEl0ZW19IGRpdmlkZXIvPlxyXG4gICAgICAgICAgICAgICAgPExpc3RJdGVtIGNsYXNzTmFtZT17Y2xhc3Nlcy5saXN0SXRlbX0gZGl2aWRlcj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5mbyBjb2xvcj0ncHJpbWFyeScgc3R5bGU9e3ttYXJnaW5SaWdodDonMXZ3J319Lz5cclxuICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHNlY29uZGFyeT0nRURJVCBIRUFERVJTJy8+XHJcbiAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89Jy9oZWFkZXJzJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb25CdXR0b24gZWRnZT0nZW5kJyBhcmlhLWxhYmVsPSdlZGl0LWhlYWRlcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RWRpdCBjb2xvcj0ncHJpbWFyeScgZm9udFNpemU9J2xhcmdlJy8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxyXG4gICAgICAgICAgICAgICAgPExpc3RJdGVtIGNsYXNzTmFtZT17Y2xhc3Nlcy5saXN0SXRlbX0gZGl2aWRlci8+XHJcbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW0gY2xhc3NOYW1lPXtjbGFzc2VzLmxpc3RJdGVtfSBkaXZpZGVyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxXYXJuaW5nIGNvbG9yPSdzZWNvbmRhcnknIHN0eWxlPXt7bWFyZ2luUmlnaHQ6JzF2dyd9fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dCBzZWNvbmRhcnk9J1JFTU9WRSBBTEwgREFUQScvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIGVkZ2U9J2VuZCcgYXJpYS1sYWJlbD0nZWRpdC1oZWFkZXInIG9uQ2xpY2s9e2hhbmRsZU9uQ2xpY2tNb2RhbH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxEZWxldGVGb3JldmVyIGNvbG9yPSdzZWNvbmRhcnknIGZvbnRTaXplPSdsYXJnZScvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW0+XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHsvKiDrqqjri6wgKi99XHJcbiAgICAgICAgICAgICAgICA8TW9kYWxcclxuICAgICAgICAgICAgICAgIG9wZW49e21vZGFsfVxyXG4gICAgICAgICAgICAgICAgb25DbG9zZT17aGFuZGxlT25DbG9zZU1vZGFsfVxyXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwibW9kYWwtdGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cIm1vZGFsLWNvbnRlbnRzXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8UGFwZXIgY2xhc3NOYW1lPXtjbGFzc2VzLm1vZGFsfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBjbGFzc05hbWU9e2NsYXNzZXMubW9kYWxSb3dCb3h9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25CdXR0b24gZWRnZT0nc3RhcnQnIGFyaWEtbGFiZWw9J2VkaXQtaGVhZGVyJyBkaXNhYmxlZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGVsZXRlRm9yZXZlciBjb2xvcj0nc2Vjb25kYXJ5JyBmb250U2l6ZT0nbGFyZ2UnLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGlkPVwibW9kYWwtdGl0bGVcIiB2YXJpYW50PSdidXR0b24nIGRpc3BsYXk9J2Jsb2NrJyBzdHlsZT17e2ZvbnRXZWlnaHQ6J2JvbGRlcid9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2F1dGlvbiA6IHBlcm1hbmVudCBkZWxldGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBjbGFzc05hbWU9e2NsYXNzZXMubW9kYWxDb2xCb3h9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgaWQ9XCJtb2RhbC1jb250ZW50c1wiIHZhcmlhbnQ9J2JvZHkxJyBzdHlsZT17e2ZvbnRXZWlnaHQ6J2JvbGQnfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2BBbGwgZGF0YSB3aWxsIGJlIGRlbGV0ZWQgYW5kIGNhbm5vdCBiZSByZWNvdmVyZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxlYXNlIGVudGVyIHlvdXIgZW1haWwgY29ycmVjdGx5IHRvIGNvbnRpbnVlLmB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSdjYXB0aW9uJz57cHJvZmlsZS5lbWFpbH08L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5tb2RhbFJvd0JveH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkIGxhYmVsPSdFLU1BSUwnIG9uQ2hhbmdlPXtoYW5kbGVJbnB1dENoYW5nZX0+PC9UZXh0RmllbGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259IHZhcmlhbnQ9J2NvbnRhaW5lZCcgY29sb3I9J3NlY29uZGFyeScgc2l6ZT0nbGFyZ2UnIG9uQ2xpY2s9e2hhbmRsZU9uU3VibWl0fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgICAgICAgICAgICA8L1BhcGVyPlxyXG4gICAgICAgICAgICAgICAgPC9Nb2RhbD5cclxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pXHJcbiAgICAgICAgICAgICAgICA6IFxyXG4gICAgICAgICAgICAoPExpc3RJdGVtIGJ1dHRvbiBjbGFzc05hbWU9e2NsYXNzZXMubGlzdEl0ZW19IG9uQ2xpY2s9e2hhbmRsZU9uQ2xpY2tMb2dpbn0+XHJcbiAgICAgICAgICAgICAgICA8U2lnbkluQnV0dG9uIHNpZ25Jbj17Z29vZ2xlU2lnbmluSW1hZ2V9Lz5cclxuICAgICAgICAgICAgPC9MaXN0SXRlbT4pfVxyXG4gICAgICAgICAgPC9MaXN0PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5cclxuTWVudUxpc3QucHJvcFR5cGVzID0ge1xyXG4gICAgYW5jaG9yIDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gICAgdG9nZ2xlRHJhd2VyIDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIHByb2ZpbGUgOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcclxufSIsImltcG9ydCB7IG1ha2VTdHlsZXMsQm94IH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcblxyXG5jb25zdCB1c2VTdHlsZSA9IG1ha2VTdHlsZXModGhlbWUgPT4gKHtcclxuICAgIGJ1dHRvbiA6IHtcclxuICAgICAgICB3aWR0aCA6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQgOiAnMTAwJScsXHJcbiAgICB9XHJcbn0pKVxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWduSW5CdXR0b24gKHByb3BzKSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGUoKTtcclxuICAgIGNvbnN0IHtzaWduSW59ID0gcHJvcHM7IC8vIOydtOuvuOyngFxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEJveCBjb21wb25lbnQ9J3NwYW4nPlxyXG4gICAgICAgICAgICA8aW1nIHNyYz17c2lnbklufSBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9ufT48L2ltZz5cclxuICAgICAgICA8L0JveD5cclxuICAgIClcclxufSIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJnb29nbGVTaWduaW4uMWNlMWFhYTVhMTI3ZmEzZTQ5MmExMmJiNjJmOTkzMDQucG5nXCI7IiwiaW1wb3J0IEV4aXRUb0FwcEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0V4aXRUb0FwcCc7XHJcbmltcG9ydCB7IExpc3RJdGVtICwgSWNvbkJ1dHRvbiwgVG9vbHRpcH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMsIHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSdcclxuaW1wb3J0IHt1c2VDb29raWVzfSBmcm9tICdyZWFjdC1jb29raWUnO1xyXG5cclxuY29uc3QgdXNlU3R5bGUgPSBtYWtlU3R5bGVzKHRoZW1lID0+ICh7XHJcbiAgICBsb2dvdXQgOiB7XHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6J2ZsZXgtZW5kJyxcclxuICAgICAgICBwYWRkaW5nIDogJzJweCcsXHJcbiAgICAgICAgbWFyZ2luIDogMCxcclxuICAgICAgICB3aWR0aCA6ICdhdXRvJyxcclxuICAgIH1cclxufSkpXHJcbmNvbnN0IExpZ2h0VG9vbHRpcCA9IHdpdGhTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgdG9vbHRpcDoge1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxyXG4gICAgICBjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxyXG4gICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMl0sXHJcbiAgICAgIGZvbnRTaXplOiAxNCxcclxuICAgICAgZm9udFdlaWdodDonYm9sZCdcclxuICAgIH0sXHJcbiAgfSkpKFRvb2x0aXApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlKCk7XHJcbiAgICBjb25zdCBbIGNvb2tpZXMgLCBzZXRDb29raWUgLCByZW1vdmVDb29raWUgXSA9IHVzZUNvb2tpZXMgKFsncHJvZmlsZScsJ3VzZXInXSk7XHJcbiAgICBjb25zdCBoYW5kbGVMb2dvdXQgPSAoKSA9PiB7ICAgIC8vIOuqqOuToCDsv6DtgqQg7IKt7KCc7JmAIHByb2ZpbGXsoJzqsbBcclxuICAgICAgICByZW1vdmVDb29raWUoJ3Byb2ZpbGUnKTtcclxuICAgICAgICByZW1vdmVDb29raWUoJ3VzZXInKTtcclxuICAgICAgICBsb2NhdGlvbi5ocmVmID0gbG9jYXRpb24ub3JpZ2luO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgIDxMaXN0SXRlbSBjbGFzc05hbWU9e2NsYXNzZXMubG9nb3V0fT5cclxuICAgICAgICAgICAgICAgIDxMaWdodFRvb2x0aXAgdGl0bGU9J0xvZy1vdXQnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIHN0eWxlPXt7cGFkZGluZzo0fX0gb25DbGljaz17aGFuZGxlTG9nb3V0fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEV4aXRUb0FwcEljb24vPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvTGlnaHRUb29sdGlwPiAgICBcclxuICAgICAgICAgICAgPC9MaXN0SXRlbT5cclxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgKVxyXG59IiwiXHJcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuLi9jdXN0b21Ib29rL0xvYWRpbmdcIjtcclxuaW1wb3J0IHsgQm94LCBQYXBlciwgVHlwb2dyYXBoeSwgVGV4dEZpZWxkLCBBdmF0YXIsVG9vbHRpcCxJY29uQnV0dG9uIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCBDdXN0b21TbmFja2JhciBmcm9tIFwiLi4vY3VzdG9tSG9vay9TbmFja0JhclwiO1xyXG5pbXBvcnQgdXNlT25GaXJzdFJlbmRlciBmcm9tIFwiLi4vY3VzdG9tSG9vay91c2VPbkZpcnN0UmVuZGVyXCI7XHJcbmltcG9ydCB7IGdldEd1ZXN0Ym9va0xpc3QgLCBwb3N0R3Vlc3Rib29rLCBkZWxldGVHdWVzdGJvb2t9IGZyb20gJy4uL3V0aWwvR3Vlc3Rib29rQVBJJztcclxuaW1wb3J0IERlbGV0ZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0RlbGV0ZSc7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHRoZW1lID0+ICh7XHJcbiAgICBjb250YWluZXIgOiB7XHJcbiAgICAgICAgd2lkdGggOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0IDogJzEyMHZoJyxcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25JdGVtcyA6ICdjZW50ZXInLFxyXG4gICAgICAgIGZsZXhEaXJlY3Rpb24gOiAnY29sdW1uJyxcclxuICAgICAgICBjb2xvcjond2hpdGUnLFxyXG4gICAgfSxcclxuICAgIHBhcGVyIDoge1xyXG4gICAgICAgIHdpZHRoIDogJzc1dncnLFxyXG4gICAgICAgIGhlaWdodCA6ICc4NXZoJyxcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbiA6ICdjb2x1bW4nLFxyXG4gICAgICAgIGFsaWduSXRlbXMgOiAnY2VudGVyJyxcclxuICAgIH0sXHJcbiAgICBiYWNrTG9nbyA6IHtcclxuICAgICAgICBjb2xvciA6ICd3aGl0ZScsXHJcbiAgICAgICAgZm9udFdlaWdodDonYm9sZGVyJyxcclxuICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxyXG4gICAgICAgIGRpc3BsYXkgOiAnZmxleCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbiA6ICdjb2x1bW4nLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25JdGVtcyA6ICdjZW50ZXInLFxyXG4gICAgICAgIHpJbmRleCA6IDEsXHJcbiAgICAgICAgb3BhY2l0eTowLjNcclxuICAgIH0sXHJcbiAgICBjaGF0Q29udGFpbmVyIDoge1xyXG4gICAgICAgIGhlaWdodCA6ICc4MCUnLFxyXG4gICAgICAgIHdpZHRoIDogJzEwMCUnLFxyXG4gICAgICAgIHBhZGRpbmcgOiAnMC41dncgNXZ3JyxcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ2ZsZXgtc3RhcnQnLFxyXG4gICAgICAgIGFsaWduSXRlbXMgOiAnZmxleC1zdGFydCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbiA6ICdjb2x1bW4nLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvciA6ICcjZDBkMGQwJyxcclxuICAgICAgICBvdmVyZmxvd1kgOiAnc2Nyb2xsJyxcclxuICAgICAgICBvdmVyZmxvd1ggOiAnaGlkZGVuJ1xyXG4gICAgfSxcclxuICAgIGlucHV0Qm94IDoge1xyXG4gICAgICAgIHdpZHRoIDogJzQwdncnLFxyXG4gICAgICAgIG1hcmdpblRvcDonNXZoJ1xyXG4gICAgfSxcclxuICAgIGJ1YmJsZSA6IHtcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGZsZXhEaXJlY3Rpb24gOiAnY29sdW1uJyxcclxuICAgICAgICBjb2xvciA6ICd3aGl0ZScsXHJcbiAgICAgICAgYm9yZGVyIDogJ3RoaWNrICM4YThhOGEnLFxyXG4gICAgICAgIGJvcmRlclJhZGl1cyA6ICcxNXB4JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgOiAnIzhlOGU4ZScsXHJcbiAgICAgICAgcGFkZGluZyA6ICc1cHggMTJweCcsXHJcbiAgICAgICAgbWFyZ2luIDogJzBweCA2cHgnLFxyXG4gICAgICAgIG1heFdpZHRoOiAnNjB2dycsXHJcbiAgICAgICAgb3ZlcmZsb3c6J2hpZGRlbidcclxuICAgIH0sXHJcbiAgICBteUJ1YmJsZSA6IHtcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGZsZXhEaXJlY3Rpb24gOiAnY29sdW1uJyxcclxuICAgICAgICBjb2xvciA6ICd3aGl0ZScsXHJcbiAgICAgICAgYm9yZGVyIDogJ3RoaWNrICM4YThhOGEnLFxyXG4gICAgICAgIGJvcmRlclJhZGl1cyA6ICcxNXB4JyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgOiAnIzc4OWZmZicsXHJcbiAgICAgICAgcGFkZGluZyA6ICc1cHggMTJweCcsXHJcbiAgICAgICAgbWFyZ2luIDogJzBweCA2cHgnLFxyXG4gICAgICAgIG1heFdpZHRoOiAnNjB2dycsXHJcbiAgICAgICAgb3ZlcmZsb3c6J2hpZGRlbidcclxuICAgIH0sXHJcbiAgICBjaGF0Qm94IDoge1xyXG4gICAgICAgIGRpc3BsYXkgOiAnZmxleCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbiA6ICdyb3cnLFxyXG4gICAgICAgIHBhZGRpbmcgOiAnMnB4JyxcclxuXHJcbiAgICB9LFxyXG4gICAgT3RoZXJBdmF0YXIgOiB7XHJcbiAgICAgICAgY29sb3IgOiAnI2ZmZicsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yIDogJ2JsYWNrJyxcclxuICAgIH0sXHJcbiAgICBteUF2YXRhciA6IHtcclxuICAgICAgICBjb2xvciA6ICcjZmZmJyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgOiAnIzI3NjRmZicsXHJcbiAgICB9XHJcbn0pKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEd1ZXN0Ym9vayh7aXNMb2FkaW5nfSkge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gICAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcclxuICAgIGNvbnN0IFtzbmFjaywgc2V0U25hY2tdID0gUmVhY3QudXNlU3RhdGUoe29wZW46ZmFsc2V9KTtcclxuICAgIGNvbnN0IFt0b29GYXN0U25hY2ssIHNldFRvb0Zhc3RTbmFja10gPSBSZWFjdC51c2VTdGF0ZSh7b3BlbjpmYWxzZX0pO1xyXG4gICAgY29uc3QgW2RlbGV0ZWRTbmFjaywgc2V0RGVsZXRlZFNuYWNrXSA9IFJlYWN0LnVzZVN0YXRlKHtvcGVuOmZhbHNlfSk7XHJcbiAgICBjb25zdCBbZXJyb3JTbmFjaywgc2V0RXJyb3JTbmFja10gPSBSZWFjdC51c2VTdGF0ZSh7b3BlbjpmYWxzZX0pO1xyXG4gICAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XHJcbiAgICAgICAgaW5wdXQgOiAnJyxcclxuICAgICAgICBjaGF0TG9ncyA6IFtdXHJcbiAgICB9KVxyXG4gICAgY29uc3QgbG9nUmVmID0gUmVhY3QudXNlUmVmKCk7XHJcbiAgICBjb25zdCBjaGF0Q29udGFpbmVyUmVmID0gUmVhY3QudXNlUmVmKCk7XHJcbiAgICBjb25zdCB0cmFuc3BvcnRhYmxlUmVmID0gUmVhY3QudXNlUmVmKHRydWUpO1xyXG5cclxuICAgIGNvbnN0IGdldExpc3QgPSAoKSA9PiB7XHJcbiAgICAgICAgZ2V0R3Vlc3Rib29rTGlzdCgpLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzdWx0LmRhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0ID0gWy4uLnJlc3VsdC5kYXRhXTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobGlzdCk7XHJcbiAgICAgICAgICAgIGxvZ1JlZi5jdXJyZW50ID0gWy4uLmxpc3RdO1xyXG4gICAgICAgICAgICBzZXRTdGF0ZSh7Li4uc3RhdGUsIGNoYXRMb2dzIDogWy4uLmxpc3RdfSk7XHJcbiAgICAgICAgfSkuY2F0Y2goZXJyPT57XHJcbiAgICAgICAgICAgIHNldEVycm9yU25hY2soe29wZW4gOiB0cnVlfSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zdHJ1Y3RvclxyXG4gICAgdXNlT25GaXJzdFJlbmRlcigoKT0+e1xyXG4gICAgICAgIGdldExpc3QoKTtcclxuICAgIH0pXHJcbiAgICBcclxuICAgIGNvbnN0IGhhbmRsZU9uRGVsZXRlQ2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlkID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaWQ7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOyCreygnOyalOyyrSBJRCA6ICR7aWR9YCk7ICAgIC8vIGRi7J2YIF9pZOqwkuycvOuhnCDsgq3soJzsmpTssq3tlZjquLBcclxuICAgICAgICBkZWxldGVHdWVzdGJvb2soaWQpLnRoZW4ocmVzdWx0PT57XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0ID09PSAnZGVsZXRlZCcpIHNldFRpbWVvdXQoc2V0RGVsZXRlZFNuYWNrKHtvcGVuOnRydWV9KSwzMDAwKTtcclxuICAgICAgICAgICAgZ2V0TGlzdCgpO1xyXG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgIHNldEVycm9yU25hY2soe29wZW4gOiB0cnVlfSk7XHJcbiAgICAgICAgICAgIGdldExpc3QoKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgY29uc3Qgb25JbnB1dENoYW5nZSA9IChlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoIDwgMTIwKSB7XHJcbiAgICAgICAgICAgIHNldFN0YXRlKHsuLi5zdGF0ZSwgaW5wdXQgOiB2YWx1ZX0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUubGVuZ3RoID49IDk1KSB7XHJcbiAgICAgICAgICAgIHNldFNuYWNrKHtvcGVuOnRydWV9KVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBlbnRlcktleUhhbmRsZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDEzKSB7IC8vIGVudGVyIHByZXNzZWRcclxuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50PyBpbnB1dFJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZXNzYWdlJykgOiAnJztcclxuICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgY2hhdENvbnRhaW5lclJlZi5jdXJyZW50LnNjcm9sbFRvKDAsY2hhdENvbnRhaW5lclJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwb3N0IEFQSSAmIGdldCBBUElcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNwb3J0YWJsZVJlZi5jdXJyZW50ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUb29GYXN0U25hY2soe29wZW46dHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdEd1ZXN0Ym9vayhpbnB1dC52YWx1ZSkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydGFibGVSZWYuY3VycmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTUwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydGFibGVSZWYuY3VycmVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNuYWNrKHtvcGVuOnRydWUgLCBzdGF0dXM6J3N1Y2Nlc3MnfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAwIHx8IGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U25hY2soe29wZW46dHJ1ZSAsIHN0YXR1czonZXJyb3InfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpPT57XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlbnRlcktleUhhbmRsZXIpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicgLCBlbnRlcktleUhhbmRsZXIpO1xyXG4gICAgfSxbXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgPExvYWRpbmcgaXNMb2FkaW5nPXtpc0xvYWRpbmd9Lz5cclxuICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250YWluZXJ9PlxyXG4gICAgICAgIDxQYXBlciBjbGFzc05hbWU9e2NsYXNzZXMucGFwZXJ9IGVsZXZhdGlvbj17NX0+XHJcbiAgICAgICAgICAgIDxCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLmNoYXRDb250YWluZXJ9IHJlZj17Y2hhdENvbnRhaW5lclJlZn0+XHJcbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSdoMycgY29sb3I9J3RleHRQcmltYXJ5JyBjbGFzc05hbWU9e2NsYXNzZXMuYmFja0xvZ299PlxyXG4gICAgICAgICAgICAgICAgICAgIFBSRVBBUklOR1xyXG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUuY2hhdExvZ3MubWFwKChhcnRpY2xlLGluZGV4KT0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnRpY2xlLm93biA/IC8vIOyEnOuyhOyXkOyEnCDtmZXsnbjrkJwg67O47J246rKM7Iuc66y87J28IOqyveyasCAgKOyEnOuyhOy4oSDtmZXsnbjtlYTsmpQg7IiY7KCV7ZuEIOyjvOyEnSDsp4DsmrDquLAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDrgrTqsIAg66eQ7ZaI7J2EIOqyveyasCDsmKTrpbjsqr0g7KCV66CsLCBwcm9maWxl7J2YIOydtOumhOqzvCDruYTqtZAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBpbnRlcmFjdGl2ZSBwbGFjZW1lbnQ9J3JpZ2h0JyBrZXk9e2luZGV4fSB0aXRsZT17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZU9uRGVsZXRlQ2xpY2t9IGNvbG9yPSdwcmltYXJ5JyBzaXplPSdzbWFsbCcgZGF0YS1pZD17YXJ0aWNsZS5faWR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERlbGV0ZUljb24vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBjbGFzc05hbWU9e2NsYXNzZXMuY2hhdEJveH0gc3R5bGU9e3thbGlnblNlbGY6J2ZsZXgtZW5kJ319PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlciBjbGFzc05hbWU9e2NsYXNzZXMubXlCdWJibGV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J2NhcHRpb24nIHN0eWxlPXt7Zm9udFNpemU6JzAuNXJlbScsIGxpbmVIZWlnaHQ6JzAuOCd9fT57YXJ0aWNsZS5kYXRlfTwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2FydGljbGUuY29udGVudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1BhcGVyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBdmF0YXIgY2xhc3NOYW1lPXtjbGFzc2VzLm15QXZhdGFyfSBzcmM9e2FydGljbGUucGljdHVyZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkgICAvLyBlbmQgb2Yg67O47J246rKM7Iuc66y8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g64uk66W47IKs656M65Ok7J20IOunkO2VnCDqsbQg7Jm87Kq9IOygleugrFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLmNoYXRCb3h9IGtleT17aW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEF2YXRhciBjbGFzc05hbWU9e2NsYXNzZXMuT3RoZXJBdmF0YXJ9IHNyYz17YXJ0aWNsZS5waWN0dXJlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFwZXIgY2xhc3NOYW1lPXtjbGFzc2VzLmJ1YmJsZX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSdjYXB0aW9uJyBzdHlsZT17e2ZvbnRTaXplOicwLjVyZW0nLCBsaW5lSGVpZ2h0OicwLjgnfX0+e2FydGljbGUuZGF0ZX08L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2FydGljbGUuY29udGVudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUGFwZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICAgIDxCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLmlucHV0Qm94fT5cclxuICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcclxuICAgICAgICAgICAgICAgIGlkPVwibWVzc2FnZVwiXHJcbiAgICAgICAgICAgICAgICBzaXplPSdtZWRpdW0nXHJcbiAgICAgICAgICAgICAgICBsYWJlbD1cIm1lc3NhZ2VcIlxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luOiA4IH19XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17c3RhdGUuaW5wdXR9XHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25JbnB1dENoYW5nZX1cclxuICAgICAgICAgICAgICAgIGF1dG9Gb2N1c1xyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBhIG1lc3NhZ2VcIlxyXG4gICAgICAgICAgICAgICAgZnVsbFdpZHRoXHJcbiAgICAgICAgICAgICAgICByZWY9e3YgPT4gaW5wdXRSZWYuY3VycmVudCA9IHZ9XHJcbiAgICAgICAgICAgICAgICBtYXJnaW49XCJub3JtYWxcIlxyXG4gICAgICAgICAgICAgICAgSW5wdXRMYWJlbFByb3BzPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hyaW5rOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lZFwiXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L0JveD5cclxuICAgICAgICA8L1BhcGVyPlxyXG4gICAgICAgIDwvQm94PlxyXG4gICAgICAgIDxDdXN0b21TbmFja2JhciBvcGVuPXtzbmFjay5vcGVufSBvbkNsb3NlPXsoKT0+c2V0U25hY2soe29wZW46ZmFsc2V9KX1cclxuICAgICAgICBjb250ZW50PXtzbmFjay5zdGF0dXMgPT09ICdzdWNjZXNzJz8gJ1NVQ0NFU1MnIDogc25hY2suc3RhdHVzID09PSAnZXJyb3InPyAnRkFJTEVEIDogTE9HSU4gRklSU1QnIDogJ21heCBsZW5ndGggOiAxMjAnfSBcclxuICAgICAgICBzdGF0dXM9e3NuYWNrLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnPyAnc3VjY2VzcycgOiAnZXJyb3InfSAvPlxyXG4gICAgICAgIDxDdXN0b21TbmFja2JhciBvcGVuPXt0b29GYXN0U25hY2sub3Blbn0gb25DbG9zZT17KCk9PnNldFRvb0Zhc3RTbmFjayh7b3BlbjpmYWxzZX0pfVxyXG4gICAgICAgIGNvbnRlbnQ9J0ZBSUxFRCA6IHNvcnJ5IFRPTyBGQVNUICwgSW50ZXJ2YWwgOiAxNXMnIHN0YXR1cz0nZXJyb3InIC8+XHJcbiAgICAgICAgPEN1c3RvbVNuYWNrYmFyIG9wZW49e2RlbGV0ZWRTbmFjay5vcGVufSBvbkNsb3NlPXsoKT0+c2V0RGVsZXRlZFNuYWNrKHtvcGVuOmZhbHNlfSl9XHJcbiAgICAgICAgY29udGVudD0nRGVsZXRlZCcgc3RhdHVzPSdzdWNjZXNzJyAvPlxyXG4gICAgICAgIDxDdXN0b21TbmFja2JhciBvcGVuPXtlcnJvclNuYWNrLm9wZW59IG9uQ2xvc2U9eygpPT5zZXRFcnJvclNuYWNrKHtvcGVuOmZhbHNlfSl9XHJcbiAgICAgICAgY29udGVudD17YEVycm9yICEgYH0gc3RhdHVzPSdlcnJvcicgLz5cclxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgKVxyXG59XHJcblxyXG5HdWVzdGJvb2sucHJvcFR5cGVzID0ge1xyXG4gICAgaXNMb2FkaW5nIDogUHJvcFR5cGVzLmJvb2xcclxufSIsImltcG9ydCB7dXNlQ29va2llc30gZnJvbSAncmVhY3QtY29va2llJztcclxuaW1wb3J0IE1hdGVyaWFsVGFibGUgZnJvbSAnbWF0ZXJpYWwtdGFibGUnO1xyXG5pbXBvcnQgTWFudWFsRGlhbG9nIGZyb20gXCIuL01hbnVhbERpYWxvZ1wiO1xyXG5pbXBvcnQgeyBvcHRpb25zLGxvY2FsaXphdGlvbiB9IGZyb20gXCIuL1RhYmxlT3B0aW9uc1wiO1xyXG5pbXBvcnQgdXNlT25GaXJzdFJlbmRlciBmcm9tICcuLi9jdXN0b21Ib29rL3VzZU9uRmlyc3RSZW5kZXInO1xyXG5pbXBvcnQgeyBnZXRNYW5hZ2VtZW50VGFibGUgfSBmcm9tIFwiLi4vdXRpbC9NYW5hZ2VtZW50QVBJXCI7XHJcbmltcG9ydCBEZWZhdWx0UGFnZSBmcm9tICcuL0RlZmF1bHRQYWdlJztcclxuaW1wb3J0IHBhcnNlRGF0YSBmcm9tICcuLi91dGlsL3BhcnNlRGF0YSc7XHJcbmltcG9ydCBTYXZlQnV0dG9uIGZyb20gJy4vU2F2ZUJ1dHRvbic7XHJcbmltcG9ydCB7IHNhdmVEYXRhIH0gZnJvbSBcIi4uL3V0aWwvTWFuYWdlbWVudEFQSVwiO1xyXG5pbXBvcnQgQ3VzdG9tU25hY2tiYXIgZnJvbSAnLi4vY3VzdG9tSG9vay9TbmFja0Jhcic7XHJcbmltcG9ydCB7IEJveCB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xyXG5pbXBvcnQgeyBQcm9ncmVzc0NvbnRleHQgfSBmcm9tIFwiLi4vYXBwXCI7XHJcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuLi9jdXN0b21Ib29rL0xvYWRpbmdcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuLy8gdXNlRWZmZWN066GcIGRhdGEsIGNvbHVtbnMg6rCAIOuzgOqyveuQoCDrlYzrp4jri6Qg7ISc67KE7JeQIOyggOyepSDtm4Qg6rCx7IugXHJcbi8vIC4vdXRpbCDqsr3roZzsl5Ag66Gc7KeBIOyekeyEsVxyXG4vLyDthrXsi6Dsl5Ag64yA7ZWcIHRlc3Rjb2Rl7J6R7ISxXHJcbi8vIGNvbHVtbnPsmYAgZGF0YeydmCDqsIEg6rCS65Ok7JeQIOuMgO2VnCDrrLTqsrDshLEg7LK07YGsXHJcbi8vIHByb3BzVHlwZSDsnpHshLFcclxuLy8gU2lkZU1lbnVMaXN0ID0+IExvZ2lu7Jy866GcIOuzgOqyvSwg67mE66Gc6re47J24IOyLnCBMT0dJTuycvOuhnCDrs7Tsnbwg6rKDLCDroZzqt7jsnbjsi5wgTVkgTUVOVeuhnCDrs7TquLBcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYW5hZ2VtZW50VGFibGUoe2lzTG9hZGluZ30pIHtcclxuXHJcbiAgY29uc3QgaGFuZGxlUHJvZ3Jlc3MgPSBSZWFjdC51c2VDb250ZXh0KFByb2dyZXNzQ29udGV4dCk7XHJcbiAgY29uc3QgWyBjb29raWVzICwgc2V0Q29va2llICwgcmVtb3ZlQ29va2llIF0gPSB1c2VDb29raWVzIChbJ3Byb2ZpbGUnXSk7XHJcbiAgLy8gc3RhdGVzXHJcbiAgY29uc3QgW3NuYWNrLCBzZXRTbmFja10gPSBSZWFjdC51c2VTdGF0ZSh7b3BlbiA6IGZhbHNlfSk7XHJcbiAgY29uc3QgW3NhdmVkU25hY2sgLCBzZXRTYXZlZFNuYWNrXSA9IFJlYWN0LnVzZVN0YXRlKHtvcGVuOmZhbHNlfSk7XHJcbiAgY29uc3QgW2Vycm9yU25hY2sgLCBzZXRFcnJvclNuYWNrXSA9IFJlYWN0LnVzZVN0YXRlKHtvcGVuOmZhbHNlfSk7XHJcbiAgY29uc3QgW2RpYWxvZywgc2V0RGlhbG9nXSA9IFJlYWN0LnVzZVN0YXRlKHtvcGVuIDogZmFsc2V9KTtcclxuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHsgIC8vIOy1nOy0iCBBUEnroZwg67Cb7JWE7Jik64qUIOuPmeyeke2VhOyalFxyXG4gICAgZGVmYXVsdFBhZ2UgOiB0cnVlLFxyXG4gICAgaGFzVGFibGUgOiBmYWxzZSxcclxuICAgIGNvbHVtbnM6IFtdLFxyXG4gICAgZGF0YTogW10sXHJcbiAgfSk7XHJcbiAgY29uc3QgdGFibGVSZWYgPSBSZWFjdC51c2VSZWYoKTtcclxuXHJcbiAgLy8gY29uc3RydWN0b3JcclxuICB1c2VPbkZpcnN0UmVuZGVyKCgpPT57XHJcbiAgICAgIGdldE1hbmFnZW1lbnRUYWJsZSgpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBzdGF0dXMgOiAke3Jlc3BvbnNlLnN0YXR1c30gLCBkYXRhIDogJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKX1gKTtcclxuICAgICAgICAgIC8vIOycoOyggCDtmZXsnbjrkJDqs6Ag7YWM7J2067iU64+EIOu5hOyWtOyeiOyngCDslYrsnYQg6rK97JqwXHJcbiAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzPT09MjAwICYmIHJlc3BvbnNlLmRhdGEuaGVhZGVycykge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57c2V0U25hY2soe29wZW46dHJ1ZX0pfSw0MDApO1xyXG4gICAgICAgICAgICBzZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgY29sdW1ucyA6IHBhcnNlRGF0YShyZXNwb25zZS5kYXRhLmhlYWRlcnMgLCByZXNwb25zZS5kYXRhLmdyb3VwaW5ncyksXHJcbiAgICAgICAgICAgICAgZGF0YSA6IHJlc3BvbnNlLmRhdGEuZGF0YSxcclxuICAgICAgICAgICAgICBkZWZhdWx0UGFnZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGhhc1RhYmxlIDogdHJ1ZX0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgc2V0RXJyb3JTbmFjayh7b3Blbjp0cnVlfSk7XHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyBldmVudHNcclxuICBjb25zdCBoYW5kbGVEaWFsb2dDbG9zZSA9ICgpID0+IHtzZXREaWFsb2coe29wZW4gOiBmYWxzZX0pO307XHJcbiAgY29uc3QgaGFuZGxlT25TYXZlID0gKGlzQXV0b1NhdmUpID0+IHtcclxuICAgICAgLy8gdGFibGVSZWYuY3VycmVudC5kYXRhTWFuYWdlciDsnZggcmVm7JeQ7IScIOyLoOuisOuPhOyeiOuKlCDrjbDsnbTthLAg7LC47KGwXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBbXTtcclxuICAgICAgY29uc3QgZ3JvdXBpbmdzID0gW107XHJcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB0YWJsZVJlZi5jdXJyZW50LmRhdGFNYW5hZ2VyLmNvbHVtbnMucmVkdWNlKChvYmosdixpKT0+e1xyXG4gICAgICAgIG9ialtgaGVhZGVyJHtpfWBdID0gdi50aXRsZTtcclxuICAgICAgICBncm91cGluZ3MucHVzaCh2Lmdyb3VwaW5nKTtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICB9LHt9KVxyXG4gICAgICB0YWJsZVJlZi5jdXJyZW50LmRhdGFNYW5hZ2VyLmRhdGEuZm9yRWFjaCgodixpKT0+e1xyXG4gICAgICAgIGNvbnN0IHt0YWJsZURhdGEsIC4uLnJlc3R9ID0gdjtcclxuICAgICAgICBkYXRhLnB1c2gocmVzdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBzYXZlRGF0YShoZWFkZXJzLCBncm91cGluZ3MsIGRhdGEpLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgaWYoZXJyKSB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmKCFpc0F1dG9TYXZlKSBzZXRTYXZlZFNuYWNrKHtvcGVuOnRydWV9KTtcclxuICB9XHJcbiAgXHJcbiAgLy8gZWZmZWN0c1xyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7ICAgLy8gd2luZG93IOuNlOu4lO2BtOumrSDsnbTrsqTtirgg7LaU6rCALCDrj4Tsm4Drp5Agb3BlblxyXG4gICAgY29uc3Qgb25kYkNsaWNrID0gKCkgPT4gc2V0RGlhbG9nKHtvcGVuIDogIWRpYWxvZy5vcGVufSk7XHJcbiAgICBjb25zdCBvbktleWRvd24gPSAoZSkgPT4geyAgIC8vIGN0cmwgKyBz66GcIOyggOyepSBldmVudFxyXG4gICAgICBpZiAobmF2aWdhdG9yLnBsYXRmb3JtLm1hdGNoKFwiTWFjXCIpID8gZS5tZXRhS2V5IDogZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gODMpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgaGFuZGxlT25TYXZlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlkb3duKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIG9uZGJDbGljayk7XHJcbiAgcmV0dXJuICgpID0+IHtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgb25kYkNsaWNrKTtcclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleWRvd24pO1xyXG4gICAgICAvLyDstIjquLDsoJHqt7zsnZgg6rK97JqwIOuNsOydtO2EsOqwgCDsl4bslrQg7JeQ65+sIOuwnOyDne2VoCDsiJgg7J6I7Ja0IOyCvO2VreyLneycvOuhnCDtjJDri6gg7ZuEIOyWuOuniOyatO2KuOyLnOydmCBmZXRjaEFQSeyLpO2WiVxyXG4gICAgICB0YWJsZVJlZi5jdXJyZW50ID8gdGFibGVSZWYuY3VycmVudC5kYXRhTWFuYWdlciA/IGhhbmRsZU9uU2F2ZSh0cnVlKSA6IG51bGwgOiBudWxsO1xyXG4gICAgICB0YWJsZVJlZi5jdXJyZW50ID8gdGFibGVSZWYuY3VycmVudC5kYXRhTWFuYWdlciA/IGhhbmRsZVByb2dyZXNzKCdzdWNjZXNzJykgOiBudWxsIDogbnVsbDtcclxuICB9O1xyXG59LCBbXSk7XHJcblxyXG4vLyBjb21wb25lbnRzXHJcbiAgY29uc3QgTWFyZ2luID0gKCkgPT4gKDxCb3ggc3R5bGU9e3toZWlnaHQ6JzEwMHB4J319PjwvQm94Pik7ICAvLyDsl6zrsLFcclxuICByZXR1cm4gKFxyXG4gICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgPExvYWRpbmcgaXNMb2FkaW5nPXtpc0xvYWRpbmd9Lz5cclxuICAgIHtcclxuICAgIHN0YXRlLmRlZmF1bHRQYWdlID9cclxuICAgICAgKDxEZWZhdWx0UGFnZSBzdGF0ZT17c3RhdGV9IHNldFN0YXRlPXtzZXRTdGF0ZX0vPilcclxuICAgIDogXHJcbiAgICAoPEJveD5cclxuICAgICAgICA8TWFudWFsRGlhbG9nIG9wZW49e2RpYWxvZy5vcGVufSBvbkNsb3NlPXtoYW5kbGVEaWFsb2dDbG9zZX0vPlxyXG4gICAgPE1hcmdpbi8+XHJcbiAgICA8TWF0ZXJpYWxUYWJsZVxyXG4gICAgICB0YWJsZVJlZj17dGFibGVSZWZ9XHJcbiAgICAgIHRpdGxlPXtcclxuICAgICAgPFNhdmVCdXR0b24gc2V0U2F2ZWRTbmFjaz17c2V0U2F2ZWRTbmFja30gXHJcbiAgICAgIC8vIOuniOyatO2KuCDsnbTtm4Tsl5Ag7KCR6re87ZWE7JqUXHJcbiAgICAgIGRhdGFNYW5hZ2VyPXt0YWJsZVJlZi5jdXJyZW50ID8gdGFibGVSZWYuY3VycmVudC5kYXRhTWFuYWdlciA6IHt9fS8+XHJcbiAgICB9XHJcbiAgICAgIGNvbHVtbnM9e3N0YXRlLmNvbHVtbnN9XHJcbiAgICAgIGRhdGE9e3N0YXRlLmRhdGF9XHJcbiAgICAgIGxvY2FsaXphdGlvbj17bG9jYWxpemF0aW9ufSAvLyDroZzsu6zrnbzsnbTspohcclxuICAgICAgb3B0aW9ucz17b3B0aW9uc30gLy8g64K067O064K06riwLCDqt7jro6jtlZFcclxuICAgICAgYWN0aW9ucz17Wy8vIOupgO2LsCDshYDroInshZgg7J6R7JeFXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0b29sdGlwIDogJ1JlbW92ZSB0aGUgU2VsZWN0ZWQgcm93KHMpJyxcclxuICAgICAgICAgICAgaWNvbiA6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICBvbkNsaWNrIDogKGUgLCBkZWxldGlvbnMpID0+IHsgIC8vIOyEoO2Dne2VnCDssrTtgazrsJXsiqTsl5Ag64yA7ZW0IOuqqOuRkCDsgq3soJwg7KeE7ZaJXHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gWy4uLnN0YXRlLmRhdGFdO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRpb25zLmZvckVhY2godj0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3BsaWNlKGRhdGEuaW5kZXhPZih2KSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgc2V0U3RhdGUoKHByZXZEYXRhKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7Li4ucHJldkRhdGEgLCBkYXRhfTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBdfSBcclxuICAgICAgZWRpdGFibGU9e3tcclxuICAgICAgICBvblJvd0FkZDogKG5ld0RhdGEpID0+ICAvLyDstpTqsIBcclxuICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHNldFN0YXRlKChwcmV2U3RhdGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBbLi4ucHJldlN0YXRlLmRhdGFdO1xyXG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKG5ld0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ucHJldlN0YXRlLCBkYXRhIH07XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9LCA0MDApO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgb25Sb3dVcGRhdGU6IChuZXdEYXRhLCBvbGREYXRhKSA9PiAgLy8g7IiY7KCVXHJcbiAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICBpZiAob2xkRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgc2V0U3RhdGUoKHByZXZTdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gWy4uLnByZXZTdGF0ZS5kYXRhXTtcclxuICAgICAgICAgICAgICAgICAgZGF0YVtkYXRhLmluZGV4T2Yob2xkRGF0YSldID0gbmV3RGF0YTtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ucHJldlN0YXRlLCBkYXRhIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9LCA0MDApO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgIH19XHJcbiAgICAvPlxyXG4gICAgPE1hcmdpbi8+XHJcbiAgICA8Q3VzdG9tU25hY2tiYXIgb3Blbj17c25hY2sub3Blbn0gb25DbG9zZT17KCk9PnNldFNuYWNrKHtvcGVuOmZhbHNlfSl9IFxyXG4gICAgY29udGVudD0nbmVlZCBzb21lIGhlbHA/ID8gZG91YmxlLWNsaWNrIGFueSBzcGFjZSAhJyBzdGF0dXM9XCJzdWNjZXNzXCIvPlxyXG4gICAgPEN1c3RvbVNuYWNrYmFyIG9wZW49e3NhdmVkU25hY2sub3Blbn0gb25DbG9zZT17KCk9PnNldFNhdmVkU25hY2soe29wZW46ZmFsc2V9KX0gXHJcbiAgICBjb250ZW50PSdTQVZFRCAhJyBzdGF0dXM9XCJzdWNjZXNzXCIvPlxyXG4gICAgPEN1c3RvbVNuYWNrYmFyIG9wZW49e2Vycm9yU25hY2sub3Blbn0gb25DbG9zZT17KCk9PnNldEVycm9yU25hY2soe29wZW46ZmFsc2V9KX0gXHJcbiAgICBjb250ZW50PSdFUlJPUiAhJyBzdGF0dXM9XCJlcnJvclwiLz5cclxuICAgIDwvQm94PlxyXG4gICAgKX1cclxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgKTtcclxufVxyXG5cclxuTWFuYWdlbWVudFRhYmxlLnByb3BUeXBlcyA9IHtcclxuICBpc0xvYWRpbmcgOiBQcm9wVHlwZXMuYm9vbFxyXG59IiwiXHJcbmltcG9ydCB7RGlhbG9nLFxyXG4gICAgRGlhbG9nVGl0bGUsXHJcbiAgICBMaXN0LFxyXG4gICAgTGlzdEl0ZW0sXHJcbiAgICBMaXN0SXRlbVRleHQsXHJcbiAgICBCb3gsXHJcbiAgICBtYWtlU3R5bGVzfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5jb25zdCB1c2VTdHlsZSA9IG1ha2VTdHlsZXModGhlbWUgPT4ge1xyXG4gICAgaWNvbiA6IHtcclxuICAgICAgICB3aWR0aCA6ICczdncnXHJcbiAgICB9XHJcbn0pXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1hbnVhbERpYWxvZyAocHJvcHMpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZSgpO1xyXG4gICAgY29uc3Qge29wZW4sIG9uQ2xvc2V9ID0gcHJvcHM7XHJcbiAgICBjb25zdCBpY29ucyA9IFtcclxuICAgICAgICB7aWNvbiA6ICdhZGRfYm94JyAsIGRlc2NyaXB0aW9uIDogJ1tBZGRdIHJvd3MuJ30sXHJcbiAgICAgICAge2ljb24gOiAnY3JlYXRlJyAsIGRlc2NyaXB0aW9uIDogJ1tFZGl0XSByZWNvcmRzLid9LFxyXG4gICAgICAgIHtpY29uIDogJ3NlYXJjaCcgLCBkZXNjcmlwdGlvbiA6ICdUeXBlIGRvd24gd29yZHMgdG8gW3NlYXJjaF0uJ30sXHJcbiAgICAgICAge2ljb24gOiAnc2F2ZV9hbHQnICwgZGVzY3JpcHRpb24gOiAnW0Rvd25sb2FkXSBmaWxlcyBpbiBDVlMgZm9ybWF0Lid9LFxyXG4gICAgICAgIHtpY29uIDogJ3ZpZXdfd2VlaycgLCBkZXNjcmlwdGlvbiA6ICdbU2VsZWN0XSBjb2x1bW5zIHRvIGJlIGRpc3BsYXllZCd9LFxyXG4gICAgICAgIHtpY29uIDogJ3BsYXlsaXN0X2FkZF9jaGVjaycgLCBkZXNjcmlwdGlvbiA6ICdGb2xsb3cgdGhlIHN0ZXBzIGJlbG93IHRvIFtkZWxldGVdIHJvd3MuJ30sXHJcbiAgICAgICAge2ljb24gOiAnY2hlY2tfYm94JyAsIGRlc2NyaXB0aW9uIDogJyDikaAgU2VsZWN0IHRoZSBjaGVja2JveCBvbiB0aGUgcm93Lid9LFxyXG4gICAgICAgIHtpY29uIDogJ2ZhY3RfY2hlY2snICwgZGVzY3JpcHRpb24gOiAnIOKRoSBDaGVjayB0aGUgbnVtYmVyIG9mIHRoZSByb3dzIHNlbGVjdGVkLid9LFxyXG4gICAgICAgIHtpY29uIDogJ2RlbGV0ZScgLCBkZXNjcmlwdGlvbiA6ICcg4pGiIENsaWNrIHRoZSBCaW4gaWNvbiBvbiB0aGUgcmlnaHQgYWJvdmUuJ30sXHJcbiAgICAgICAge2ljb24gOiAncGxheWxpc3RfYWRkX2NoZWNrJyAsIGRlc2NyaXB0aW9uIDogJ0ZvbGxvdyB0aGUgc3RlcHMgYmVsb3cgdG8gW0VkaXRdIGhlYWRlcnMuJ30sXHJcbiAgICAgICAge2ljb24gOiAnbWVudScgLCBkZXNjcmlwdGlvbiA6ICcg4pGgIE9wZW4gTVlQQUdFJ30sXHJcbiAgICAgICAge2ljb24gOiAnY3JlYXRlJyAsIGRlc2NyaXB0aW9uIDogJyDikaEgQ2xpY2sgdGhlIFBlbmNpbCBpY29uJ30sXHJcbiAgICBdXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgIDxEaWFsb2cgb25DbG9zZT17b25DbG9zZX0gb3Blbj17b3Blbn0+XHJcbiAgICAgICAgPERpYWxvZ1RpdGxlPiBCQVNJQyBNQU5VQUwgPC9EaWFsb2dUaXRsZT5cclxuICAgICAgICA8TGlzdD5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWNvbnMubWFwKChpY29uLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtIGtleT17YCR7aWNvbn0gKyAke2luZGV4fWB9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJveCBjb21wb25lbnQ9J3NwYW4nIGNsYXNzTmFtZT17YG1hdGVyaWFsLWljb25zICR7Y2xhc3Nlcy5pY29ufWB9IHN0eWxlPXt7d2lkdGg6JzN2dyd9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aWNvbi5pY29ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbVRleHQgcHJpbWFyeT17aWNvbi5kZXNjcmlwdGlvbn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0xpc3RJdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L0xpc3Q+XHJcbiAgICA8L0RpYWxvZz5cclxuICAgIClcclxufVxyXG5NYW51YWxEaWFsb2cucHJvcFR5cGVzID0ge1xyXG4gICAgb3BlbiA6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbiAgICBvbkNsb3NlIDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxyXG59IiwiaW1wb3J0IHsgQm94LCBCdXR0b24sIEZhZGUsIFBhcGVyLCBUeXBvZ3JhcGh5IH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XHJcbmltcG9ydCBiYWNrZ3JvdW5kIGZyb20gJy4uL2ltYWdlcy9tYW5hZ2VtZW50LWJhY2tncm91bmQuanBnJ1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXModGhlbWUgPT4gKHtcclxuICAgIGNvbnRhaW5lciA6IHtcclxuICAgICAgICB3aWR0aCA6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQgOiAnMTAwdmgnLFxyXG4gICAgICAgIGRpc3BsYXkgOiAnZmxleCcsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQgOiAnY2VudGVyJyxcclxuICAgICAgICBhbGlnbkl0ZW1zIDogJ2NlbnRlcicsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbiA6ICdjb2x1bW4nLFxyXG4gICAgICAgIGJhY2tncm91bmRJbWFnZSA6IGB1cmwoJHtiYWNrZ3JvdW5kfSlgLFxyXG4gICAgICAgIGNvbG9yOid3aGl0ZScsXHJcbiAgICB9LFxyXG4gICAgYnV0dG9uIDoge1xyXG4gICAgICAgIGZvbnRXZWlnaHQgOiAnYm9sZGVyJyxcclxuICAgICAgICBtYXJnaW4gOiB0aGVtZS5zcGFjaW5nKDEpXHJcbiAgICB9LFxyXG4gICAgYnV0dG9uQ29udGFpbmVyIDoge1xyXG4gICAgICAgIGZsZXhEaXJlY3Rpb24gOiAncm93JyxcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25JdGVtcyA6ICdjZW50ZXInLFxyXG4gICAgICAgIG1hcmdpbiA6IHRoZW1lLnNwYWNpbmcoMSksXHJcbiAgICB9LFxyXG4gICAgdGV4dDoge1xyXG4gICAgICAgIC4uLnRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2luaGVyaXQnLFxyXG4gICAgICAgIHRleHRTaGFkb3cgOiAnMC41cHggMC41cHggMXB4ICMwMDAwMDA1YycsXHJcbiAgICAgICAgbWFyZ2luIDogJzAgMXZ3IDEuN3ZoJyxcclxuICAgICAgICBjb2xvcjogJyM2YTc0OGMnLFxyXG4gICAgfSxcclxufSkpO1xyXG5jb25zdCBkZWZhdWx0RGF0YSA9IHtcclxuICAgIGNvbHVtbnMgOiBbXHJcbiAgICAgIHsgdGl0bGU6ICdOYW1lJywgZmllbGQ6ICdOYW1lJyAsIGdyb3VwaW5nOmZhbHNlfSxcclxuICAgICAgeyB0aXRsZTogJ1N1cm5hbWUnLCBmaWVsZDogJ1N1cm5hbWUnIH0sXHJcbiAgICAgIHsgdGl0bGU6ICdCaXJ0aCBZZWFyJywgZmllbGQ6ICdCaXJ0aCBZZWFyJyB9LFxyXG4gICAgICB7IHRpdGxlOiAnUGhvbmUnICwgZmllbGQ6J1Bob25lJywgZ3JvdXBpbmc6ZmFsc2V9LFxyXG4gICAgICB7XHJcbiAgICAgICAgdGl0bGU6ICdHZW5kZXInLFxyXG4gICAgICAgIGZpZWxkOiAnR2VuZGVyJyxcclxuICAgICAgfSxcclxuICAgICAgeyB0aXRsZTogJ01lbW8nICwgZmllbGQ6J01lbW8nfVxyXG4gICAgXSxcclxuICAgIGRhdGEgOiBbXHJcbiAgICAgIHsgXCJOYW1lXCI6ICdNZWhtZXQnLCAnU3VybmFtZSc6ICdCYXJhbicsIFwiQmlydGggWWVhclwiOiAxOTgzLCBcIlBob25lXCI6JzAxMDQ2NTA5OTk1JyAsXCJHZW5kZXJcIjogMSAsIFwiTWVtb1wiOicnfSxcclxuICAgICAgeyBcIk5hbWVcIjogJ0FkYW0nLCAnU3VybmFtZSc6ICdBZGFtJywgXCJCaXJ0aCBZZWFyXCI6IDE5ODQsIFwiUGhvbmVcIjonMDEwNDY1MDk3OTUnICxcIkdlbmRlclwiOiAyICwgXCJNZW1vXCI6Jyd9LFxyXG4gICAgICB7IFwiTmFtZVwiOiAnTWVobWV0JywgJ1N1cm5hbWUnOiAnQXRvbScsIFwiQmlydGggWWVhclwiOiAxOTg1LCBcIlBob25lXCI6JzAxMDQ2NTA5Njk1JyAsXCJHZW5kZXJcIjogMSAsIFwiTWVtb1wiOicnfSxcclxuICAgICAgeyBcIk5hbWVcIjogJ211bCcsICdTdXJuYW1lJzogJ0tvbmduYScsIFwiQmlydGggWWVhclwiOiAxOTg2LCBcIlBob25lXCI6JzAxMDQ2NTA5MTk1JyAsXCJHZW5kZXJcIjogMSAsIFwiTWVtb1wiOicnfSxcclxuICAgICAgeyBcIk5hbWVcIjogJ0phY2snLCAnU3VybmFtZSc6ICdKYWNrJywgXCJCaXJ0aCBZZWFyXCI6IDE5ODcsIFwiUGhvbmVcIjonMDEwNDY1MDkyOTUnICxcIkdlbmRlclwiOiAyICwgXCJNZW1vXCI6Jyd9LFxyXG4gICAgICB7IFwiTmFtZVwiOiAnQm9iJywgJ1N1cm5hbWUnOiAnQm9iJywgXCJCaXJ0aCBZZWFyXCI6IDE5ODgsIFwiUGhvbmVcIjonMDEwNDY1MDkzOTUnICxcIkdlbmRlclwiOiAyICwgXCJNZW1vXCI6Jyd9LFxyXG4gICAgXVxyXG4gIH1cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGVmYXVsdFBhZ2UgKHtzdGF0ZSAsIHNldFN0YXRlLCBtYXRjaH0pIHtcclxuICAgIGNvbnN0IFtmYWRlLCBzZXRGYWRlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtmYWRlMiwgc2V0RmFkZTJdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gICAgY29uc3QgaGFuZGxlT25ERU1PQ2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgc2V0U3RhdGUoey4uLnN0YXRlICwgY29sdW1ucyA6IGRlZmF1bHREYXRhLmNvbHVtbnMgLCBkYXRhIDogZGVmYXVsdERhdGEuZGF0YSwgZGVmYXVsdFBhZ2UgOiAhc3RhdGUuZGVmYXVsdFBhZ2V9KTtcclxuICAgIH1cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKT0+e1xyXG4gICAgICAgIHNldEZhZGUodHJ1ZSk7XHJcbiAgICAgICAgc2V0VGltZW91dChzZXRGYWRlMih0cnVlKSAsIDE1MDApO1xyXG4gICAgfSxbXSlcclxuICAgIHJldHVybiAoXHJcbiAgICA8RmFkZSBpbj17ZmFkZX0gdGltZW91dD17e2VudGVyIDogODAwLCBleGl0OjUwMH19PlxyXG4gICAgICAgIDxCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLmNvbnRhaW5lcn0+XHJcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J2gxJyBjb2xvcj0naW5pdGlhbCcgc3R5bGU9e3t0ZXh0U2hhZG93Oic1cHggMS41cHggMS41cHggZ3JheSd9fT5cclxuICAgICAgICAgICAgICAgIE1hbmFnZW1lbnQgVGFibGVcclxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSdzdWJ0aXRsZTInIGd1dHRlckJvdHRvbSBzdHlsZT17e3RleHRTaGFkb3c6JzJweCAycHggMXB4IGJsYWNrJ319PiBcclxuICAgICAgICAgICAgICAgIFlvdSBtYXkgdHJ5IHRoZSBERU1PIGlmIHRoaXMgeW91ciBmaXJzdCB0aW1lLCBcclxuICAgICAgICAgICAgICAgIG9yIGdldCBzdGFydGVkIHJpZ2h0IGF3YXkhXHJcbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgPEZhZGUgaW49e2ZhZGUyfSB0aW1lb3V0PXt7ZW50ZXIgOiAzMDAwLCBleGl0OjUwMH19PlxyXG4gICAgICAgICAgICAgICAgPEJveCBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9uQ29udGFpbmVyfT5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259IHZhcmlhbnQ9J2NvbnRhaW5lZCcgY29sb3I9J3NlY29uZGFyeScgc2l6ZT0nbGFyZ2UnIG9uQ2xpY2s9e2hhbmRsZU9uREVNT0NsaWNrfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVTRSBERU1PIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPScvaGVhZGVycycgc3R5bGU9e3t0ZXh0RGVjb3JhdGlvbiA6ICdub25lJ319PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259IHZhcmlhbnQ9J2NvbnRhaW5lZCcgY29sb3I9J3ByaW1hcnknIHNpemU9J2xhcmdlJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdFVCBTVEFSVEVEIFJJR0hUIEFXQVlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICAgIDwvRmFkZT5cclxuICAgICAgICA8L0JveD5cclxuICAgIDwvRmFkZT5cclxuICAgIClcclxufVxyXG5cclxuRGVmYXVsdFBhZ2UucHJvcFR5cGVzID0ge1xyXG4gICAgc3RhdGUgOiBQcm9wVHlwZXMuc2hhcGUoe1xyXG4gICAgICAgIGRlZmF1bHRQYWdlIDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcclxuICAgICAgICBoYXNUYWJsZSA6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXHJcbiAgICAgICAgY29sdW1ucyA6IFByb3BUeXBlcy5hcnJheSxcclxuICAgICAgICBkYXRhIDogUHJvcFR5cGVzLmFycmF5XHJcbiAgICB9KSxcclxuICAgIHNldFN0YXRlIDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCAoaGVhZGVycyAsIGdyb3VwaW5ncykgPT4ge1xyXG4gIGNvbnNvbGUubG9nKGBkYXRhIHBhcnNpbmchISEhYClcclxuICAgIHJldHVybiAoT2JqZWN0LnZhbHVlcyhoZWFkZXJzKS5maWx0ZXIodj0+dikubWFwKCh2YWx1ZSxpbmRleCkgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHRpdGxlIDogdmFsdWUsXHJcbiAgICAgICAgZmllbGQgOiB2YWx1ZSxcclxuICAgICAgICBncm91cGluZyA6IGdyb3VwaW5nc1tpbmRleF1cclxuICAgICAgfVxyXG4gICAgfSkpO1xyXG4gIH0iLCJpbXBvcnQgeyBCdXR0b24sIFRvb2x0aXB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJ1xyXG5pbXBvcnQgeyBzYXZlRGF0YSB9IGZyb20gXCIuLi91dGlsL01hbmFnZW1lbnRBUElcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNhdmVCdXR0b24gKHtzZXRTYXZlZFNuYWNrICwgZGF0YU1hbmFnZXJ9KSB7XHJcbiAgICBmdW5jdGlvbiBvbkNsaWNrICgpIHtcclxuICAgICAgICAgIC8vIFNBVkUgRVZFTlQgdXRpbCA+IE1hbmFnZW1lbnRBUEkuc2F2ZURhdGEg66eM65Ok7Ja07IScIOy9nO2VmOq4sFxyXG4gICAgICAgICAgY29uc3QgZGF0YSA9IFtdO1xyXG4gICAgICAgICAgY29uc3QgZ3JvdXBpbmdzID0gW107XHJcbiAgICAgICAgICBjb25zdCBoZWFkZXJzID0gZGF0YU1hbmFnZXIuY29sdW1ucy5yZWR1Y2UoKG9iaix2LGkpPT57XHJcbiAgICAgICAgICAgIG9ialtgaGVhZGVyJHtpfWBdID0gdi50aXRsZTtcclxuICAgICAgICAgICAgZ3JvdXBpbmdzLnB1c2godi5ncm91cGluZyk7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICB9LHt9KTtcclxuICAgICAgICAgIGRhdGFNYW5hZ2VyLmRhdGEuZm9yRWFjaCgodixpKT0+e1xyXG4gICAgICAgICAgICBjb25zdCB7dGFibGVEYXRhLCAuLi5yZXN0fSA9IHY7XHJcbiAgICAgICAgICAgIGRhdGEucHVzaChyZXN0KTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgIHJlc3VsdCA6IFxyXG4gICAgICAgICAgJHtKU09OLnN0cmluZ2lmeShkYXRhKX1cclxuICAgICAgICAgICR7Z3JvdXBpbmdzfVxyXG4gICAgICAgICAgJHtKU09OLnN0cmluZ2lmeShoZWFkZXJzKX1cclxuICAgICAgICBgKVxyXG4gICAgICAgIHNhdmVEYXRhKGhlYWRlcnMsZ3JvdXBpbmdzLGRhdGEpLnRoZW4ocmVzdWx0PT57XHJcbiAgICAgICAgICBpZiAocmVzdWx0LnJlc3VsdCA9PT0gJ3N1Y2Nlc3MnKSB7XHJcbiAgICAgICAgICAgIHNldFNhdmVkU25hY2soe29wZW46dHJ1ZX0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2V0RXJyb3JTbmFjayh7b3Blbjp0cnVlfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgc2V0RXJyb3JTbmFjayh7b3Blbjp0cnVlfSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiAoXHJcbiAgICA8VG9vbHRpcCB0aXRsZT0nQ2xpY2sgdG8gU0FWRSAoIEN0cmwgKyBTICknPlxyXG4gICAgICAgIDxCdXR0b24gc3R5bGU9e3tmb250V2VpZ2h0Oidib2xkZXInfX0gdmFyaWFudD0nY29udGFpbmVkJyBjb2xvcj0nc2Vjb25kYXJ5JyBcclxuICAgICAgICBvbkNsaWNrPXsoKT0+b25DbGljaygpfT5cclxuICAgICAgICAgIFNBVkVcclxuICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgPC9Ub29sdGlwPlxyXG4gICAgKVxyXG59XHJcblxyXG5TYXZlQnV0dG9uLnByb3BUeXBlcyA9IHtcclxuICBzZXRTYXZlZFNuYWNrIDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICBkYXRhTWFuYWdlciA6IFByb3BUeXBlcy5vYmplY3RcclxufSIsImltcG9ydCB7IFxyXG4gICAgQm94ICxQYXBlciwgbWFrZVN0eWxlcywgRmFkZSwgVGV4dEZpZWxkLCBUb29sdGlwLCBUeXBvZ3JhcGh5LCBDaGVja2JveFxyXG59XHJcbiBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmVcIjtcclxuaW1wb3J0IGJhY2tncm91bmQgZnJvbSBcIi4uL2ltYWdlcy9tYW5hZ2VtZW50LWJhY2tncm91bmQuanBnXCI7XHJcbmltcG9ydCBhcnJvdyBmcm9tICcuLi9pbWFnZXMvYXJyb3cucG5nJztcclxuaW1wb3J0IHsgc2F2ZUhlYWRlcnMgfSBmcm9tIFwiLi4vdXRpbC9NYW5hZ2VtZW50QVBJXCI7XHJcbmltcG9ydCB7IGdldE1hbmFnZW1lbnRUYWJsZSB9IGZyb20gJy4uL3V0aWwvTWFuYWdlbWVudEFQSSc7XHJcbmltcG9ydCB1c2VPbkZpcnN0UmVuZGVyIGZyb20gJy4uL2N1c3RvbUhvb2svdXNlT25GaXJzdFJlbmRlcic7XHJcbmltcG9ydCB7dXNlQ29va2llc30gZnJvbSAncmVhY3QtY29va2llJztcclxuaW1wb3J0IEN1c3RvbVNuYWNrYmFyIGZyb20gJy4uL2N1c3RvbUhvb2svU25hY2tCYXInO1xyXG5pbXBvcnQgTG9hZGluZyBmcm9tIFwiLi4vY3VzdG9tSG9vay9Mb2FkaW5nXCI7XHJcbmltcG9ydCB7IFByb2dyZXNzQ29udGV4dCB9IGZyb20gXCIuLi9hcHBcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmNvbnN0IHVzZVN0eWxlID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICBjb250YWluZXIgOiB7XHJcbiAgICAgICAgd2lkdGggOiAnMTAwJScsXHJcbiAgICAgICAgaGVpZ2h0IDogJzEyMHZoJyxcclxuICAgICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25JdGVtcyA6ICdjZW50ZXInLFxyXG4gICAgICAgIGZsZXhEaXJlY3Rpb24gOiAncm93JyxcclxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2UgOiBgdXJsKCR7YmFja2dyb3VuZH0pYCxcclxuICAgIH0sXHJcbiAgICBwYXBlciA6IHtcclxuICAgICAgICBmbGV4RGlyZWN0aW9uIDogJ2NvbHVtbicsXHJcbiAgICAgICAgYWxpZ25Db250ZW50IDogJ3NwYWNlLWFyb3VuZCcsXHJcbiAgICAgICAgbWFyZ2luVG9wIDogJzEwdmgnLFxyXG4gICAgfSxcclxuICAgIGZvcm1Sb290IDoge1xyXG4gICAgICAgICcmID4gKic6IHtcclxuICAgICAgICAgICAgbWFyZ2luOiAnMC41dmggMXZ3JyxcclxuICAgICAgICAgICAgd2lkdGg6ICc2MGNoJyxcclxuICAgICAgICAgICAgbWluV2lkdGggOiAnNDBjaCcsXHJcbiAgICAgICAgICAgIGRpc3BsYXk6J2ZsZXgnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgYXJyb3cgOiB7XHJcbiAgICAgICAgd2lkdGggOiAnMTB2dycsXHJcbiAgICAgICAgaGVpZ2h0IDogJzEwdmgnLFxyXG4gICAgICAgIGFsaWduU2VsZiA6ICdjZW50ZXInLFxyXG4gICAgICAgIGJhY2tncm91bmQgOiBgbm8tcmVwZWF0IGNlbnRlci84MCUgdXJsKCR7YXJyb3d9KWAsXHJcbiAgICAgICAgYmFja2dyb3VuZFNpemUgOiAnY29udGFpbicsXHJcbiAgICAgICAgbWFyZ2luTGVmdCA6ICczdncnLFxyXG4gICAgICAgIHRyYW5zZm9ybSA6ICdyb3RhdGUoOTBkZWcpJ1xyXG4gICAgfSxcclxuICAgIGRlc2NyaXB0aW9uIDoge1xyXG4gICAgICAgIGFsaWduU2VsZiA6ICdjZW50ZXInXHJcbiAgICB9XHJcbn0pKVxyXG5jb25zdCBkZWZhdWx0SGVhZGVyID0ge1xyXG4gICAgXCJoZWFkZXIwXCIgOiAnJyxcclxuICAgIFwiaGVhZGVyMVwiIDogJycsXHJcbiAgICBcImhlYWRlcjJcIiA6ICcnLFxyXG4gICAgXCJoZWFkZXIzXCIgOiAnJyxcclxuICAgIFwiaGVhZGVyNFwiIDogJycsXHJcbiAgICBcImhlYWRlcjVcIiA6ICcnLFxyXG4gICAgXCJoZWFkZXI2XCIgOiAnJyxcclxuICAgIFwiaGVhZGVyN1wiIDogJycsXHJcbiAgICBcImhlYWRlcjhcIiA6ICcnLFxyXG4gICAgXCJoZWFkZXI5XCIgOiAnJyxcclxufVxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIZWFkZXJzICh7aXNMb2FkaW5nfSkge1xyXG4gICAgLy8gc3R5bGUsIGNvb2tpZVxyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlKCk7XHJcbiAgICBjb25zdCBoYW5kbGVQcm9ncmVzcyA9IFJlYWN0LnVzZUNvbnRleHQoUHJvZ3Jlc3NDb250ZXh0KTtcclxuICAgIGNvbnN0IFsgY29va2llcyAsIHNldENvb2tpZSAsIHJlbW92ZUNvb2tpZSBdID0gdXNlQ29va2llcyAoWydwcm9maWxlJ10pO1xyXG4gICAgLy8gc3RhdGVzXHJcbiAgICBjb25zdCBbZmFkZSwgc2V0RmFkZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbc25hY2ssIHNldFNuYWNrXSA9IFJlYWN0LnVzZVN0YXRlKHtvcGVuOmZhbHNlfSk7XHJcbiAgICBjb25zdCBbcmVzdWx0U25hY2sgLCBzZXRSZXN1bHRTbmFja10gPSBSZWFjdC51c2VTdGF0ZSh7b3BlbjpmYWxzZSwgY29udGVudCA6ICcnfSk7XHJcbiAgICBjb25zdCBbZGF0YSAsIHNldERhdGFdID0gUmVhY3QudXNlU3RhdGUoe1xyXG4gICAgICAgIGhlYWRlcnMgOiBkZWZhdWx0SGVhZGVyLFxyXG4gICAgICAgIGdyb3VwaW5ncyA6IEFycmF5KDEwKS5maWxsKGZhbHNlKSxcclxuICAgIH0pXHJcbiAgICAvLyByZWZcclxuICAgIGNvbnN0IGRhdGFSZWYgPSBSZWFjdC51c2VSZWYoKTtcclxuICAgIC8vIGNvbnN0cnVjdG9yXHJcbiAgICB1c2VPbkZpcnN0UmVuZGVyKCgpPT57XHJcbiAgICAgICAgZ2V0TWFuYWdlbWVudFRhYmxlKCkudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGByZXNwb25zZSA6ICR7SlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpfWApO1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwaW5nTGVuZ3RoID0gcmVzcG9uc2UuZGF0YT8gcmVzcG9uc2UuZGF0YS5ncm91cGluZ3MgPyByZXNwb25zZS5kYXRhLmdyb3VwaW5ncy5sZW5ndGggOiAwIDogMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwaW5ncyA9IHJlc3BvbnNlLmRhdGE/IHJlc3BvbnNlLmRhdGEuZ3JvdXBpbmdzID8gWy4uLnJlc3BvbnNlLmRhdGEuZ3JvdXBpbmdzXSA6IFtdIDogW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwIC0gZ3JvdXBpbmdMZW5ndGg7IGkgKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBncm91cGluZ3MucHVzaChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gcmVzcG9uc2UuZGF0YT8gcmVzcG9uc2UuZGF0YS5oZWFkZXJzID8gcmVzcG9uc2UuZGF0YS5oZWFkZXJzIDoge30gOiB7fTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnNMZW5ndGggPSBPYmplY3QudmFsdWVzKGhlYWRlcnMpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBoZWFkZXJzTGVuZ3RoOyBpIDwgMTA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNbYGhlYWRlciR7aX1gXSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGF0YVJlZi5jdXJyZW50ID0ge2hlYWRlcnMsZ3JvdXBpbmdzfTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGFSZWYuY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICBzZXREYXRhKHtoZWFkZXJzLCBncm91cGluZ3N9KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjA0KSB7ICAvLyB1bmF1dGhvcml6ZWRcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGhhbmRsZUxvZ291dCgpLCAzNTAwKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHRTbmFjayh7b3BlbiA6IHRydWUsc3RhdHVzOidlcnJvcicsIGNvbnRlbnQgOiBgUGxlYXNlIGxvZyBpbiBhZ2Fpbi5gfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdFNuYWNrKHtvcGVuIDogdHJ1ZSxzdGF0dXM6J2Vycm9yJywgY29udGVudCA6IGBlcnJvciAoY29kZSA6ICR7cmVzcG9uc2Uuc3RhdHVzfSlgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGhhbmRsZUxvZ291dCgpLCAzNTAwKTtcclxuICAgICAgICAgICAgICAgIHNldFJlc3VsdFNuYWNrKHtvcGVuOnRydWUsc3RhdHVzOidlcnJvcicsIGNvbnRlbnQ6J1BsZWFzZSBsb2cgaW4gYWdhaW4uJ30pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSl9XHJcbiAgICApXHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpPT57XHJcbiAgICAgICAgZGF0YVJlZi5jdXJyZW50ID0ge1xyXG4gICAgICAgICAgICBoZWFkZXJzIDoge1xyXG4gICAgICAgICAgICAgICAgLi4uZGF0YS5oZWFkZXJzXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdyb3VwaW5ncyA6IFtcclxuICAgICAgICAgICAgICAgIC4uLmRhdGEuZ3JvdXBpbmdzXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgfSxbZGF0YS5oZWFkZXJzLCBkYXRhLmdyb3VwaW5nc10pO1xyXG5cclxuICAgIC8vIGVmZmVjdHNcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKT0+eyBcclxuICAgICAgICBzZXRGYWRlKHRydWUpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGhhbmRsZVN1Ym1pdChkYXRhUmVmLmN1cnJlbnQuaGVhZGVycywgZGF0YVJlZi5jdXJyZW50Lmdyb3VwaW5ncywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGhhbmRsZVByb2dyZXNzKHJlc3VsdCA9PT0gJ2Vycm9yJyA/ICdlcnJvcicgOiAnc3VjY2VzcycpO1xyXG4gICAgICAgIH1cclxuICAgIH0sW10pO1xyXG5cclxuXHJcbiAgICAgICAgXHJcbiAgICAvLyBldmVudHNcclxuICAgIGNvbnN0IGhhbmRsZUxvZ291dCA9ICgpID0+IHsgICAgLy8g66qo65OgIOy/oO2CpCDsgq3soJzsmYAgcHJvZmlsZeygnOqxsFxyXG4gICAgICAgIHJlbW92ZUNvb2tpZSgncHJvZmlsZScpO1xyXG4gICAgICAgIGxvY2F0aW9uLmhyZWYgPSBsb2NhdGlvbi5vcmlnaW47XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVTdWJtaXQgPSAoaGVhZGVycywgZ3JvdXBpbmdzLCBpc0F1dG9TYXZlKSA9PiB7XHJcbiAgICAgICAgaWYgKCFPYmplY3QudmFsdWVzKGhlYWRlcnMpLmV2ZXJ5KHYgPT4gdi5sZW5ndGggPD0gMTUpKSB7IC8vIDE16riA7J6QIOydtOyDgSDsoJztlZwg7JeQ65+s66mU7IS47KeAXHJcbiAgICAgICAgICAgIHNldFNuYWNrKHtvcGVuOnRydWV9KTtcclxuICAgICAgICAgICAgcmV0dXJuICdlcnJvcic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChPYmplY3QudmFsdWVzKGhlYWRlcnMpLmZpbHRlcih2PT52KS5sZW5ndGggPT09IDApIHsgICAgIC8vIOu5hOyWtOyeiOydhCDqsr3smrAg7JeQ65+s66mU7IS47KeAXHJcbiAgICAgICAgICAgIHNldFNuYWNrKHtvcGVuOnRydWV9KVxyXG4gICAgICAgICAgICByZXR1cm4gJ2Vycm9yJztcclxuICAgICAgICB9XHJcbiAgICAgICAgc2F2ZUhlYWRlcnMoaGVhZGVycyxncm91cGluZ3MpXHJcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWlzQXV0b1NhdmUpIHNldFJlc3VsdFNuYWNrKHtvcGVuIDogdHJ1ZSwgY29udGVudCA6IHJlc3BvbnNlLnJlc3VsdH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoaGFuZGxlTG9nb3V0KCksIDIwMDApO1xyXG4gICAgICAgICAgICBzZXRSZXN1bHRTbmFjayh7b3Blbjp0cnVlLHN0YXR1czonZXJyb3InLCBjb250ZW50OidQbGVhc2UgbG9nIGluIGFnYWluLid9KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGFuZGxlSW5wdXRDaGFuZ2UgPSAoZSxpbmRleCkgPT4ge1xyXG4gICAgICAgIHNldERhdGEoey4uLmRhdGEsIGhlYWRlcnMgOiB7XHJcbiAgICAgICAgICAgICAgICAuLi5kYXRhLmhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICBbYGhlYWRlciR7aW5kZXh9YF0gOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIGNvbnN0IGhhbmRsZUdyb3VwaW5ncyA9IChlLGluZGV4KSA9PiB7XHJcbiAgICAgICAgc2V0RGF0YSh7Li4uZGF0YSwgZ3JvdXBpbmdzIDogZGF0YS5ncm91cGluZ3MubWFwKCh2LGkpPT4gaT09PWluZGV4PyBlLnRhcmdldC5jaGVja2VkIDogdil9KTtcclxuICAgIH1cclxuICAgIC8vIGNvbXBvbmVudFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgPExvYWRpbmcgaXNMb2FkaW5nPXtpc0xvYWRpbmd9Lz5cclxuICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb250YWluZXJ9PlxyXG4gICAgICAgIDxGYWRlIGluPXtmYWRlfSB0aW1lb3V0PXt7ZW50ZXIgOiAxNTAwfX0+XHJcbiAgICAgICAgICAgIDxQYXBlciBjbGFzc05hbWU9e2NsYXNzZXMucGFwZXJ9IGVsZXZhdGlvbj17NH0+XHJcbiAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9e2NsYXNzZXMuZm9ybVJvb3R9IGF1dG9Db21wbGV0ZT0nb2ZmJz5cclxuICAgICAgICAgICAgICAgICAgICA8Qm94IGNvbXBvbmVudD0nZGl2Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0naDQnIGNvbG9yPSd0ZXh0UHJpbWFyeScgc3R5bGU9e3tmb250V2VpZ2h0Oidib2xkZXInfX0+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVhZGVyIEVkaXQgRm9ybSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IGNvbG9yPXtPYmplY3QudmFsdWVzKGRhdGEuaGVhZGVycykuZXZlcnkodiA9PiB2Lmxlbmd0aCA8PSAxNSkgPyAnYmx1ZScgOiAncmVkJ30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J3N1YnRpdGxlMicgY29sb3I9J2luaXRpYWwnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlciBzaG91bGQgYmUgbGVzcyB0aGFuIDE1IGxldHRlcnMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAge1xyXG4gICAgICAgIE9iamVjdC52YWx1ZXMoZGF0YS5oZWFkZXJzKS5tYXAoKGhlYWRlcixpbmRleCk9PntcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtpbmRleH0+XHJcbiAgICAgICAgICAgICAgICA8VGV4dEZpZWxkIFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ9e2luZGV4PT09MD8gdHJ1ZTpmYWxzZX1cclxuICAgICAgICAgICAgICAgIGlkPXtgJHtpbmRleH1gfVxyXG4gICAgICAgICAgICAgICAga2V5PXtpbmRleH1cclxuICAgICAgICAgICAgICAgIGxhYmVsPXtgaGVhZGVyLSR7aW5kZXgrMX1gfVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2RhdGEuaGVhZGVyc1tgaGVhZGVyJHtpbmRleH1gXX1cclxuICAgICAgICAgICAgICAgIG1hcmdpbj0nbm9ybWFsJ1xyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKT0+aGFuZGxlSW5wdXRDaGFuZ2UoZSxpbmRleCl9XHJcbiAgICAgICAgICAgICAgICBlcnJvcj17ZGF0YS5oZWFkZXJzW2BoZWFkZXIke2luZGV4fWBdLmxlbmd0aCA+IDE1ID8gdHJ1ZSA6IGZhbHNlfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxUb29sdGlwIHRpdGxlPVwiXHJcbllvdSBjYW4gYXJyYW5nZSB0aGUgZGF0YSB3aXRoIGEgdmFsaWQgaGVhZGVyLCBcclxuVW5pcXVlIHZhbHVlcyBhcmUgbm90IGNvbW1vbmx5IHVzZWQgZm9yIHRoaXMgZnVuY3Rpb24gaW4gZ2VuZXJhbC5cclxuZS5nLikgbmFtZSwgYWRkcmVzcywgbW9iaWxlIE5PLiBldGMuXHJcblwiXHJcbiAgICAgICAgICAgICAgICAgcGxhY2VtZW50PSdyaWdodCcgZW50ZXJEZWxheT17MjAwfSBsZWF2ZURlbGF5PXsyMDB9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxDaGVja2JveCBcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtkYXRhLmdyb3VwaW5nc1tpbmRleF19IFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSk9PmhhbmRsZUdyb3VwaW5ncyhlLGluZGV4KX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9DaGVja2JveD5cclxuICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICAgICAgICAgICAgICAgIHtpbmRleD09PTA/IFxyXG4gICAgICAgICAgICAgICAgICAgIDxCb3ggY29tcG9uZW50PSdzcGFuJyBjbGFzc05hbWU9e2NsYXNzZXMuZGVzY3JpcHRpb259PiBHcm91cGluZyE/PC9Cb3g+XHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICl9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgIDwvUGFwZXI+XHJcbiAgICAgICAgPC9GYWRlPlxyXG4gICAgICAgIDxUb29sdGlwIHRpdGxlPVwiU1VCTUlUXCIgYXJpYS1sYWJlbD0nc3VibWl0JyBwbGFjZW1lbnQ9J3RvcCcgZW50ZXJEZWxheT17MjAwfSBsZWF2ZURlbGF5PXs0MDB9PlxyXG4gICAgICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5hcnJvd30gb25Nb3VzZU92ZXI9eyhlKT0+ZS50YXJnZXQuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInfVxyXG4gICAgICAgICAgICAgb25DbGljaz17KCk9PmhhbmRsZVN1Ym1pdChkYXRhLmhlYWRlcnMgLCBkYXRhLmdyb3VwaW5ncyl9Lz5cclxuICAgICAgICA8L1Rvb2x0aXA+XHJcbiAgICAgICAgPEN1c3RvbVNuYWNrYmFyIG9wZW49e3NuYWNrLm9wZW59IG9uQ2xvc2U9eygpPT5zZXRTbmFjayh7b3BlbjpmYWxzZX0pfSBcclxuICAgICAgICBjb250ZW50PXtgSGVhZGVyIHNob3VsZCBiZSBsZXNzIHRoYW4gMTUgbGV0dGVycyA6KGB9IHN0YXR1cz1cImVycm9yXCIvPlxyXG4gICAgICAgIDxDdXN0b21TbmFja2JhciBvcGVuPXtyZXN1bHRTbmFjay5vcGVufSBvbkNsb3NlPXsoKT0+c2V0UmVzdWx0U25hY2soe29wZW46ZmFsc2V9KX0gXHJcbiAgICAgICAgY29udGVudD17cmVzdWx0U25hY2suY29udGVudH0gc3RhdHVzPXtyZXN1bHRTbmFjay5zdGF0dXM9PT0nZXJyb3InPyAnZXJyb3InIDogJ3N1Y2Nlc3MnfS8+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgIClcclxufVxyXG5cclxuSGVhZGVycy5wcm9wVHlwZXMgPSB7XHJcbiAgICBpc0xvYWRpbmcgOiBQcm9wVHlwZXMuYm9vbFxyXG59IiwiXHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgSW50cm9kdWN0aW9uIGZyb20gXCIuL0ludHJvZHVjdGlvblwiO1xyXG5pbXBvcnQgSW50cm9kdWN0aW9uMiBmcm9tIFwiLi9JbnRyb2R1Y3Rpb24yXCI7XHJcbmltcG9ydCBNYWluIGZyb20gJy4vTWFpbic7XHJcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuLi9jdXN0b21Ib29rL0xvYWRpbmdcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgcm9vdDoge1xyXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXHJcbiAgICAgIGp1c3RpZnlDb250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJ1xyXG4gICAgfSxcclxuICB9KSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKHtpc0xvYWRpbmd9KSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XHJcbiAgICAgICAgICAgICAgPExvYWRpbmcgaXNMb2FkaW5nPXtpc0xvYWRpbmd9Lz5cclxuICAgICAgICAgICAgICA8TWFpbi8+XHJcbiAgICAgICAgICAgICAgICA8SW50cm9kdWN0aW9uLz5cclxuICAgICAgICAgICAgICAgIDxJbnRyb2R1Y3Rpb24yLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5Ib21lLnByb3BUeXBlcyA9IHtcclxuICBpc0xvYWRpbmcgOiBQcm9wVHlwZXMuYm9vbFxyXG59IiwiaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XHJcbmltcG9ydCB7IEdyb3cgLCBCb3gsIFBhcGVyLEZhZGUgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmVcIjtcclxuaW1wb3J0IEltYWdlQ2Fyb3VzZWwgZnJvbSBcIi4vQ2Fyb3VzZWxcIjtcclxuaW1wb3J0IGltYWdlTGlzdCBmcm9tICcuL0ltYWdlU2xpZGVTb3VyY2VzJztcclxuaW1wb3J0IExpc3RDcm91c2VsRGVzY3JpcHRpb24gZnJvbSAnLi9MaXN0Q2Fyb3VzZWxEZXNjcmlwdGlvbic7XHJcbmltcG9ydCBiYWNrZ3JvdW5kIGZyb20gJy4uL2ltYWdlcy93aGl0ZWJhY2tncm91bmQuanBnJztcclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIGZsZXhEaXJlY3Rpb246J2NvbHVtbicsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgICAgIGFsaWduSXRlbXM6J2NlbnRlcicsXHJcbiAgICAgICAgaGVpZ2h0IDogJzEwMHZoJyxcclxuICAgICAgICB3aWR0aCA6ICcxMDB2dycsXHJcbiAgICAgICAgYmFja2dyb3VuZEltYWdlIDogYHVybCgke2JhY2tncm91bmR9KWAsXHJcbiAgICAgICAgYmFja2dyb3VuZFNpemUgOiAnY292ZXInLFxyXG4gICAgfSxcclxuICAgIHBhcGVyIDoge1xyXG4gICAgICAgIG1pbldpZHRoOiA3NTAsXHJcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAwcHgnLFxyXG4gICAgICAgIHdpZHRoIDogJzcwdncnLFxyXG4gICAgICAgIGhlaWdodCA6ICc2NXZoJyxcclxuICAgICAgICBtYXJnaW4gOiB0aGVtZS5zcGFjaW5nKDQpLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvciA6ICdpbmhlcml0J1xyXG4gICAgfSxcclxuICAgIHRleHRQYXBlciA6IHtcclxuICAgICAgICBtaW5XaWR0aCA6IDM1MCxcclxuICAgICAgICB3aWR0aCA6ICc3MHZ3JyxcclxuICAgICAgICBhbGlnblNlbGYgOiAnY2VudGVyJyxcclxuICAgICAgICBqdXN0aWZ5Q29udGVudCA6ICdjZW50ZXInLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjonaW5oZXJpdCdcclxuICAgIH0sXHJcbiAgfSkpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSW50cm9kdWN0aW9uICgpIHtcclxuICAgIGNvbnN0IFtncm93LCBzZXRHcm93XSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtjdXJyZW50U2xpZGUsIHNldEN1cnJlbnRTbGlkZV0gPSBSZWFjdC51c2VTdGF0ZSgwKTtcclxuICAgIGNvbnN0IFtzdGVwcGVyLCBzZXRTdGVwcGVyXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gICAgY29uc3QgZG9tUmVmID0gUmVhY3QudXNlUmVmKCk7XHJcbiAgICBjb25zb2xlLmxvZyhgY3VycmVudFNsaWRlIDogJHtjdXJyZW50U2xpZGV9YClcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiBzZXRHcm93KGVudHJ5LmlzSW50ZXJzZWN0aW5nKSk7XHJcbiAgICAgICAgc2V0Q3VycmVudFNsaWRlKDApO1xyXG4gICAgICB9LHsgICAvLyBvcHRpb25zXHJcbiAgICAgICAgICByb290TWFyZ2luIDogJy03MHB4IDBweCdcclxuICAgICAgICB9KTtcclxuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb21SZWYuY3VycmVudCk7XHJcbiAgICAgIHJldHVybiAoKSA9PiBvYnNlcnZlci51bm9ic2VydmUoZG9tUmVmLmN1cnJlbnQpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICA8RmFkZSBpbj17Z3Jvd30gIHRpbWVvdXQ9e3tlbnRlcjozMDAwLCBleGl0OjgwMH19PlxyXG4gICAgICAgIDxCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9IHJlZj17ZG9tUmVmfT5cclxuICAgICAgICAgICAgPEdyb3cgaW49e2dyb3d9IFxyXG4gICAgICAgICAgICAgICAgICBzdHlsZT17eyB0cmFuc2Zvcm1PcmlnaW46ICc1MCUgMTAwJSd9fVxyXG4gICAgICAgICAgICAgICAgICB7Li4uKGdyb3cgPyB7IHRpbWVvdXQ6IHthcHBlYXIgOiAxNTAwICwgZW50ZXIgOiAxNTAwICwgZXhpdCA6IDEwMDB9IH0gOiB7fSl9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8UGFwZXIgZWxldmF0aW9uPXs0fSBjbGFzc05hbWU9e2NsYXNzZXMucGFwZXJ9ID5cclxuICAgICAgICAgICAgICAgICAgey8qIGltYWdlIGNhcm91c2VsICovfVxyXG4gICAgICAgICAgICAgICAgICA8SW1hZ2VDYXJvdXNlbCBcclxuICAgICAgICAgICAgICAgICAgbGlzdD17aW1hZ2VMaXN0fSBcclxuICAgICAgICAgICAgICAgICAgY3VycmVudFNsaWRlPXtjdXJyZW50U2xpZGV9IFxyXG4gICAgICAgICAgICAgICAgICBzZXRDdXJyZW50U2xpZGU9e3NldEN1cnJlbnRTbGlkZX0gXHJcbiAgICAgICAgICAgICAgICAgIHNldFN0ZXBwZXI9e3NldFN0ZXBwZXJ9IFxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9QYXBlcj5cclxuICAgICAgICAgICAgPC9Hcm93PlxyXG4gICAgICAgICAgICA8R3JvdyBpbj17Z3Jvd31cclxuICAgICAgICAgICAgICAgICBzdHlsZT17eyB0cmFuc2Zvcm1PcmlnaW46ICc1MCUgMTAwJSd9fVxyXG4gICAgICAgICAgICAgICAgIHsuLi4oZ3JvdyA/IHsgdGltZW91dDoge2FwcGVhciA6IDIwMDAgLCBlbnRlciA6IDE1MDAgLCBleGl0IDogMTAwMH19IDoge30pfVxyXG4gICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxQYXBlciBlbGV2YXRpb249ezR9IGNsYXNzTmFtZT17Y2xhc3Nlcy50ZXh0UGFwZXJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIHsvKiBsaXN0ICovfVxyXG4gICAgICAgICAgICAgICAgICAgIDxMaXN0Q3JvdXNlbERlc2NyaXB0aW9uIHN0ZXBwZXI9e3N0ZXBwZXJ9ID48L0xpc3RDcm91c2VsRGVzY3JpcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8L1BhcGVyPlxyXG4gICAgICAgICAgICA8L0dyb3c+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgPC9GYWRlPlxyXG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgKVxyXG59IiwiaW1wb3J0IENhcm91c2VsIGZyb20gJ251a2EtY2Fyb3VzZWwnO1xyXG5pbXBvcnQgeyBUeXBvZ3JhcGh5LCBCb3ggfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICB0ZXh0Q29udGFpbmVyIDoge1xyXG4gICAgICAgIHdpZHRoIDogJzEwMCUnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvciA6ICdpbmhlcml0JyxcclxuICAgICAgICBjb2xvciA6ICcjZmZmJyxcclxuICAgICAgICB0ZXh0U2hhZG93OicycHggMS41cHggMS41cHggZ3JheScsXHJcbiAgICAgICAgZGlzcGxheTonZmxleCcsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6J2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25JdGVtczonY2VudGVyJyxcclxuICAgICAgICBmbGV4RGlyZWN0aW9uIDogJ2NvbHVtbidcclxuICAgIH0sXHJcbn0pKTtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSW1hZ2VDYXJvdXNlbCAocHJvcHMpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuICAgIGNvbnN0IGltYWdlTGlzdCA9IHByb3BzLmxpc3QgPyBwcm9wcy5saXN0IDogW3t9XTtcclxuICAgIGNvbnN0IHtzZXRTdGVwcGVyLCBjdXJyZW50U2xpZGUsIHNldEN1cnJlbnRTbGlkZX0gPSBwcm9wcztcclxuICAgIGNvbnN0IGhhbmRsZUFmdGVyU2xpZGUgPSAoc2xpZGVJbmRleCkgPT4ge1xyXG4gICAgICAgIHNldFN0ZXBwZXIoc2xpZGVJbmRleCk7XHJcbiAgICAgICAgc2V0Q3VycmVudFNsaWRlKHNsaWRlSW5kZXgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgIDxDYXJvdXNlbFxyXG4gICAgc2xpZGVJbmRleD17Y3VycmVudFNsaWRlfVxyXG4gICAgYWZ0ZXJTbGlkZT0ge2luZGV4ID0+IGhhbmRsZUFmdGVyU2xpZGUoaW5kZXgpfVxyXG4gICAgYXV0b3BsYXk9e2ZhbHNlfVxyXG4gICAgYXV0b3BsYXlJbnRlcnZhbD17MzAwMH1cclxuICAgIHRyYW5zaXRpb25Nb2RlPSdzY3JvbGwnXHJcbiAgICBzcGVlZD17ODAwfVxyXG4gICAgaGVpZ2h0TW9kZT0nbWF4J1xyXG4gICAgICAgID5cclxuICAgIHtcclxuICAgICAgICBpbWFnZUxpc3QubWFwKChpbWFnZSxpbmRleCk9PntcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Qm94IHN0eWxlPXt7d2lkdGg6JzEwMCUnLCBoZWlnaHQ6JzEwMCUnfX0ga2V5PXtpbmRleH0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPiAwID8gKFxyXG4gICAgICAgICAgICAgICAgPEJveCBjbGFzc05hbWU9e2NsYXNzZXMudGV4dENvbnRhaW5lcn0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0naDMnIGNvbG9yPSdpbmhlcml0JyBzdHlsZT17e2ZvbnRXZWlnaHQ6J2JvbGRlcid9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2AjJHtpbmRleH0gJHtpbWFnZS5uYW1lfWB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgICAgICAgICAgICAgKSA6IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDxCb3ggc3R5bGU9e3toZWlnaHQ6JzEwMCUnfX0+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHsgaW5kZXg9PT0wPyBcclxuICAgICAgICAgICAgICAgICAgICAoPEJveCBjbGFzc05hbWU9e2NsYXNzZXMudGV4dENvbnRhaW5lcn0gc3R5bGU9e3toZWlnaHQ6JzEwMCUnLCBhbGlnbkl0ZW1zOidjZW50ZXInfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J2gzJyBjb2xvcj0naW5oZXJpdCcgc3R5bGU9e3tmb250V2VpZ2h0Oidib2xkZXInfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRVUlDSyBTVEFSVCBHVUlERVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9JycvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J2g2JyBjb2xvcj0naW5oZXJpdCcgc3R5bGU9e3tmb250V2VpZ2h0Oidib2xkJ319PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFrZSB5b3VyIHdvcmsgZWFzaWVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0nc3VidGl0bGUxJyBjb2xvcj0naW5oZXJpdCcgc3R5bGU9e3tmb250V2VpZ2h0Oidib2xkJ319PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVHVybiB0aGUgc2xpZGUgb3ZlciBhbmQgY2hlY2suXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0nc3VidGl0bGUxJyBjb2xvcj0naW5oZXJpdCcgc3R5bGU9e3tmb250V2VpZ2h0Oidib2xkJ319PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQgY29uc2lzdHMgb2YgYSBmZXcgc2xpZGVzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgIDwvQm94PilcclxuICAgICAgICAgICAgICAgICAgICA6IDxpbWcgc3JjPXtpbWFnZS5zcmN9Lz5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgICA8L0JveD5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIDwvQ2Fyb3VzZWw+XHJcbiAgICAgICAgKTtcclxufVxyXG5cclxuSW1hZ2VDYXJvdXNlbC5wcm9wVHlwZXMgPSB7XHJcbiAgICBzZXRTdGVwcGVyIDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcclxuICAgIGN1cnJlbnRTbGlkZSA6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcclxuICAgIHNldEN1cnJlbnRTbGlkZSA6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcclxufSIsImltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQge1R5cG9ncmFwaHkgLCBTdGVwcGVyLCBTdGVwLCBCb3gsIFN0ZXBMYWJlbH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xyXG5pbXBvcnQgc2xpZGVTb3VyY2UgZnJvbSAnLi9JbWFnZVNsaWRlU291cmNlcyc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcclxuICAgIHJvb3Q6IHtcclxuICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgZmxleERpcmVjdGlvbjoncm93JyxcclxuICAgICAgZm9udFdlaWdodCA6ICdib2xkZXInXHJcbiAgICB9LFxyXG4gICAgaW5saW5lOiB7XHJcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUnLFxyXG4gICAgfSxcclxuICB9KSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEZXNjcmlwdGlvbkxpc3QgKHtzdGVwcGVyfSkge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgICAgICAgPFN0ZXBwZXIgYWN0aXZlU3RlcD17c3RlcHBlcn0gb3JpZW50YXRpb249XCJob3Jpem9udGFsXCIgc3R5bGU9e3tiYWNrZ3JvdW5kQ29sb3I6J2luaGVyaXQnfX0+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVTb3VyY2UubWFwKChpdGVtLGluZGV4KT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U3RlcCBjb21wbGV0ZWQ9e2luZGV4IDwgc3RlcHBlcn0ga2V5PXtpbmRleH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3RlcExhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J2NhcHRpb24nIHN0eWxlPXt7Zm9udFdlaWdodDonYm9sZGVyJ319PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU3RlcExhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0ZXA+XHJcbiAgICAgICAgICAgICAgICAgICAgKX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDwvU3RlcHBlcj5cclxuICAgICAgICA8L0JveD5cclxuICAgICk7XHJcbn1cclxuRGVzY3JpcHRpb25MaXN0LnByb3BUeXBlcyA9IHtcclxuICAgIHN0ZXBwZXIgOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcclxufSIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJ3aGl0ZWJhY2tncm91bmQuZmIxNDBmNWU4MTBkYzIxNDZkYWQxYjZmMDNjYWY5YzguanBnXCI7IiwiXHJcbmltcG9ydCB7IFBhcGVyLCBCb3gsIEdyb3csIEF2YXRhciwgVHlwb2dyYXBoeSxGYWRlICwgU2xpZGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgbW9vbkltYWdlIGZyb20gJy4uL2ltYWdlcy9tb29uLnBuZyc7XHJcbmltcG9ydCBDcm9zc2xpbmUgZnJvbSAnLi9Dcm9zc2xpbmUnO1xyXG5pbXBvcnQgUHJvamVjdERlc2NyaXB0aW9uIGZyb20gJy4vRGVzY3JpcHRpb24nO1xyXG5pbXBvcnQgYmFja2dyb3VuZCBmcm9tICcuLi9pbWFnZXMvYmxhY2sucG5nJztcclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgZmxleERpcmVjdGlvbjonY29sdW1uJyxcclxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgICBhbGlnbkl0ZW1zOidjZW50ZXInLFxyXG4gICAgICBoZWlnaHQgOiAnMTAwdmgnLFxyXG4gICAgICB3aWR0aCA6ICcxMDB2dycsXHJcbiAgICAgIGJhY2tncm91bmRJbWFnZSA6IGB1cmwoJHtiYWNrZ3JvdW5kfSlgLFxyXG4gICAgICBiYWNrZ3JvdW5kU2l6ZSA6ICdjb3ZlcidcclxuICAgIH0sXHJcbiAgICBsb2dvQm94IDoge1xyXG4gICAgICBkaXNwbGF5IDogJ2ZsZXgnLFxyXG4gICAgICBqdXN0aWZ5Q29udGVudCA6ICdjZW50ZXInLFxyXG4gICAgICBhbGlnbkl0ZW1zIDogJ2NlbnRlcicsXHJcbiAgICAgIGZsZXhEaXJlY3Rpb24gOiAncm93J1xyXG4gICAgfSxcclxuICAgIGJpZ0F2YXRhciA6IHtcclxuICAgICAgd2lkdGggOiB0aGVtZS5zcGFjaW5nKDEyKSxcclxuICAgICAgaGVpZ2h0IDogdGhlbWUuc3BhY2luZygxMiksXHJcbiAgICB9LFxyXG4gICAgdGV4dFdpdGhTaGFkb3cgOiB7XHJcbiAgICAgIGNvbG9yOicjZmZmJyxcclxuICAgICAgZm9udFdlaWdodDonYm9sZGVyJyxcclxuICAgICAgZm9udFNpemU6JzRyZW0nLFxyXG4gICAgICBtYXJnaW5MZWZ0OicydncnLFxyXG4gICAgICB0ZXh0U2hhZG93OiAnMXB4IDVweCA1cHggIzllOTk5OSdcclxuICAgIH0sXHJcbiAgICBkZXNjcmlwdGlvbkJveCA6IHtcclxuICAgICAgZGlzcGxheTonZmxleCcsXHJcbiAgICAgIGNvbG9yOiAnI2ZmZicsXHJcbiAgICAgIGZsZXhEaXJlY3Rpb24gOiAnY29sdW1uJyxcclxuICAgICAganVzdGlmeUNvbnRlbnQgOiAnY2VudGVyJyxcclxuICAgICAgYWxpZ25JdGVtcyA6ICdjZW50ZXInLFxyXG4gICAgICBtYXhXaWR0aCA6ICc1MHZ3JyxcclxuICAgICAgbWFyZ2luIDogJzAgMCAwIDN2dydcclxuICAgIH0sXHJcbiAgfSkpO1xyXG5cclxuICBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbnRyb2R1Y3Rpb24gKCkge1xyXG4gICAgY29uc3QgW2dyb3csIHNldEdyb3ddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gICAgY29uc3QgZG9tUmVmID0gUmVhY3QudXNlUmVmKCk7XHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcclxuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4gc2V0R3JvdyhlbnRyeS5pc0ludGVyc2VjdGluZykpO1xyXG4gICAgICB9LHsgICAvLyBvcHRpb25zXHJcbiAgICAgICAgICByb290TWFyZ2luIDogJy03MHB4IDBweCdcclxuICAgICAgfSk7XHJcbiAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9tUmVmLmN1cnJlbnQpO1xyXG4gICAgICByZXR1cm4gKCkgPT4gb2JzZXJ2ZXIudW5vYnNlcnZlKGRvbVJlZi5jdXJyZW50KTtcclxuICAgIH0sIFtdKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICA8RmFkZSBpbj17Z3Jvd30gIHRpbWVvdXQ9e3tlbnRlcjoyMDAwLCBleGl0OjgwMH19PlxyXG4gICAgICAgIDxCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9IHJlZj17ZG9tUmVmfT5cclxuICAgICAgICA8Q3Jvc3NsaW5lPlxyXG4gICAgICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5sb2dvQm94fT5cclxuICAgICAgICAgICAgPEZhZGUgaW49e2dyb3d9IHsuLi4oZ3Jvdz8ge3RpbWVvdXQ6e2VudGVyOjUwMDAsIGV4aXQ6ODAwfX0gOiB7fSl9PlxyXG4gICAgICAgICAgICAgIDxBdmF0YXIgYWx0PSdoZWxwJyBzcmM9e21vb25JbWFnZX0gY2xhc3NOYW1lPXtjbGFzc2VzLmJpZ0F2YXRhcn0vPlxyXG4gICAgICAgICAgICA8L0ZhZGU+XHJcbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0nYnV0dG9uJyBjbGFzc05hbWU9e2NsYXNzZXMudGV4dFdpdGhTaGFkb3d9PiBNYW5hZ2VtZW50IEFwcCA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5kZXNjcmlwdGlvbkJveH0+XHJcbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0nc3VidGl0bGUyJz5BbiBhcHBsaWNhdGlvbiB0aGF0IHlvdSBjYW4gZWFzaWx5IGNyZWF0ZSAmIGRlc2lnbiB5b3VyIG93biBkYXRhLjwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSdzdWJ0aXRsZTInPkdldCBzdGFydGVkIHdpdGggeW91ciBHb29nbGUgYWNjb3VudCE8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0nc3VidGl0bGUyJz5UaGlzIGFwcCB3aWxsIG5vdCBrZWVwIGFueSBwZXJzb25hbCBpbmZvcm1hdGlvbi48L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgIDwvQ3Jvc3NsaW5lPlxyXG4gICAgICAgICAgPFByb2plY3REZXNjcmlwdGlvbi8+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgICAgPC9GYWRlPlxyXG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgKVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIm1vb24uZjIwNmJjM2Q1YmU4MzExYzc3ZDk4OTdkYTQ0ZTFmNjUucG5nXCI7IiwiaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XHJcbmltcG9ydCB7IEJveCAsIEZhZGUgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmVcIjtcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgcm9vdDoge1xyXG4gICAgICBtYXJnaW46MCxcclxuICAgICAgcGFkZGluZzonMXZ3JyxcclxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICBmbGV4V3JhcDogJ3dyYXAnLFxyXG4gICAgICB3aWR0aCA6ICcxMDAlJyxcclxuICAgICAganVzdGlmeUNvbnRlbnQgOiAnY2VudGVyJyxcclxuICAgICAgZmxleERpcmVjdGlvbiA6ICdjb2x1bW4nLFxyXG4gICAgICBhbGlnbkl0ZW1zIDogJ2NlbnRlcicsXHJcbiAgICAgIG1hcmdpbjonYXV0bycsXHJcbiAgICB9LFxyXG59KSk7XHJcblxyXG4gIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENyb3NzbGluZSh7Y2hpbGRyZW59KSB7XHJcbiAgICBjb25zdCBbZmFkZSwgc2V0RmFkZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcbiAgICBjb25zdCBkb21SZWYgPSBSZWFjdC51c2VSZWYoKTtcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiBzZXRGYWRlKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSk7XHJcbiAgICAgIH0seyAgIC8vIG9wdGlvbnNcclxuICAgICAgICAgIHJvb3RNYXJnaW4gOiAnLTUwcHggMHB4J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGRvbVJlZi5jdXJyZW50KTtcclxuICAgICAgcmV0dXJuICgpID0+IG9ic2VydmVyLnVub2JzZXJ2ZShkb21SZWYuY3VycmVudCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPEZhZGUgaW49e2ZhZGV9IHRpbWVvdXQ9e3tlbnRlcjoyMDAwLCBleGl0OjgwMH19PlxyXG4gICAgICAgIDxCb3ggY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9IGJveFNoYWRvdz17NH0gcmVmPXtkb21SZWZ9PlxyXG4gICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICAgIDwvRmFkZT5cclxuICAgIClcclxufSIsImltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgeyBHcm93LCBCb3gsIFR5cG9ncmFwaHl9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gICAgcm9vdCA6IHtcclxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbjoncm93JyxcclxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25JdGVtcyA6ICdmbGV4LXN0YXJ0JyxcclxuICAgICAgICB3aWR0aCA6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQgOiAnMzV2aCcsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yIDogJ2luaGVyaXQnXHJcbiAgICB9LFxyXG4gICAgaW5uZXJCb3ggOiB7XHJcbiAgICAgICAgZGlzcGxheSA6ICdmbGV4JyxcclxuICAgICAgICBmbGV4RGlyZWN0aW9uIDogJ2NvbHVtbicsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQgOiAnY2VudGVyJyxcclxuICAgICAgICBhbGlnbkl0ZW1zIDogJ2NlbnRlcicsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yIDogJ2luaGVyaXQnLFxyXG4gICAgICAgIHdpZHRoIDogJzMwdncnLFxyXG4gICAgICAgIGNvbG9yOicjZWFlYWVhJyxcclxuICAgICAgICB0ZXh0U2hhZG93OiAnMXB4IDVweCA1cHggIzllOTk5OSdcclxuICAgIH1cclxufSkpO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEZXNjcmlwdGlvbiAoKSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcbiAgICBjb25zdCBbZ3Jvdywgc2V0R3Jvd10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBkb21SZWYgPSBSZWFjdC51c2VSZWYoKTtcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICBzZXRHcm93KGVudHJ5LmlzSW50ZXJzZWN0aW5nKTtcclxuICAgICAgICB9IFxyXG4gICAgICApfSx7ICAgLy8gb3B0aW9uc1xyXG4gICAgICAgICAgcm9vdE1hcmdpbiA6ICcxNTBweCAwcHgnXHJcbiAgICAgIH0pO1xyXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGRvbVJlZi5jdXJyZW50KTtcclxuICAgICAgcmV0dXJuICgpID0+IG9ic2VydmVyLnVub2JzZXJ2ZShkb21SZWYuY3VycmVudCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICA8R3JvdyBpbj17Z3Jvd31cclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7IHRyYW5zZm9ybU9yaWdpbjogJzUwJSAxMDAlJyB9fVxyXG4gICAgICAgICAgICAgICAgey4uLihncm93ID8geyB0aW1lb3V0OiB7YXBwZWFyIDogMTUwMCAsIGVudGVyIDogMTUwMCAsIGV4aXQgOiAxMDAwfSB9IDoge30pfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgPEJveCBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0gcmVmPXtkb21SZWZ9PlxyXG4gICAgICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5pbm5lckJveH0+XHJcbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSdoNCcgc3R5bGU9e3tmb250V2VpZ2h0Oidib2xkZXInfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgU09NRSBURVhUXHJcbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgIDwvQm94PlxyXG4gICAgICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5pbm5lckJveH0+XHJcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J2g0JyBzdHlsZT17e2ZvbnRXZWlnaHQ6J2JvbGRlcid9fT5cclxuICAgICAgICAgICAgICAgICAgICBTT01FIFRFWFRcclxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICA8L0JveD5cclxuICAgICAgICA8L0JveD4gICAgICBcclxuICAgICAgICA8L0dyb3c+XHJcbiAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgKVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImJsYWNrLjNmMDJhMTMyNzM4NzAwMjI2Yzg0ZWQxZjU4NjNkNTlhLnBuZ1wiOyIsImltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgeyBUeXBvZ3JhcGh5LCBCb3ggfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmVcIjtcclxuaW1wb3J0IHsgRmFkZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xyXG5pbXBvcnQgU3RhcnRCdXR0b24gZnJvbSBcIi4vU3RhcnRCdXR0b25cIjtcclxuaW1wb3J0IGJhY2tncm91bmQgZnJvbSBcIi4uL2ltYWdlcy9kZXNrLmpwZ1wiO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIGZsZXhEaXJlY3Rpb246J2NvbHVtbicsXHJcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcclxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25Db250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgICAgaGVpZ2h0IDogJzEwMHZoJyxcclxuICAgICAgICB3aWR0aCA6ICcxMDAlJyxcclxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6YHVybCgke2JhY2tncm91bmR9KWAsXHJcbiAgICAgICAgYmFja2dyb3VuZFNpemUgOiAnY292ZXInLFxyXG4gICAgICAgIGNvbG9yIDogJ3doaXRlJ1xyXG4gICAgfSxcclxufSkpO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYWluICgpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuICAgIGNvbnN0IFtmYWRlLHNldEZhZGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgaXNGaXJzdFJlZiA9IFJlYWN0LnVzZVJlZih0cnVlKTtcclxuICAgIGNvbnN0IGRvbVJlZiA9IFJlYWN0LnVzZVJlZigpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XHJcbiAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiBzZXRGYWRlKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSk7XHJcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0UmVmLmN1cnJlbnQpIGlzRmlyc3RSZWYuY3VycmVudCA9IGZhbHNlO1xyXG4gICAgICAgIH0seyAgIC8vIG9wdGlvbnNcclxuICAgICAgICAgICAgcm9vdE1hcmdpbiA6ICctMzUwcHggMHB4J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGRvbVJlZi5jdXJyZW50KTtcclxuICAgICAgcmV0dXJuICgpID0+IG9ic2VydmVyLnVub2JzZXJ2ZShkb21SZWYuY3VycmVudCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgIDxGYWRlIGluPXtmYWRlfSB0aW1lb3V0PXt7ZW50ZXI6MTMwMCwgZXhpdDo4MDB9fT5cclxuICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fSByZWY9e2RvbVJlZn0+XHJcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J2gxJyBjb2xvcj0naW5oZXJpdCcgc3R5bGU9e3t0ZXh0U2hhZG93Oic1cHggMS41cHggMS41cHggZ3JheSd9fT5cclxuICAgICAgICAgICAgICAgIHtpc0ZpcnN0UmVmLmN1cnJlbnQgPyAnV0VMQ09NRScgOiAnUmVhZHkgdG8gc3RhcnQ/J31cclxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAge2lzRmlyc3RSZWYuY3VycmVudD8gbnVsbCA6ICg8U3RhcnRCdXR0b24vPil9XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICA8L0ZhZGU+XHJcbiAgICApXHJcbn0iLCJpbXBvcnQge0J1dHRvbiAsIEJveCwgVHlwb2dyYXBoeX0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnXHJcbmltcG9ydCB7bWFrZVN0eWxlc30gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ1xyXG5pbXBvcnQgeyBQbGF5QXJyb3dTaGFycCB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvaWNvbnNcIjtcclxuaW1wb3J0IHtMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuXHJcbmNvbnN0IHVzZVN0eWxlID0gbWFrZVN0eWxlcyh0aGVtZSA9PiAoe1xyXG4gICAgYnV0dG9uIDoge1xyXG4gICAgICAgIHdpZHRoIDogJ2ZpdC1jb250ZW50JyxcclxuICAgICAgICBtYXJnaW5Cb3R0b20gOiAnMC41dmgnXHJcbiAgICB9LFxyXG4gICAgdGV4dDoge1xyXG4gICAgICAgIC4uLnRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2luaGVyaXQnLFxyXG4gICAgICAgIHRleHRTaGFkb3cgOiAnMnB4IDFweCAxcHggZ3JheScsXHJcbiAgICAgICAgY29sb3IgOiAnaW5oZXJpdCdcclxuICAgIH0sXHJcbiAgICBpbm5lckJveCA6IHtcclxuICAgICAgICBtYXJnaW5Ub3AgOiAnMXZoJyxcclxuICAgICAgICBjb2xvcjond2hpdGUnXHJcbiAgICB9LFxyXG59KSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZSgpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5pbm5lckJveH0+XHJcbiAgICAgICAgICAgIDxMaW5rIHRvPScvbWFuYWdlbWVudCcgc3R5bGU9e3t0ZXh0RGVjb3JhdGlvbjonbm9uZScsIGNvbG9yOid3aGl0ZSd9fT5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gc2l6ZT0nbGFyZ2UnIGNvbG9yPSdzZWNvbmRhcnknIHZhcmlhbnQ9J2NvbnRhaW5lZCcgXHJcbiAgICAgICAgICAgICAgICBzdGFydEljb249ezxQbGF5QXJyb3dTaGFycCBjb2xvcj0naW5oZXJpdCcgc3R5bGU9e3tmb250U2l6ZSA6IDMwfX0vPn0gXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9ufT5cclxuICAgICAgICAgICAgICAgICAgICBHRVQgU1RBUlRFRFxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICA8L0JveD5cclxuICAgIClcclxufSIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkZXNrLjMyMDdjMWVmOTRjODY3ZjgwYjBlOWRmNmFjNzhkNTJiLmpwZ1wiOyIsImltcG9ydCB7VHlwb2dyYXBoeX0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcclxuaW1wb3J0IHsgQ29udGFpbmVyfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XHJcbmltcG9ydCB7IExpbmt9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcclxuaW1wb3J0IHdoaXRlQXJyb3cgZnJvbSAnLi4vaW1hZ2VzL3doaXRlLWFycm93LnBuZyc7XHJcbmltcG9ydCBhcnJvdyBmcm9tICcuLi9pbWFnZXMvYXJyb3cucG5nJztcclxuaW1wb3J0IHtCb3h9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcclxuaW1wb3J0IHtUb29sdGlwfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XHJcbmltcG9ydCBtYW5hZ2VtZW50QmFja2dyb3VuZCBmcm9tICcuLi9pbWFnZXMvbWFuYWdlbWVudC1iYWNrZ3JvdW5kLmpwZyc7XHJcbmZ1bmN0aW9uIENvcHlyaWdodCgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiPlxyXG4gICAgICAgIHsnQ29weXJpZ2h0IMKpICd9XHJcbiAgICAgICAgPExpbmsgY29sb3I9XCJpbmhlcml0XCIgaHJlZj1cIiNcIj5cclxuICAgICAgICAgIEphY2sncyBXZWJzaXRlXHJcbiAgICAgICAgPC9MaW5rPnsnICd9XHJcbiAgICAgICAge25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKX1cclxuICAgICAgICB7Jy4nfVxyXG4gICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcbiAgICAgIG1pbkhlaWdodDogJzIwdmgnLFxyXG4gICAgICBqdXN0aWZ5Q29udGVudDonY2VudGVyJyxcclxuICAgIH0sXHJcbiAgICBmb290ZXI6IHtcclxuICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygzLCAyKSxcclxuICAgICAgbWFyZ2luVG9wOiAnYXV0bycsXHJcbiAgICAgIGJhY2tncm91bmQgOiB0aGVtZS5wYWxldHRlLmdyZXlbMjAwXSxcclxuICAgICAgdGV4dEFsaWduOlwiY2VudGVyXCIsXHJcbiAgICAgIGNvbG9yIDogJ3doaXRlJ1xyXG4gICAgfSxcclxuICAgIGFycm93IDoge1xyXG4gICAgICB3aWR0aCA6ICc0dncnLFxyXG4gICAgICBoZWlnaHQgOiAnNHZ3JyxcclxuICAgICAgcGFkZGluZyA6ICczdncnLFxyXG4gICAgICBhbGlnblNlbGYgOiAnY2VudGVyJyxcclxuICAgICAgbWFyZ2luQm90dG9tOicydmgnLFxyXG4gICAgICBtYXJnaW5Ub3AgOiAnMnZoJyxcclxuICAgICAgYmFja2dyb3VuZFNpemU6J2NvbnRhaW4nLFxyXG4gICAgfSxcclxuICB9KSk7XHJcblxyXG4gIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0aWNreUZvb3Rlcihwcm9wcykge1xyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gICAgY29uc3Qge2xvY2F0aW9ufSA9IHByb3BzO1xyXG4gICAgY29uc29sZS5sb2coYGxvY2F0aW9uLnBhdGhuYW1lPyAke2xvY2F0aW9uLnBhdGhuYW1lfWApO1xyXG4gICAgY29uc3Qgc2Nyb2xsVG9Ub3AgPSAoKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyh7XHJcbiAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgIGJlaGF2aW9yOiBcInNtb290aFwiXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IChlKSA9PiB7XHJcbiAgICAgIGUudGFyZ2V0LnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcclxuICAgIH1cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgICB7bG9jYXRpb24ucGF0aG5hbWUgPT09ICcvZ3Vlc3Rib29rJz8gbnVsbCA6IChcclxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgPEJveCBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0gc3R5bGU9e1xyXG4gICAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID09PSAnLycgPyBcclxuICAgICAgICB7YmFja2dyb3VuZCA6IGBsaW5lYXItZ3JhZGllbnQoYmxhY2ssICNlZWVlZWUpYH0gXHJcbiAgICAgICAgOiBcclxuICAgICAgICB7YmFja2dyb3VuZEltYWdlIDogYHVybCgke21hbmFnZW1lbnRCYWNrZ3JvdW5kfSlgLCBiYWNrZ3JvdW5kU2l6ZSA6ICdhdXRvJywgdHJhbnNmb3JtOiBgc2NhbGVZKC0xKWB9fT5cclxuICAgICAgICA8VG9vbHRpcCB0aXRsZT1cIk1vdmUgdG8gVG9wXCIgYXJpYS1sYWJlbD1cIm1vdmUtdG8tdG9wXCIgcGxhY2VtZW50PVwidG9wXCIgZW50ZXJEZWxheT17MzUwfSBsZWF2ZURlbGF5PXsxNTB9PlxyXG4gICAgICAgICAgPEJveCBjbGFzc05hbWU9e2NsYXNzZXMuYXJyb3d9IHN0eWxlPXtcclxuICAgICAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID09PSAnLyc/IFxyXG4gICAgICAgICAge2JhY2tncm91bmQgOmBuby1yZXBlYXQgY2VudGVyLzgwJSB1cmwoJHt3aGl0ZUFycm93fSlgfVxyXG4gICAgICAgICAgOiBcclxuICAgICAgICAgIHtiYWNrZ3JvdW5kIDpgbm8tcmVwZWF0IGNlbnRlci84MCUgdXJsKCR7YXJyb3d9KWAsIHRyYW5zZm9ybTpgcm90YXRlKDE4MGRlZylgfX1cclxuICAgICAgICAgIG9uQ2xpY2s9e3Njcm9sbFRvVG9wfSBvbk1vdXNlT3Zlcj17KGUpPT50cmFuc2l0aW9uKGUpfS8+XHJcbiAgICAgICAgPC9Ub29sdGlwPlxyXG4gICAgICA8L0JveD5cclxuICAgICAgICA8Zm9vdGVyIGNsYXNzTmFtZT17Y2xhc3Nlcy5mb290ZXJ9PlxyXG4gICAgICAgICAgPENvbnRhaW5lciBtYXhXaWR0aD1cInNtXCI+XHJcbiAgICAgICAgICAgIDxDb3B5cmlnaHQgc3R5bGU9e3tmb250V2VpZ2h0IDogJ2JvbGRlcid9fS8+XHJcbiAgICAgICAgICA8L0NvbnRhaW5lcj5cclxuICAgICAgICA8L2Zvb3Rlcj5cclxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICl9XHJcbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICk7XHJcbiAgfSIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJ3aGl0ZS1hcnJvdy5jNDQyMmE3YmM1ZWUyM2QwODFiMzU2NmY5M2U5MWYxZi5wbmdcIjsiLCJpbXBvcnQgeyBCb3gsIFBhcGVyLFR5cG9ncmFwaHksIEJ1dHRvbiB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZVwiO1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuY29uc3QgdXNlU3R5bGUgPSBtYWtlU3R5bGVzKHRoZW1lID0+ICh7XHJcbiAgICByb290IDoge1xyXG4gICAgICAgIGRpc3BsYXkgOiAnZmxleCcsXHJcbiAgICAgICAgZmxleERpcmVjdGlvbiA6ICdjb2x1bW4nLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50IDogJ2NlbnRlcicsXHJcbiAgICAgICAgYWxpZ25JdGVtcyA6ICdjZW50ZXInLFxyXG4gICAgICAgIHdpZHRoIDogJzEwMHZ3JyxcclxuICAgICAgICBoZWlnaHQgOiAnMTAwdmgnXHJcbiAgICB9LFxyXG4gICAgcGFwZXIgOiB7XHJcbiAgICAgICAgZGlzcGxheSA6ICdmbGV4JyxcclxuICAgICAgICBmbGV4RGlyZWN0aW9uIDogJ2NvbHVtbicsXHJcbiAgICAgICAganVzdGlmeUNvbnRlbnQgOiAnY2VudGVyJyxcclxuICAgICAgICBhbGlnbkl0ZW1zIDogJ2NlbnRlcicsXHJcbiAgICAgICAgd2lkdGggOiAnODB2dycsXHJcbiAgICAgICAgLy8gaGVpZ2h0IDogJzUwdmgnLFxyXG4gICAgICAgIHBhZGRpbmcgOiAnNXZoJyxcclxuICAgICAgICBjb2xvciA6IHRoZW1lLnBhbGV0dGUuZ3JleVs1MDBdLFxyXG4gICAgICAgIGZvbnRXZWlnaHQgOiAnYm9sZGVyJ1xyXG4gICAgfSxcclxuICAgIHBhcGVyMiA6IHtcclxuICAgICAgICBkaXNwbGF5OidmbGV4JyxcclxuICAgICAgICBmbGV4RGlyZWN0aW9uOidjb2x1bW4nLFxyXG4gICAgICAgIGp1c3RpZnlDb250ZW50OidjZW50ZXInLFxyXG4gICAgICAgIGFsaWduSXRlbXM6J2ZsZXgtc3RhcnQnLFxyXG4gICAgICAgIG1hcmdpblRvcDonM3ZoJyxcclxuICAgICAgICBmb250V2VpZ2h0IDogJ2JvbGRlcidcclxuICAgIH0sXHJcbiAgICBidXR0b24gOiB7XHJcbiAgICAgICAgbWFyZ2luVG9wIDogJzV2aCcsXHJcbiAgICAgICAgZm9udFdlaWdodDonYm9sZGVyJ1xyXG4gICAgfVxyXG59KSk7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVycm9yRmFsbGJhY2sgKHtlcnJvciwgY29tcG9uZW50U3RhY2ssIHJlc2V0RXJyb3JCb3VuZGFyeX0pIHtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZSgpO1xyXG4gICAgY29uc3QgW3NlY29uZCAsIHNldFNlY29uZF0gPSBSZWFjdC51c2VTdGF0ZSgzMCk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpPT57XHJcbiAgICAgICAgaWYgKHNlY29uZCA8PSAwKSBsb2NhdGlvbi5yZXBsYWNlKGxvY2F0aW9uLm9yaWdpbik7XHJcbiAgICAgICAgY29uc29sZS5sb2coYHNlY29uZCA6ICAke3NlY29uZH1gKTtcclxuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpPT57XHJcbiAgICAgICAgICAgIHNldFNlY29uZChzZWNvbmQtMSk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gICAgfSxbc2Vjb25kXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Qm94IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT17Y2xhc3Nlcy5wYXBlcn0+XHJcbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSdoNSc+IHtgRVJST1IgOiAke2Vycm9yLm1lc3NhZ2V9YH0gPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0naDMnPiB7YFdpbGwgZ28gYmFjayB0byB0aGUgSE9NRWB9ICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSdoMic+IHtgaW4gJHtzZWNvbmR9IHNlY29uZHMuYH0gIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPXtjbGFzc2VzLmJ1dHRvbn0gdmFyaWFudD0nb3V0bGluZWQnIGNvbG9yPSdzZWNvbmRhcnknIHNpemU9J2xhcmdlJyBvbkNsaWNrPXtyZXNldEVycm9yQm91bmRhcnl9PiBcclxuICAgICAgICAgICAgICAgICAgICBSZXR1cm4gdG8gSG9tZSBOb3cgXHJcbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxQYXBlciBjbGFzc05hbWU9e2NsYXNzZXMucGFwZXIyfSBlbGV2YXRpb249ezB9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J3N1YnRpdGxlMSc+IHtgUGxlYXNlIGNoZWNrIGJlbG93LmB9ICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0nc3VidGl0bGUyJz4ge2AxLiBMb2dpbiB0aW1lb3V0IC0gTG9naW4gUmV0ZW50aW9uIFRpbWU6IDIgaG91cnNgfSAgPC9UeXBvZ3JhcGh5PlxyXG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J3N1YnRpdGxlMic+IHtgMi4gSW52YWxpZCBSZXF1ZXN0YH0gIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgICAgICAgIDwvUGFwZXI+XHJcbiAgICAgICAgICAgIDwvUGFwZXI+XHJcbiAgICAgICAgPC9Cb3g+XHJcbiAgICApXHJcbn1cclxuXHJcbkVycm9yRmFsbGJhY2sucHJvcFR5cGVzID0ge1xyXG4gICAgcmVzZXRFcnJvckJvdW5kYXJ5IDogUHJvcFR5cGVzLFxyXG59IiwiaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IEFwcCBmcm9tICcuL2FwcC5qcydcclxuaW1wb3J0IHsgQ29va2llc1Byb3ZpZGVyIH0gZnJvbSAncmVhY3QtY29va2llJztcclxuXHJcblJlYWN0RE9NLnJlbmRlcihcclxuICAgICg8Q29va2llc1Byb3ZpZGVyPlxyXG4gICAgICAgIDxBcHAvPlxyXG4gICAgPC9Db29raWVzUHJvdmlkZXI+KVxyXG4gICAgLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpOyIsImltcG9ydCB7IFNuYWNrYmFyIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlXCI7XHJcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSBcIkBtYXRlcmlhbC11aS9sYWJcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEN1c3RvbVNuYWNrYmFyICh7b3Blbiwgb25DbG9zZSwgY29udGVudCwgc3RhdHVzLCBkaXJlY3Rpb259KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxTbmFja2JhclxyXG4gICAgICAgIG9wZW49e29wZW59XHJcbiAgICAgICAgb25DbG9zZT17b25DbG9zZX1cclxuICAgICAgICBhbmNob3JPcmlnaW49e2RpcmVjdGlvbj8gZGlyZWN0aW9uIDogeyB2ZXJ0aWNhbDondG9wJywgaG9yaXpvbnRhbDonY2VudGVyJyB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPEFsZXJ0IG9uQ2xvc2U9e29uQ2xvc2V9IHNldmVyaXR5PXtzdGF0dXN9XHJcbiAgICAgICAgICAgICB2YXJpYW50PSdmaWxsZWQnIG1lc3NhZ2U9e3tmb250V2VpZ2h0Oidib2xkZXInLCBmb250U2l6ZTonNXJlbSd9fT5cclxuICAgICAgICAgICAgICAgIHtjb250ZW50fVxyXG4gICAgICAgICAgICA8L0FsZXJ0PlxyXG4gICAgICAgIDwvU25hY2tiYXI+XHJcbiAgICApXHJcbn1cclxuXHJcbkN1c3RvbVNuYWNrYmFyLnByb3BUeXBlcyA9IHtcclxuICAgIG9wZW4gOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxyXG4gICAgb25DbG9zZSA6IFByb3BUeXBlcy5mdW5jLFxyXG4gICAgY29udGVudCA6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgICBzdGF0dXMgOiBQcm9wVHlwZXMub25lT2YoWydlcnJvcicsJ3N1Y2Nlc3MnXSksXHJcbiAgICBkaXJlY3Rpb24gOiBQcm9wVHlwZXMub2JqZWN0LFxyXG59IiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgc2VydmVyVVJMIGZyb20gJy4vc2VydmVyVVJMJztcclxuXHJcbi8vIO2FjOydtOu4lCDrjbDsnbTthLAg67Cb7JWE7Jik6riwIGNvb2tpZeyXkCDri7TquLQgdG9rZW7sgqzsmqlcclxuZXhwb3J0IGNvbnN0IGdldE1hbmFnZW1lbnRUYWJsZSA9ICAoKSA9PiB7XHJcbiAgICByZXR1cm4gKGF4aW9zLmdldChgJHtzZXJ2ZXJVUkx9L21hbmFnZW1lbnRgLHtcclxuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6dHJ1ZVxyXG4gICAgfSkpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2F2ZUhlYWRlcnMgPSAoaGVhZGVycywgZ3JvdXBpbmdzKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgc2F2aW5nIGhlYWRlcnMgOiBcclxuICAgIGhlYWRlcnMgOiAke0pTT04uc3RyaW5naWZ5KGhlYWRlcnMpfVxyXG4gICAgZ3JvdXBpbmdzIDogJHtKU09OLnN0cmluZ2lmeShncm91cGluZ3MpfWApO1xyXG4gICAgcmV0dXJuIChheGlvcy5wdXQoYCR7c2VydmVyVVJMfS9oZWFkZXJzYCwge1xyXG4gICAgICAgIC8vIGRhdGFcclxuICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgIGdyb3VwaW5nc1xyXG4gICAgfSx7d2l0aENyZWRlbnRpYWxzOnRydWV9KS50aGVuKHJlcyA9PiBQcm9taXNlLnJlc29sdmUocmVzLmRhdGEpKSk7ICAgIC8vIOy/oO2CpOyZgCDtlajqu5hcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNhdmVEYXRhID0gKGhlYWRlcnMsIGdyb3VwaW5ncywgZGF0YSkgPT4ge1xyXG4gICAgcmV0dXJuIChheGlvcy5wdXQoYCR7c2VydmVyVVJMfS9kYXRhYCwge1xyXG4gICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgZ3JvdXBpbmdzLFxyXG4gICAgICAgIGRhdGFcclxuICAgIH0se3dpdGhDcmVkZW50aWFsczp0cnVlfSkudGhlbihyZXMgPT4ge1xyXG4gICAgICAgIGlmIChyZXMuc3RhdHVzID09PSA0MDApIHJldHVybiBQcm9taXNlLnJlamVjdCg0MDApO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzLmRhdGEpXHJcbiAgICB9KSk7XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBcImh0dHBzOi8vbWFuYWdlbWVudC1hcHBsZS5oZXJva3VhcHAuY29tXCI7XHJcbi8vIGV4cG9ydCBkZWZhdWx0IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCI7IiwiIGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFN3aXRjaCwgUm91dGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgTmF2IGZyb20gXCIuL25hdi9OYXZcIjtcclxuaW1wb3J0IEd1ZXN0Ym9vayBmcm9tIFwiLi9ndWVzdGJvb2svR3Vlc3Rib29rXCI7XHJcbmltcG9ydCBNYW5hZ2VtZW50IGZyb20gXCIuL21hbmFnZW1lbnQvTWFuYWdlbWVudFwiO1xyXG5pbXBvcnQgSGVhZGVycyBmcm9tICcuL21hbmFnZW1lbnQvSGVhZGVycyc7XHJcbmltcG9ydCB7Q3NzQmFzZWxpbmV9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlJztcclxuaW1wb3J0IEhvbWUgZnJvbSBcIi4vaG9tZS9Ib21lXCI7XHJcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vc3JjL2Zvb3Rlci9Gb290ZXInO1xyXG5pbXBvcnQgcXMgZnJvbSAncXMnO1xyXG5pbXBvcnQge3VzZUNvb2tpZXN9IGZyb20gJ3JlYWN0LWNvb2tpZSc7XHJcbmltcG9ydCB7IGdldFRva2VuQW5kUHJvZmlsZSB9IGZyb20gXCIuL3V0aWwvTG9naW5BUElcIjtcclxuaW1wb3J0IEN1c3RvbVNuYWNrYmFyIGZyb20gJy4vY3VzdG9tSG9vay9TbmFja0Jhcic7XHJcbmltcG9ydCBFcnJvckZhbGxiYWNrIGZyb20gJy4vY3VzdG9tSG9vay9FcnJvckZhbGxiYWNrJztcclxuaW1wb3J0IHsgRXJyb3JCb3VuZGFyeSB9IGZyb20gXCJyZWFjdC1lcnJvci1ib3VuZGFyeVwiO1xyXG5cclxuLy8g7Luo7YWN7Iqk7Yq4IOuqqeuhnVxyXG5leHBvcnQgY29uc3QgVXNlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XHJcbmV4cG9ydCBjb25zdCBMb2dvdXRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xyXG5leHBvcnQgY29uc3QgUHJvZ3Jlc3NDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xyXG5leHBvcnQgY29uc3QgR2xvYmFsU25hY2tiYXJDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKCkge1xyXG4gICAgY29uc3QgeyBpZF90b2tlbiB9ID0gcXMucGFyc2Uod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcclxuICAgIGNvbnN0IFsgY29va2llcyAsIHNldENvb2tpZSAsIHJlbW92ZUNvb2tpZSBdID0gdXNlQ29va2llcyAoWydwcm9maWxlJ10pO1xyXG4gICAgY29uc3QgWyBwcm9maWxlICwgc2V0UHJvZmlsZSBdID0gUmVhY3QudXNlU3RhdGUoY29va2llcy5wcm9maWxlKTtcclxuICAgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbZ2xvYmFsU25hY2tiYXIsIHNldEdsb2JhbFNuYWNrYmFyXSA9IFJlYWN0LnVzZVN0YXRlKHtvcGVuIDogZmFsc2UgLCByZXN1bHQ6ICdzdWNjZXNzJ30pXHJcbiAgICBjb25zdCBwcm9ncmVzc1JlZiA9IFJlYWN0LnVzZVJlZigwKTtcclxuICAgIGNvbnN0IGhhbmRsZUJlZm9yZXVubG9hZCA9IChyZXN1bHQpID0+IHtcclxuICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgcHJvZ3Jlc3MgOiAke3Byb2dyZXNzUmVmLmN1cnJlbnR9YCk7XHJcbiAgICAgICAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcclxuICAgICAgICAgICAgcHJvZ3Jlc3NSZWYuY3VycmVudCA9IChwcm9ncmVzc1JlZi5jdXJyZW50IDwgMTAwID8gcHJvZ3Jlc3NSZWYuY3VycmVudCArIDIwIDogMTAwKTtcclxuICAgICAgICBpZiAocHJvZ3Jlc3NSZWYuY3VycmVudCA9PT0gMTAwKSB7XHJcbiAgICAgICAgICAgICBwcm9ncmVzc1JlZi5jdXJyZW50ID0gMDtcclxuICAgICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgICAgICBzZXRHbG9iYWxTbmFja2Jhcih7b3Blbjp0cnVlICwgcmVzdWx0OnJlc3VsdH0pO1xyXG4gICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwyMDApXHJcbiAgICB9XHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCk9PntcclxuICAgICAgICBpZihpZF90b2tlbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZmV0Y2ggQVBJIOyLpO2WiScpO1xyXG4gICAgICAgICAgICBnZXRUb2tlbkFuZFByb2ZpbGUoaWRfdG9rZW4pLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgcmVzcG9uc2UgZGF0YSA6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7bmFtZSAsZW1haWwsIHBpY3R1cmV9ID0gZGF0YTtcclxuICAgICAgICAgICAgICAgIHNldENvb2tpZShcInByb2ZpbGVcIix7bmFtZSAsIGVtYWlsLCBwaWN0dXJlfSx7cGF0aDpcIi9cIiAsIG1heEFnZSA6IDcyMDB9KTsgIC8vIG1heEFnZSA6IDLsi5zqsIRcclxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTG9naW4gRmFpbGVkLiBQbGVhc2UgYXV0aG9yaXplIHRoZSB1c2Ugb2YgY29va2llcyBpbiB5b3VyIGJyb3dzZXIuJyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSxbaWRfdG9rZW5dKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCk9PntcclxuICAgICAgICBpZiAoY29va2llcy5wcm9maWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBjb29raWVzLnByb2ZpbGUgOiAke0pTT04uc3RyaW5naWZ5KGNvb2tpZXMucHJvZmlsZSl9YCk7XHJcbiAgICAgICAgICAgIHNldFByb2ZpbGUoY29va2llcy5wcm9maWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFtjb29raWVzLnByb2ZpbGVdKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICA8RXJyb3JCb3VuZGFyeVxyXG4gICAgICAgICAgICBGYWxsYmFja0NvbXBvbmVudD17RXJyb3JGYWxsYmFja31cclxuICAgICAgICAgICAgb25FcnJvcj17KGVycm9yLCBjb21wb25lbnRTdGFjayk9PntcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBlcnJvciA6ICR7ZXJyb3J9XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRTdGFjayA6ICR7Y29tcG9uZW50U3RhY2t9YCk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIG9uUmVzZXQ9eygpPT5sb2NhdGlvbi5yZXBsYWNlKGxvY2F0aW9uLm9yaWdpbil9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgPFVzZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwcm9maWxlIHx8IHtuYW1lIDogJyd9fT4gICAgICAgICAgey8qIOycoOyggCDtlITroZztlYQg7Luo7YWN7Iqk7Yq4ICAgICovfVxyXG4gICAgICAgICAgICA8TG9nb3V0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17c2V0UHJvZmlsZX0+ICAgey8qIOuhnOq3uOyVhOybgyDsnbTrsqTtirgg7Luo7YWN7Iqk7Yq4ICAgKi99XHJcbiAgICAgICAgICAgIDxQcm9ncmVzc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9eyhyZXN1bHQpPT5oYW5kbGVCZWZvcmV1bmxvYWQocmVzdWx0KX0+ICB7Lyog66Gc65SpIOy7qO2FjeyKpO2KuCAgICovfVxyXG4gICAgICAgICAgICA8R2xvYmFsU25hY2tiYXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzZXRHbG9iYWxTbmFja2Jhcn0+ICB7Lyog7JeQ65+sIOyKpOuCteuwlCDsu6jthY3siqTtirggICAqL31cclxuICAgICAgICAgICAgICAgIDxDc3NCYXNlbGluZS8+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJyb3dzZXJSb3V0ZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPE5hdi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFN3aXRjaD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy8nIHJlbmRlcj17KCk9PjxIb21lIGlzTG9hZGluZz17aXNMb2FkaW5nfS8+fT48L1JvdXRlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nL2d1ZXN0Ym9vaycgcmVuZGVyPXsoKT0+PEd1ZXN0Ym9vayBpc0xvYWRpbmc9e2lzTG9hZGluZ30vPn0+PC9Sb3V0ZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9tYW5hZ2VtZW50JyByZW5kZXI9eygpPT4gPE1hbmFnZW1lbnQgaXNMb2FkaW5nPXtpc0xvYWRpbmd9Lz59PjwvUm91dGU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPScvaGVhZGVycycgcmVuZGVyPXsoKT0+IDxIZWFkZXJzIGlzTG9hZGluZz17aXNMb2FkaW5nfS8+fT48L1JvdXRlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nLycgcmVuZGVyPXsocHJvcHMpPT48Rm9vdGVyIHsuLi5wcm9wc30vPn0+PC9Sb3V0ZT5cclxuICAgICAgICAgICAgICAgICAgICA8L0Jyb3dzZXJSb3V0ZXI+XHJcbiAgICAgICAgICAgIDwvR2xvYmFsU25hY2tiYXJDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgICAgICA8L1Byb2dyZXNzQ29udGV4dC5Qcm92aWRlcj5cclxuICAgICAgICAgICAgPC9Mb2dvdXRDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgICAgICA8L1VzZXJDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgICAgICAgICAgICAgPEN1c3RvbVNuYWNrYmFyIG9wZW49e2dsb2JhbFNuYWNrYmFyLm9wZW59IG9uQ2xvc2U9eygpPT5zZXRHbG9iYWxTbmFja2Jhcih7b3BlbjpmYWxzZX0pfSBcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ9e2dsb2JhbFNuYWNrYmFyLnJlc3VsdD09PSdlcnJvcic/IGBOb3Qgc2F2ZWQuXHJcbiAgICAgICAgICAgICAgICBSZWFzb24gOiBJbnZhbGlkIGlucHV0LmAgOicgU0FWRUQgJ30gc3RhdHVzPXtnbG9iYWxTbmFja2Jhci5yZXN1bHR9XHJcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb249e3t2ZXJ0aWNhbDondG9wJywgaG9yaXpvbnRhbDoncmlnaHQnfX0vPlxyXG4gICAgICAgICAgICA8L0Vycm9yQm91bmRhcnk+XHJcbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgIClcclxufSJdLCJzb3VyY2VSb290IjoiIn0=