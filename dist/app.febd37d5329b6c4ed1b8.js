!function(e){function t(t){for(var r,i,c=t[0],l=t[1],u=t[2],f=0,m=[];f<c.length;f++)i=c[f],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&m.push(o[i][0]),o[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(s&&s(t);m.length;)m.shift()();return a.push.apply(a,u||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],r=!0,c=1;c<n.length;c++){var l=n[c];0!==o[l]&&(r=!1)}r&&(a.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},o={0:0},a=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var s=l;a.push([385,1,2]),n()}({117:function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return b})),n.d(t,"a",(function(){return g})),n.d(t,"c",(function(){return v}));var r=n(151),o=n(27),a=n(352),i=n(360),c=n(361),l=n(503),u=n(369),s=n(375),f=n(197),m=n.n(f),p=n(260),d=n.n(p);function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return y(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var b=e.createContext(),g=e.createContext();function v(){var t=h(e.useState(),2),n=t[0],f=t[1],p=m.a.parse(window.location.hash.substr(1)).id_token,y=localStorage.getItem("token");return e.useEffect((function(){if(p){console.log("idToken 있음"),localStorage.setItem("token",p);var e=d()(p);e.email,e.name,e.picture}else if(y){console.log("localToken 있음");var t=d()(y),n=t.email,r=t.name,o=t.picture;f({name:r,email:n,picture:o})}}),[p,y]),e.createElement(e.Fragment,null,e.createElement(b.Provider,{value:n},"          ",e.createElement(g.Provider,{value:f},"   ",e.createElement(l.a,null),e.createElement(r.a,null,e.createElement(a.a,null),e.createElement(o.c,null,e.createElement(o.a,{exact:!0,path:"/",component:u.a}),e.createElement(o.a,{path:"/board",component:i.a}),e.createElement(o.a,{path:"/management",component:c.a}))),e.createElement(s.a,null))))}}).call(this,n(0))},198:function(e,t,n){"use strict";(function(e){var r=n(359),o=n.n(r),a=n(199),i=n(131),c=n(200),l=n(58),u=n(4),s=n(117),f=Object(l.a)((function(e){return{logout:{justifyContent:"flex-end",padding:"2px",margin:0,width:"auto"}}})),m=Object(u.a)((function(e){return{tooltip:{backgroundColor:e.palette.common.white,color:"rgba(0, 0, 0, 0.87)",boxShadow:e.shadows[2],fontSize:14,fontWeight:"bold"}}}))(a.a);t.a=function(){var t=f();e.useContext(s.a);return e.createElement(e.Fragment,null,e.createElement(i.a,{className:t.logout},e.createElement(m,{title:"Log-out"},e.createElement(c.a,{style:{padding:4},onClick:function(){return console.log("clicked")}},e.createElement(o.a,null)))))}}).call(this,n(0))},352:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return E}));var r=n(151),o=n(59),a=n(152),i=n(157),c=n(58),l=n(379),u=n(493),s=n(251),f=n(353),m=n(354),p=n(117),d=n(198);function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var w=Object(c.a)((function(e){return{root:{flexGrow:1,alignItems:"flex-start",paddingTop:18,paddingBottom:18},left:{flexGrow:1,paddingLeft:30,justify:"flex-start"},center:{flexGrow:1},right:{display:"flex",paddingRight:45,justify:"flex-end",flexDirection:"row",padding:"0 ".concat(e.spacing(3))}}}));function E(t){var n=g(e.useState({menu:!1}),2),c=n[0],h=n[1],v=w(),E=function(e,t){return function(n){("keydown"!==n.type||"Tab"!==n.key&&"Shift"!==n.key)&&h(y(y({},c),{},b({},e,t)))}},O=e.useContext(p.b),x=O?"MYPAGE":"LOGIN",j=O?e.createElement(d.a,null):null;return e.createElement(e.Fragment,null,e.createElement(f.a,t,e.createElement(u.a,{color:"inherit",style:{boxShadow:"none"}},e.createElement(s.a,null,e.createElement(i.a,{container:!0,spacing:2},e.createElement(i.a,{container:!0,className:v.root},e.createElement(i.a,{item:!0,spacing:2,className:v.left},e.createElement(r.b,{to:"/",exact:!0,style:{textDecoration:"none"}},e.createElement(a.a,{variant:"outlined"}," Home ")),["board","management"].map((function(t){return e.createElement(r.b,{to:"/".concat(t),style:{textDecoration:"none"}},e.createElement(a.a,{variant:"outlined"}," ",t," "))}))),e.createElement(i.a,{item:!0,className:v.center},e.createElement("span",null)),e.createElement(i.a,{item:!0,className:v.right},e.createElement(a.a,{variant:"outlined",color:"primary",onClick:E(x,!0),style:{marginRight:"5px"}},x),j,e.createElement(o.a,{anchor:x,open:c[x],onClose:E(x,!1)},Object(m.a)(y(y({},t),{},{anchor:x,toggleDrawer:E,profile:O}))))),e.createElement(l.a,null))))))}}).call(this,n(0))},353:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a}));var r=n(487),o=n(377);function a(t){var n=t.children,a=t.window,i=Object(r.a)({target:a?a():void 0});return e.createElement(o.a,{appear:!1,direction:"down",in:!i},n)}}).call(this,n(0))},354:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return y}));var r=n(262),o=n(129),a=n(131),i=n(492),c=n(510),l=n(379),u=n(53),s=n(58),f=n(355),m=n(356),p=n(357),d=n(198),h=Object(s.a)((function(e){return{list:{width:"22vw",display:"flex",justifyContent:"center",flexDirection:"column"},listItem:{width:"100%",height:"100%",padding:"1.3vh 1.5vw"},listItemText:{textAlign:"center",color:"#838282",marginBottom:"30px"},largeAvatar:{width:e.spacing(9),height:e.spacing(9)},inline:{display:"inline"},listText:{color:"#838282",textAlign:"center"}}}));function y(t){var n=t.anchor,s=t.toggleDrawer,y=t.profile,b=h();var g=!!y;return console.log("profile : ".concat(JSON.stringify(y))),e.createElement("div",{className:b.list,role:"presentation",onClick:s(n,!1),onKeyDown:s(n,!1)},e.createElement(r.a,null,e.createElement(o.a,{primary:g?"PROFILE":"LOGIN MENU",className:b.listItemText}),g?e.createElement(e.Fragment,null,e.createElement(a.a,{alignItems:"center",className:b.listItem},e.createElement(i.a,null,e.createElement(c.a,{src:y.picture,className:b.largeAvatar,alt:y.name})),e.createElement(o.a,{primary:y.name,className:b.listText}),e.createElement("br",null)),e.createElement(l.a,{variant:"inset",component:"li"}),e.createElement(a.a,{className:b.listItem,divider:!0},e.createElement(o.a,{primary:"EMAIL : ",secondary:e.createElement(e.Fragment,null,e.createElement(u.a,{component:"span",variant:"body2",color:"textPrimary",className:b.inline},y.email))}))):e.createElement(a.a,{button:!0,className:b.listItem,onClick:function(){return e=p.a,void window.location.assign(e);var e}},e.createElement(f.a,{signIn:m.a})),e.createElement(d.a,{className:b.listItem})))}}).call(this,n(0))},355:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return i}));var r=n(58),o=n(73),a=Object(r.a)((function(e){return{button:{width:"100%",height:"100%"}}}));function i(t){var n=a(),r=t.signIn;return e.createElement(o.a,{component:"span"},e.createElement("img",{src:r,className:n.button}))}}).call(this,n(0))},356:function(e,t,n){"use strict";t.a=n.p+"googleSignin.1ce1aaa5a127fa3e492a12bb62f99304.png"},357:function(e,t,n){"use strict";var r=n(197),o=n.n(r).a.stringify({client_id:"1029543737304-qpf4g96mg3qchkgefigjt3rj5rkqmlog.apps.googleusercontent.com",redirect_uri:"http://localhost:5000",response_type:"token id_token",scope:"openid profile email",nonce:Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)});t.a="https://accounts.google.com/o/oauth2/v2/auth?"+o},360:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return o}));var r=n(381);function o(){return e.createElement(r.a,{fixed:!0},e.createElement("div",null,"Board"))}}).call(this,n(0))},361:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return y}));var r=n(362),o=n.n(r),a=n(73),i=n(507),c=n(509),l=n(368);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||d(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||d(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){if(e){if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function y(){var t=p(e.useState({open:!1}),2),n=t[0],r=t[1],u=p(e.useState({open:!1}),2),f=u[0],d=u[1];e.useEffect((function(){setTimeout((function(){r({open:!0})}),500)}),[]),e.useEffect((function(){var e=function(){return d({open:!f.open})};return window.addEventListener("dblclick",e),function(){window.removeEventListener("dblclick",e)}}),[]);var h=p(e.useState({columns:[{title:"Name",field:"name",grouping:!1},{title:"Surname",field:"surname"},{title:"Birth Year",field:"birthYear"},{title:"Phone",field:"phone",grouping:!1},{title:"Gender",field:"gender",lookup:{1:"Male",2:"Female"}},{title:"Memo",field:"memo"}],data:[{name:"Mehmet",surname:"Baran",birthYear:1983,phone:"01046509995",gender:1,memo:""},{name:"Adam",surname:"Adam",birthYear:1984,phone:"01046509795",gender:2,memo:""},{name:"Mehmet",surname:"Atom",birthYear:1985,phone:"01046509695",gender:1,memo:""},{name:"mul",surname:"Kongna",birthYear:1986,phone:"01046509195",gender:1,memo:""},{name:"Jack",surname:"Jack",birthYear:1987,phone:"01046509295",gender:2,memo:""},{name:"Bob",surname:"Bob",birthYear:1988,phone:"01046509395",gender:2,memo:""},{name:"Mehmet",surname:"Bill",birthYear:1989,phone:"01046509495",gender:1,memo:""},{name:"Johnson",surname:"Johnson",birthYear:1990,phone:"01046509895",gender:2,memo:""}]}),2),y=h[0],b=h[1],g=function(){return e.createElement(a.a,{style:{height:"100px"}})},v=function(e,t){r({open:!1})};return e.createElement(a.a,null,e.createElement(l.a,{open:f.open,onClose:function(){d({open:!1})}}),e.createElement(g,null),e.createElement(o.a,{title:"Management App",columns:y.columns,data:y.data,localization:{pagination:{labelDisplayedRows:"{count} rows | {from}-{to}"},toolbar:{nRowsSelected:"{0} row(s) selected"},header:{actions:"Edit"},body:{emptyDataSourceMessage:"No record to display.. Click the [+] button on the right-top"}},options:{exportButton:!0,grouping:!0,selection:!0,headerStyle:{fontWeight:"bolder"},actionsColumnIndex:-1,columnsButton:!0,debounceInterval:160,pageSize:20,pageSizeOptions:[5,10,20,50,100]},actions:[{tooltip:"Remove All Selected Users",icon:"delete",onClick:function(e,t){var n=m(y.data);t.forEach((function(e){n.splice(n.indexOf(e),1)})),b((function(e){return s(s({},e),{},{data:n})}))}}],editable:{onRowAdd:function(e){return new Promise((function(t){setTimeout((function(){t(),b((function(t){var n=m(t.data);return n.push(e),s(s({},t),{},{data:n})}))}),600)}))},onRowUpdate:function(e,t){return new Promise((function(n){setTimeout((function(){n(),t&&b((function(n){var r=m(n.data);return r[r.indexOf(t)]=e,s(s({},n),{},{data:r})}))}),600)}))}}}),e.createElement(g,null),e.createElement(i.a,{open:n.open,onClose:v,anchorOrigin:{vertical:"top",horizontal:"center"}},e.createElement(c.a,{onClose:v,severity:"success",variant:"filled",message:{fontWeight:"bolder",fontSize:"5rem"}},"need some help? ? double-click any space !")))}}).call(this,n(0))},368:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(58),o=n(501),a=n(504),i=n(262),c=n(131),l=n(73),u=n(129),s=Object(r.a)((function(e){}));function f(t){var n=s(),r=t.open,f=t.onClose;return e.createElement(o.a,{onClose:f,open:r},e.createElement(a.a,null," BASIC MANUAL "),e.createElement(i.a,null,[{icon:"add_box",description:"[Add] rows."},{icon:"create",description:"[Edit] records."},{icon:"search",description:"Type down words to [search]."},{icon:"save_alt",description:"[Download] files in CVS format."},{icon:"view_week",description:"[Select] columns to be displayed"},{icon:"playlist_add_check",description:"Follow the steps below to [delete] rows."},{icon:"check_box",description:" ① Select the checkbox on the row."},{icon:"fact_check",description:" ② Check the number of the rows selected."},{icon:"delete",description:" ③ Click the bin icon on the right above."}].map((function(t){return e.createElement(c.a,null,e.createElement(l.a,{component:"span",className:"material-icons ".concat(n.icon),style:{width:"3vw"}},t.icon),e.createElement(u.a,{primary:t.description}))}))))}}).call(this,n(0))},369:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return l}));var r=n(58),o=n(370),a=n(372),i=n(373),c=Object(r.a)((function(e){return{root:{display:"flex",flexWrap:"wrap",height:"350vh",justifyContent:"center"}}}));function l(){var t=c();return e.createElement("div",{className:t.root},e.createElement(i.a,null),e.createElement(o.a,null),e.createElement(a.a,null))}}).call(this,n(0))},370:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return p}));var r=n(75),o=n(58),a=n(107),i=n(73),c=n(53),l=n(371);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return f(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var m=Object(o.a)((function(e){return{root:{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"space-evenly",alignContent:"center",height:"100vh",width:"90vw",marginTop:"-10vh",zIndex:0},paper:{maxWidth:800,minWidth:400,width:"50vw",height:"70vh",margin:e.spacing(4),flex:2},text:{maxWidth:600,minWidth:250,width:"30vw",height:"50vh",flex:1,alignSelf:"center"}}}));function p(){var t=s(e.useState(!1),2),n=t[0],o=t[1],f=m(),p=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return o(e.isIntersecting)}))}),{rootMargin:"-80px 0px"});return e.observe(p.current),function(){return e.unobserve(p.current)}}),[]),e.createElement(e.Fragment,null,e.createElement(l.a,null,e.createElement(i.a,{className:f.title},e.createElement(c.a,{variant:"h2",style:{color:"white",alignSelf:"center"}}," User's Guide "))),e.createElement("div",{className:f.root,ref:p},e.createElement(a.a,u({in:n,style:{transformOrigin:"0 0 0"}},n?{timeout:2e3}:{}),e.createElement(r.a,{elevation:3,className:f.paper})),e.createElement(a.a,u({in:n,style:{transformOrigin:"0 0 0"}},n?{timeout:2e3}:{}),e.createElement(r.a,{elevation:1,className:f.text}))))}}).call(this,n(0))},371:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return s}));var r=n(58),o=n(73),a=n(217);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return c(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=Object(r.a)((function(e){var t;return{root:(t={margin:0,padding:0,display:"flex",flexWrap:"wrap",height:"15vh",width:"100%",justifyContent:"center",alignItems:"center",background:"rgb(191,185,185)"},l(t,"background","linear-gradient(160deg, rgba(191,185,185,1) 26%, rgba(47,135,166,1) 77%)"),l(t,"zIndex",100),l(t,"margin","auto"),l(t,"opacity",.7),t)}}));function s(t){var n=t.children,r=i(e.useState(!1),2),c=r[0],l=r[1],s=u(),f=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return l(e.isIntersecting)}))}),{rootMargin:"-50px 0px"});return e.observe(f.current),function(){return e.unobserve(f.current)}}),[]),e.createElement(a.a,{in:c,timeout:{enter:1500,exit:1e3}},e.createElement(o.a,{className:s.root,boxShadow:4,ref:f},n))}}).call(this,n(0))},372:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return s}));var r=n(75),o=n(58),a=n(107);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var u=Object(o.a)((function(e){return{root:{display:"flex",flexDirection:"row-reverse",flexWrap:"wrap",justifyContent:"space-evenly",alignContent:"center",height:"100vh",width:"90vw",zIndex:0},paper:{maxWidth:800,minWidth:400,width:"50vw",height:"70vh",margin:e.spacing(4),flex:2},text:{maxWidth:600,minWidth:250,width:"30vw",height:"50vh",flex:1,alignSelf:"center"}}}));function s(){var t=c(e.useState(!1),2),n=t[0],o=t[1],l=u(),s=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return o(e.isIntersecting)}))}),{rootMargin:"-80px 0px"});return e.observe(s.current),function(){return e.unobserve(s.current)}}),[]),e.createElement("div",{className:l.root,ref:s},e.createElement(a.a,i({in:n,style:{transformOrigin:"0 0 0"}},n?{timeout:2e3}:{}),e.createElement(r.a,{elevation:3,className:l.paper})),e.createElement(a.a,i({in:n,style:{transformOrigin:"0 0 0"}},n?{timeout:2e3}:{}),e.createElement(r.a,{elevation:1,className:l.text})))}}).call(this,n(0))},373:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return s}));var r=n(58),o=n(53),a=n(374),i=n(217);function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var u=Object(r.a)((function(e){return{root:{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",height:"100vh",width:"100%",backgroundImage:"url(".concat(a.a,")")}}}));function s(){var t=u(),n=c(e.useState(!1),2),r=n[0],a=n[1],l=e.useRef(!0),s=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return a(e.isIntersecting)})),l.current&&(l.current=!1)}),{rootMargin:"-350px 0px"});return e.observe(s.current),function(){return e.unobserve(s.current)}}),[]),e.createElement(i.a,{in:r,timeout:{enter:2e3,exit:1e3}},e.createElement("div",{className:t.root,ref:s},e.createElement(o.a,{variant:"h1",color:"textSecondary"},l.current?"WELCOME!!":"Ready to start?")))}}).call(this,n(0))},374:function(e,t,n){"use strict";t.a=n.p+"wood2.dc3dfeb18edf546f7718cbd7d5c09741.jpg"},375:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return m}));var r=n(53),o=n(58),a=n(381),i=n(506),c=n(376),l=n(73),u=n(199);function s(){return e.createElement(r.a,{variant:"body2",color:"textSecondary"},"Copyright © ",e.createElement(i.a,{color:"inherit",href:"#"},"Jack's Website")," ",(new Date).getFullYear(),".")}var f=Object(o.a)((function(e){return{root:{display:"flex",flexDirection:"column",minHeight:"20vh",justifyContent:"center"},footer:{padding:e.spacing(3,2),marginTop:"auto",backgroundColor:e.palette.grey[200],textAlign:"center"},arrow:{width:"12vw",height:"12vh",alignSelf:"center",background:"no-repeat center/80% url(".concat(c.a,")"),marginBottom:"3vh",backgroundSize:"contain"}}}));function m(){var t=f();return e.createElement(l.a,{className:t.root},e.createElement(u.a,{title:"Move to Top","aria-label":"move-to-top",placement:"top",enterDelay:350,leaveDelay:150},e.createElement(l.a,{className:t.arrow,onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},onMouseOver:function(e){return function(e){e.target.style.cursor="pointer"}(e)}})),e.createElement("footer",{className:t.footer},e.createElement(a.a,{maxWidth:"sm"},e.createElement(s,null))))}}).call(this,n(0))},376:function(e,t,n){"use strict";t.a=n.p+"arrow.d08328f62d19b66f8ea8d6d006724c8b.png"},385:function(e,t,n){"use strict";n.r(t),function(e){var t=n(16),r=n.n(t),o=n(117);r.a.render(e.createElement(o.c,null),document.getElementById("root"))}.call(this,n(0))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,