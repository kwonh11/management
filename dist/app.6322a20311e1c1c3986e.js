!function(e){function t(t){for(var r,i,c=t[0],l=t[1],u=t[2],f=0,m=[];f<c.length;f++)i=c[f],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&m.push(a[i][0]),a[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(s&&s(t);m.length;)m.shift()();return o.push.apply(o,u||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,c=1;c<n.length;c++){var l=n[c];0!==a[l]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={0:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var s=l;o.push([428,1,2]),n()}({100:function(e,t,n){"use strict";(function(e){var r=n(575),a=n(584);t.a=function(t){var n=t.open,o=t.onClose,i=t.content,c=t.status,l=t.direction;return e.createElement(r.a,{open:n,onClose:o,anchorOrigin:l||{vertical:"top",horizontal:"center"}},e.createElement(a.a,{onClose:o,severity:c,variant:"filled",message:{fontWeight:"bolder",fontSize:"5rem"}},i))}}).call(this,n(0))},105:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return i}));var r=n(17),a=n(57),o=n(271);function i(t){var n=t.isLoading;return e.createElement(e.Fragment,null,n&&e.createElement(r.a,{style:{height:"100vh",width:"100vw",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column"}},e.createElement(a.a,{variant:"text",color:"primary",size:"large",disabled:!0,style:{fontWeight:"bolder"}},"Saving changes"),e.createElement(o.a,null)))}}).call(this,n(0))},119:function(e,t,n){"use strict";t.a="https://management-apple.herokuapp.com"},141:function(e,t,n){"use strict";t.a=n.p+"management-background.a008de8139581b0dabf1832ed1c9c46e.jpg"},212:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return c}));var r=n(118),a=n.n(r),o=n(119),i=function(){return a.a.get("".concat(o.a,"/login")).then((function(e){return location.assign(e.data)}))},c=function(e){return a.a.post("".concat(o.a,"/login"),{token:e},{withCredentials:!0}).then((function(e){return Promise.resolve(e.data)}))}},223:function(e,t,n){"use strict";(function(e){function r(t){var n=e.useRef(!0);n.current&&(n.current=!1,t())}n.d(t,"a",(function(){return r}))}).call(this,n(0))},224:function(e,t,n){"use strict";t.a=n.p+"arrow.d08328f62d19b66f8ea8d6d006724c8b.png"},226:function(e,t,n){"use strict";var r=n.p+"easy-login.3e91b8d88735689079afd076e3e07423.png",a=n.p+"link-management-page.48004d133b5fc22577704c95eb35f3d8.png",o=n.p+"start-right-away.4e217262d2c8d86d5e0f6ee432aefbcf.png",i=n.p+"make-headers.cffac634f29d38ddbd1f4467a573ebc4.png",c=n.p+"handle-table.3c586914a96d4afeddc5c7ad3d7df354.png",l=n.p+"mymenu.9fdd58aca74eb48d955f835c9ec8796e.png",u=n.p+"slide0.0aa295a3b7b4d3013286f524c4764cd7.png";t.a=[{name:"Quick start guide",src:"".concat(u),description:"GUIDE"},{name:"Sign in with Google",src:"".concat(r),description:"Sign in with google"},{name:"Move on to management page",src:"".concat(a),description:"Move on to management page"},{name:"Click the blue button",src:"".concat(o),description:'click "get started right away" button'},{name:"Make Headers",src:"".concat(i),description:"make headers"},{name:"Create, Edit, Remove table records",src:"".concat(c),description:"handle table"},{name:"Use mymenu to handle data",src:"".concat(l),description:"use mymenu"}]},279:function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return c}));var r=n(17),a=n(57),o=n(581),i={exportButton:!0,grouping:!0,selection:!0,headerStyle:{fontWeight:"bolder"},actionsColumnIndex:-1,columnsButton:!0,debounceInterval:160,pageSize:15,pageSizeOptions:[5,15,30,50,100]},c={pagination:{labelDisplayedRows:"{count} rows | {from}-{to}"},toolbar:{nRowsSelected:"{0} row(s) selected"},header:{actions:"Edit"},body:{emptyDataSourceMessage:e.createElement(r.a,{style:{display:"flex",flexDirection:"column"}},e.createElement(a.a,{variant:"text",color:"primary",size:"large",disabled:!0,style:{fontWeight:"bolder"}},"No Records to display"),e.createElement(a.a,{variant:"text",color:"primary",size:"large",disabled:!0,endIcon:e.createElement(o.a,null),style:{fontWeight:"bolder"}},"Click the plus icon on the right above for a new record. "))}}}).call(this,n(0))},378:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return w}));var r=n(78),a=n(566),o=n(270),i=n(171),c=n(57),l=n(64),u=n(421),s=n(34),f=n(379),m=n(380),d=n(86),p=n(384);function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E=Object(s.a)((function(e){return{root:{flexGrow:1,alignItems:"flex-start",paddingTop:18,paddingBottom:18},left:{flexGrow:1,paddingLeft:30,justify:"flex-start"},center:{flexGrow:1},right:{display:"flex",paddingRight:45,justify:"flex-end",flexDirection:"row",padding:"0 ".concat(e.spacing(3))}}}));function w(t){var n=b(e.useState({menu:!1}),2),s=n[0],h=n[1],v=E(),w=function(e,t){return function(n){var r=!!t&&!s[e];h(g(g({},s),{},y({},e,r)))}},O=e.useContext(d.c),S=O.name?"MYPAGE":"LOGIN",j=O.name?e.createElement(p.a,null):null;return e.createElement(e.Fragment,null,e.createElement(f.a,t,e.createElement(a.a,{color:"inherit",style:{boxShadow:"none"}},e.createElement(o.a,null,e.createElement(i.a,{container:!0,spacing:3},e.createElement(i.a,{container:!0,className:v.root},e.createElement(i.a,{item:!0,className:v.left},e.createElement(r.b,{to:"/",style:{textDecoration:"none"}},e.createElement(c.a,{variant:"outlined"}," Home ")),["board","management"].map((function(t){return e.createElement(r.b,{to:"/".concat(t),style:{textDecoration:"none"},key:t},e.createElement(c.a,{variant:"outlined"}," ",t," "))}))),e.createElement(i.a,{item:!0,className:v.center},e.createElement("span",null)),e.createElement(i.a,{item:!0,className:v.right},e.createElement(c.a,{variant:"outlined",color:"primary",onClick:w(S,!0),style:{marginRight:"5px"}},S),j,e.createElement(l.a,{open:s[S],onClose:w(S,!1),variant:"persistent"},Object(m.a)(g(g({},t),{},{anchor:S,toggleDrawer:w,profile:O}))))),e.createElement(u.a,null))))))}}).call(this,n(0))},379:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return o}));var r=n(551),a=n(419);function o(t){var n=t.children,o=Object(r.a)();return e.createElement(a.a,{appear:!1,direction:"down",in:!o},n)}}).call(this,n(0))},380:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return P}));var r=n(281),a=n(106),o=n(92),i=n(554),c=n(426),l=n(421),u=n(16),s=n(120),f=n(145),m=n(53),d=n(17),p=n(167),h=n(57),g=n(34),y=n(381),b=n(382),v=n(212),E=n(555),w=n(556),O=n(557),S=n(422),j=n(78),x=n(67),I=n(86);function A(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return C(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var k=Object(g.a)((function(e){return{list:{width:"23vw",height:"100vh",display:"flex",justifyContent:"start",flexDirection:"column"},listItem:{width:"100%"},listItemText:{textAlign:"center",color:"#838282",marginBottom:"30px"},largeAvatar:{width:e.spacing(9),height:e.spacing(9)},inline:{display:"inline"},listText:{color:"#838282",textAlign:"center"},modal:{top:"50%",left:"50%",transform:"translate(-50%, -50%)",position:"absolute",width:400,minWidth:400,backgroundColor:e.palette.background.paper,border:"2px solid #000",boxShadow:e.shadows[5],padding:e.spacing(2,4,3),display:"flex",flexDirection:"column"},modalRowBox:{display:"flex",flexDirection:"row",justifyContent:"center",alignItems:"center"},modalColBox:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"start"},button:{fontWeight:"bolder"}}}));function P(t){var n=t.anchor,g=t.toggleDrawer,C=t.profile,P=k(),N=e.useContext(I.a),D=A(e.useState(""),2),M=D[0],T=D[1];var R=A(e.useState(!1),2),W=R[0],B=R[1],L=!!C&&!!C.name;return e.createElement("div",{className:P.list,role:"presentation",onClick:g(n,!1),onKeyDown:g(n,!1)},e.createElement(r.a,null,e.createElement(a.a,{primary:L?"PROFILE":"LOGIN MENU",className:P.listItemText}),L?e.createElement(e.Fragment,null,e.createElement(o.a,{alignItems:"center",className:P.listItem},e.createElement(i.a,null,e.createElement(c.a,{src:C.picture,className:P.largeAvatar,alt:C.name})),e.createElement(a.a,{primary:C.name,className:P.listText}),e.createElement("br",null)),e.createElement(l.a,{variant:"inset",component:"li"}),e.createElement(o.a,{className:P.listItem,divider:!0},e.createElement(a.a,{primary:"EMAIL : ",secondary:e.createElement(e.Fragment,null,e.createElement(u.a,{component:"span",variant:"body2",color:"textPrimary",className:P.inline},C.email))})),e.createElement(o.a,{className:P.listItem,divider:!0}),e.createElement(o.a,{className:P.listItem,divider:!0},e.createElement(E.a,{color:"primary",style:{marginRight:"1vw"}}),e.createElement(a.a,{secondary:"EDIT HEADERS"}),e.createElement(j.b,{to:"/headers"},e.createElement(s.a,{edge:"end","aria-label":"edit-header"},e.createElement(w.a,{color:"primary",fontSize:"large"})))),e.createElement(o.a,{className:P.listItem,divider:!0}),e.createElement(o.a,{className:P.listItem,divider:!0},e.createElement(O.a,{color:"secondary",style:{marginRight:"1vw"}}),e.createElement(a.a,{secondary:"REMOVE ALL DATA"}),e.createElement(s.a,{edge:"end","aria-label":"edit-header",onClick:function(){return B(!0)}},e.createElement(S.a,{color:"secondary",fontSize:"large"}))),e.createElement(f.a,{open:W,onClose:function(){return B(!1)},"aria-labelledby":"modal-title","aria-describedby":"modal-contents"},e.createElement(m.a,{className:P.modal},e.createElement(d.a,{className:P.modalRowBox},e.createElement(s.a,{edge:"start","aria-label":"edit-header",disabled:!0},e.createElement(S.a,{color:"secondary",fontSize:"large"})),e.createElement(u.a,{id:"modal-title",variant:"button",display:"block",style:{fontWeight:"bolder"}},"Caution : permanent deletion")),e.createElement(d.a,{className:P.modalColBox},e.createElement(u.a,{id:"modal-contents",variant:"body1",style:{fontWeight:"bold"}},"All data will be deleted and cannot be recovered.\n                                Please enter your email correctly to continue."),e.createElement(u.a,{variant:"caption"},C.email)),e.createElement(d.a,{className:P.modalRowBox},e.createElement(p.a,{label:"E-MAIL",onChange:function(e){return T(e.target.value)}}),e.createElement(h.a,{className:P.button,variant:"contained",color:"secondary",size:"large",onClick:function(){M===C.email?Object(x.b)({},[],[{}]).then((function(e){N({open:!0,result:"success"===e.result?"success":"error"}),setTimeout((function(){location.replace(location.origin)}),1500)})).catch((function(e){throw new Error(e)})):N({open:!0,result:"error"})}},"submit"))))):e.createElement(o.a,{button:!0,className:P.listItem,onClick:function(){Object(v.b)()}},e.createElement(y.a,{signIn:b.a}))))}}).call(this,n(0))},381:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return i}));var r=n(34),a=n(17),o=Object(r.a)((function(e){return{button:{width:"100%",height:"100%"}}}));function i(t){var n=o(),r=t.signIn;return e.createElement(a.a,{component:"span"},e.createElement("img",{src:r,className:n.button}))}}).call(this,n(0))},382:function(e,t,n){"use strict";t.a=n.p+"googleSignin.1ce1aaa5a127fa3e492a12bb62f99304.png"},384:function(e,t,n){"use strict";(function(e){var r=n(386),a=n.n(r),o=n(121),i=n(92),c=n(120),l=n(34),u=n(5),s=n(233);function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var d=Object(l.a)((function(e){return{logout:{justifyContent:"flex-end",padding:"2px",margin:0,width:"auto"}}})),p=Object(u.a)((function(e){return{tooltip:{backgroundColor:e.palette.common.white,color:"rgba(0, 0, 0, 0.87)",boxShadow:e.shadows[2],fontSize:14,fontWeight:"bold"}}}))(o.a);t.a=function(){var t=d(),n=f(Object(s.a)(["profile","user"]),3),r=(n[0],n[1],n[2]);return e.createElement(e.Fragment,null,e.createElement(i.a,{className:t.logout},e.createElement(p,{title:"Log-out"},e.createElement(c.a,{style:{padding:4},onClick:function(){r("profile"),r("user"),location.href=location.origin}},e.createElement(a.a,null)))))}}).call(this,n(0))},387:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return s}));var r=n(105),a=n(17),o=n(53),i=n(16),c=n(167),l=n(34),u=Object(l.a)((function(e){return{container:{width:"100%",height:"120vh",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column",color:"white"},paper:{width:"75vw",height:"85vh",display:"flex",justifyContent:"center",flexDirection:"column",alignItems:"center"},backLogo:{justifySelf:"center"},inputBox:{width:"40vw",marginTop:"5vh"}}}));function s(t){var n=t.isLoading,l=u(),s=e.useRef();return e.useEffect((function(){window.addEventListener("keydown",(function(e){13===e.keyCode&&s.current.querySelector("#message").focus()}))}),[]),e.createElement(e.Fragment,null,e.createElement(r.a,{isLoading:n}),e.createElement(a.a,{className:l.container},e.createElement(o.a,{className:l.paper,elevation:5},e.createElement(a.a,{className:l.backLogo},e.createElement(i.a,{variant:"h1",style:{fontWeight:"bolder",color:"#e0e0e0"}}," IN READY. "),e.createElement(i.a,{variant:"h1",style:{fontWeight:"bolder",color:"#e0e0e0"}}," ~ 2020/06/21 ")),e.createElement(a.a,{className:l.inputBox},e.createElement(c.a,{id:"message",label:"message",style:{margin:8},autoFocus:!0,placeholder:"Enter a message",fullWidth:!0,ref:function(e){return s.current=e},margin:"normal",InputLabelProps:{shrink:!0},variant:"outlined"})))))}}).call(this,n(0))},388:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return x}));var r=n(233),a=n(389),o=n.n(a),i=n(394),c=n(279),l=n(223),u=n(67),s=n(395),f=n(396),m=n(397),d=n(100),p=n(17),h=n(86),g=n(105);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e){return function(e){if(Array.isArray(e))return j(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||S(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function w(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function O(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||S(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){if(e){if("string"==typeof e)return j(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?j(e,t):void 0}}function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function x(t){var n=t.isLoading,a=e.useContext(h.b),y=O(Object(r.a)(["profile"]),3),v=(y[0],y[1],y[2],O(e.useState({open:!1}),2)),S=v[0],j=v[1],x=O(e.useState({open:!1}),2),I=x[0],A=x[1],C=O(e.useState({open:!1}),2),k=C[0],P=C[1],N=O(e.useState({open:!1}),2),D=N[0],M=N[1],T=O(e.useState({defaultPage:!0,hasTable:!1,columns:[],data:[]}),2),R=T[0],W=T[1],B=e.useRef();Object(l.a)((function(){Object(u.a)().then((function(e){console.log("status : ".concat(e.status," , data : ").concat(JSON.stringify(e.data))),200===e.status&&e.data.headers&&(setTimeout((function(){j({open:!0})}),400),W({columns:Object(f.a)(e.data.headers,e.data.groupings),data:e.data.data,defaultPage:!1,hasTable:!0}))})).catch((function(e){console.log(e),P({open:!0})}))}));var L=function(e){var t=[],n=[],r=B.current.dataManager.columns.reduce((function(e,t,r){return e["header".concat(r)]=t.title,n.push(t.grouping),e}),{});B.current.dataManager.data.forEach((function(e,n){e.tableData;var r=w(e,["tableData"]);t.push(r)})),Object(u.b)(r,n,t).catch((function(e){if(e)throw new Error(e)})),e||A({open:!0})};e.useEffect((function(){var e=function(){return M({open:!D.open})},t=function(e){(navigator.platform.match("Mac")?e.metaKey:e.ctrlKey&&83===e.keyCode)&&(e.preventDefault(),L())};return window.addEventListener("keydown",t),window.addEventListener("dblclick",e),function(){window.removeEventListener("dblclick",e),window.removeEventListener("keydown",t),B.current&&(B.current.dataManager&&L(!0)),B.current&&(B.current.dataManager&&a("success"))}}),[]);var z=function(){return e.createElement(p.a,{style:{height:"100px"}})};return e.createElement(e.Fragment,null,e.createElement(g.a,{isLoading:n}),R.defaultPage?e.createElement(s.a,{state:R,setState:W}):e.createElement(p.a,null,e.createElement(i.a,{open:D.open,onClose:function(){M({open:!1})}}),e.createElement(z,null),e.createElement(o.a,{tableRef:B,title:e.createElement(m.a,{setSavedSnack:A,dataManager:B.current?B.current.dataManager:{}}),columns:R.columns,data:R.data,localization:c.a,options:c.b,actions:[{tooltip:"Remove the Selected row(s)",icon:"delete",onClick:function(e,t){var n=E(R.data);t.forEach((function(e){n.splice(n.indexOf(e),1)})),W((function(e){return b(b({},e),{},{data:n})}))}}],editable:{onRowAdd:function(e){return new Promise((function(t){setTimeout((function(){W((function(t){var n=E(t.data);return n.push(e),b(b({},t),{},{data:n})})),t()}),400)}))},onRowUpdate:function(e,t){return new Promise((function(n){setTimeout((function(){t&&W((function(n){var r=E(n.data);return r[r.indexOf(t)]=e,b(b({},n),{},{data:r})})),n()}),400)}))}}}),e.createElement(z,null),e.createElement(d.a,{open:S.open,onClose:function(){return j({open:!1})},content:"need some help? ? double-click any space !",status:"success"}),e.createElement(d.a,{open:I.open,onClose:function(){return A({open:!1})},content:"SAVED !",status:"success"}),e.createElement(d.a,{open:k.open,onClose:function(){return P({open:!1})},content:"ERROR !",status:"error"})))}}).call(this,n(0))},394:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(34),a=n(568),o=n(572),i=n(281),c=n(92),l=n(17),u=n(106),s=Object(r.a)((function(e){}));function f(t){var n=s(),r=t.open,f=t.onClose;return e.createElement(a.a,{onClose:f,open:r},e.createElement(o.a,null," BASIC MANUAL "),e.createElement(i.a,null,[{icon:"add_box",description:"[Add] rows."},{icon:"create",description:"[Edit] records."},{icon:"search",description:"Type down words to [search]."},{icon:"save_alt",description:"[Download] files in CVS format."},{icon:"view_week",description:"[Select] columns to be displayed"},{icon:"playlist_add_check",description:"Follow the steps below to [delete] rows."},{icon:"check_box",description:" ① Select the checkbox on the row."},{icon:"fact_check",description:" ② Check the number of the rows selected."},{icon:"delete",description:" ③ Click the Bin icon on the right above."},{icon:"playlist_add_check",description:"Follow the steps below to [Edit] headers."},{icon:"menu",description:" ① Open MYPAGE"},{icon:"create",description:" ② Click the Pencil icon"}].map((function(t,r){return e.createElement(c.a,{key:"".concat(t," + ").concat(r)},e.createElement(l.a,{component:"span",className:"material-icons ".concat(n.icon),style:{width:"3vw"}},t.icon),e.createElement(u.a,{primary:t.description}))}))))}}).call(this,n(0))},395:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return y}));var r=n(93),a=n(17),o=n(16),i=n(57),c=n(34),l=n(141),u=n(78);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return f(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=Object(c.a)((function(e){return{container:{width:"100%",height:"100vh",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column",backgroundImage:"url(".concat(l.a,")"),color:"white"},button:{fontWeight:"bolder",margin:e.spacing(1)},buttonContainer:{flexDirection:"row",display:"flex",justifyContent:"center",alignItems:"center",margin:e.spacing(1)},text:d(d({},e.typography.button),{},{backgroundColor:"inherit",textShadow:"0.5px 0.5px 1px #0000005c",margin:"0 1vw 1.7vh",color:"#6a748c"})}})),g={columns:[{title:"Name",field:"Name",grouping:!1},{title:"Surname",field:"Surname"},{title:"Birth Year",field:"Birth Year"},{title:"Phone",field:"Phone",grouping:!1},{title:"Gender",field:"Gender"},{title:"Memo",field:"Memo"}],data:[{Name:"Mehmet",Surname:"Baran","Birth Year":1983,Phone:"01046509995",Gender:1,Memo:""},{Name:"Adam",Surname:"Adam","Birth Year":1984,Phone:"01046509795",Gender:2,Memo:""},{Name:"Mehmet",Surname:"Atom","Birth Year":1985,Phone:"01046509695",Gender:1,Memo:""},{Name:"mul",Surname:"Kongna","Birth Year":1986,Phone:"01046509195",Gender:1,Memo:""},{Name:"Jack",Surname:"Jack","Birth Year":1987,Phone:"01046509295",Gender:2,Memo:""},{Name:"Bob",Surname:"Bob","Birth Year":1988,Phone:"01046509395",Gender:2,Memo:""}]};function y(t){var n=t.state,c=t.setState,l=(t.match,s(e.useState(!1),2)),f=l[0],m=l[1],p=s(e.useState(!1),2),y=p[0],b=p[1],v=h();return e.useEffect((function(){m(!0),setTimeout(b(!0),1500)}),[]),e.createElement(r.a,{in:f,timeout:{enter:800,exit:500}},e.createElement(a.a,{className:v.container},e.createElement(o.a,{variant:"h1",color:"initial",style:{textShadow:"5px 1.5px 1.5px gray"}},"Management Table"),e.createElement(o.a,{variant:"subtitle2",gutterBottom:!0,style:{textShadow:"2px 2px 1px black"}},"You may try the DEMO if this your first time, or get started right away!"),e.createElement(r.a,{in:y,timeout:{enter:3e3,exit:500}},e.createElement(a.a,{className:v.buttonContainer},e.createElement(i.a,{className:v.button,variant:"contained",color:"secondary",size:"large",onClick:function(){c(d(d({},n),{},{columns:g.columns,data:g.data,defaultPage:!n.defaultPage}))}},"USE DEMO"),e.createElement(u.b,{to:"/headers",style:{textDecoration:"none"}},e.createElement(i.a,{className:v.button,variant:"contained",color:"primary",size:"large"},"GET STARTED RIGHT AWAY"))))))}}).call(this,n(0))},396:function(e,t,n){"use strict";t.a=function(e,t){return console.log("data parsing!!!!"),Object.values(e).filter((function(e){return e})).map((function(e,n){return{title:e,field:e,grouping:t[n]}}))}},397:function(e,t,n){"use strict";(function(e){var r=n(121),a=n(57),o=n(67);function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}t.a=function(t){var n=t.setSavedSnack,c=t.dataManager;return e.createElement(r.a,{title:"Click to SAVE ( Ctrl + S )"},e.createElement(a.a,{style:{fontWeight:"bolder"},variant:"contained",color:"secondary",onClick:function(){return e=[],t=[],r=c.columns.reduce((function(e,n,r){return e["header".concat(r)]=n.title,t.push(n.grouping),e}),{}),c.data.forEach((function(t,n){t.tableData;var r=i(t,["tableData"]);e.push(r)})),console.log(" result : \n          ".concat(JSON.stringify(e),"\n          ").concat(t,"\n          ").concat(JSON.stringify(r),"\n        ")),void Object(o.b)(r,t,e).then((function(e){"success"===e.result?n({open:!0}):setErrorSnack({open:!0})})).catch((function(e){setErrorSnack({open:!0})}));var e,t,r}},"SAVE"))}}).call(this,n(0))},398:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return C}));var r=n(34),a=n(17),o=n(93),i=n(53),c=n(16),l=n(167),u=n(121),s=n(273),f=n(141),m=n(224),d=n(67),p=n(223),h=n(233),g=n(100),y=n(105),b=n(86);function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e){return function(e){if(Array.isArray(e))return x(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||j(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||j(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){if(e){if("string"==typeof e)return x(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?x(e,t):void 0}}function x(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var I=Object(r.a)((function(e){return{container:{width:"100%",height:"120vh",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row",backgroundImage:"url(".concat(f.a,")")},paper:{flexDirection:"column",alignContent:"space-around",marginTop:"10vh"},formRoot:{"& > *":{margin:"0.5vh 1vw",width:"60ch",minWidth:"40ch",display:"flex"}},arrow:{width:"10vw",height:"10vh",alignSelf:"center",background:"no-repeat center/80% url(".concat(m.a,")"),backgroundSize:"contain",marginLeft:"3vw",transform:"rotate(90deg)"},description:{alignSelf:"center"}}})),A={header0:"",header1:"",header2:"",header3:"",header4:"",header5:"",header6:"",header7:"",header8:"",header9:""};function C(t){var n=t.isLoading,r=I(),f=e.useContext(b.b),m=S(Object(h.a)(["profile"]),3),v=(m[0],m[1],m[2]),j=S(e.useState(!1),2),x=j[0],C=j[1],k=S(e.useState({open:!1}),2),P=k[0],N=k[1],D=S(e.useState({open:!1,content:""}),2),M=D[0],T=D[1],R=S(e.useState({headers:A,groupings:Array(10).fill(!1)}),2),W=R[0],B=R[1],L=e.useRef();Object(p.a)((function(){Object(d.a)().then((function(e){if(console.log("response : ".concat(JSON.stringify(e))),200===e.status){for(var t=e.data&&e.data.groupings?e.data.groupings.length:0,n=e.data&&e.data.groupings?O(e.data.groupings):[],r=0;r<10-t;r++)n.push(!1);for(var a=e.data&&e.data.headers?e.data.headers:{},o=Object.values(a).length;o<10;o++)a["header".concat(o)]="";L.current={headers:a,groupings:n},console.log(L.current),B({headers:a,groupings:n})}else 204===e.status?(setTimeout(z(),3500),T({open:!0,status:"error",content:"Please log in again."})):T({open:!0,status:"error",content:"error (code : ".concat(e.status,")")})})).catch((function(e){e&&(console.log(e),setTimeout(z(),3500),T({open:!0,status:"error",content:"Please log in again."}))}))})),e.useEffect((function(){L.current={headers:E({},W.headers),groupings:O(W.groupings)}}),[W.headers,W.groupings]),e.useEffect((function(){return C(!0),function(){var e=G(L.current.headers,L.current.groupings,!0);f("error"===e?"error":"success")}}),[]);var z=function(){v("profile"),location.href=location.origin},G=function(e,t,n){return Object.values(e).every((function(e){return e.length<=15}))?0===Object.values(e).filter((function(e){return e})).length?(N({open:!0}),"error"):void Object(d.c)(e,t).then((function(e){n||T({open:!0,content:e.result})})).catch((function(e){setTimeout(z(),2e3),T({open:!0,status:"error",content:"Please log in again."})})):(N({open:!0}),"error")};return e.createElement(e.Fragment,null,e.createElement(y.a,{isLoading:n}),e.createElement(a.a,{className:r.container},e.createElement(o.a,{in:x,timeout:{enter:1500}},e.createElement(i.a,{className:r.paper,elevation:4},e.createElement("form",{className:r.formRoot,autoComplete:"off"},e.createElement(a.a,{component:"div"},e.createElement(c.a,{variant:"h4",color:"textPrimary",style:{fontWeight:"bolder"}},"Header Edit Form"),e.createElement(a.a,{color:Object.values(W.headers).every((function(e){return e.length<=15}))?"blue":"red"},e.createElement(c.a,{variant:"subtitle2",color:"initial"},"Header should be less than 15 letters."))),Object.values(W.headers).map((function(t,n){return e.createElement("div",{key:n},e.createElement(l.a,{required:0===n,id:"".concat(n),key:n,label:"header-".concat(n+1),value:W.headers["header".concat(n)],margin:"normal",onChange:function(e){return function(e,t){B(E(E({},W),{},{headers:E(E({},W.headers),{},w({},"header".concat(t),e.target.value))}))}(e,n)},error:W.headers["header".concat(n)].length>15}),e.createElement(u.a,{title:"\r\nYou can arrange the data with a valid header, \r\nUnique values are not commonly used for this function in general.\r\ne.g.) name, address, mobile NO. etc.\r\n",placement:"right",enterDelay:200,leaveDelay:200},e.createElement(s.a,{checked:W.groupings[n],onChange:function(e){return function(e,t){B(E(E({},W),{},{groupings:W.groupings.map((function(n,r){return r===t?e.target.checked:n}))}))}(e,n)}})),0===n?e.createElement(a.a,{component:"span",className:r.description}," Grouping!?"):null)}))))),e.createElement(u.a,{title:"SUBMIT","aria-label":"submit",placement:"top",enterDelay:200,leaveDelay:400},e.createElement(a.a,{className:r.arrow,onMouseOver:function(e){return e.target.style.cursor="pointer"},onClick:function(){return G(W.headers,W.groupings)}})),e.createElement(g.a,{open:P.open,onClose:function(){return N({open:!1})},content:"Header should be less than 15 letters :(",status:"error"}),e.createElement(g.a,{open:M.open,onClose:function(){return T({open:!1})},content:M.content,status:"error"===M.status?"error":"success"})))}}).call(this,n(0))},399:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var r=n(34),a=n(400),o=n(405),i=n(410),c=n(105),l=Object(r.a)((function(e){return{root:{display:"flex",flexWrap:"wrap",justifyContent:"center",backgroundColor:"white"}}}));function u(t){var n=t.isLoading,r=l();return e.createElement("div",{className:r.root},e.createElement(c.a,{isLoading:n}),e.createElement(i.a,null),e.createElement(a.a,null),e.createElement(o.a,null))}}).call(this,n(0))},400:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return g}));var r=n(34),a=n(93),o=n(17),i=n(147),c=n(53),l=n(401),u=n(226),s=n(403),f=n(404);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h=Object(r.a)((function(e){return{root:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",height:"100vh",width:"100vw",backgroundImage:"url(".concat(f.a,")"),backgroundSize:"cover"},paper:{minWidth:750,maxWidth:"1000px",width:"70vw",height:"65vh",margin:e.spacing(4),backgroundColor:"inherit"},textPaper:{minWidth:350,width:"70vw",alignSelf:"center",justifyContent:"center",backgroundColor:"inherit"}}}));function g(){var t=d(e.useState(!1),2),n=t[0],r=t[1],f=d(e.useState(0),2),p=f[0],g=f[1],y=d(e.useState(0),2),b=y[0],v=y[1],E=h(),w=e.useRef();return console.log("currentSlide : ".concat(p)),e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return r(e.isIntersecting)})),g(0)}),{rootMargin:"-70px 0px"});return e.observe(w.current),function(){return e.unobserve(w.current)}}),[]),e.createElement(e.Fragment,null,e.createElement(a.a,{in:n,timeout:{enter:3e3,exit:800}},e.createElement(o.a,{className:E.root,ref:w},e.createElement(i.a,m({in:n,style:{transformOrigin:"50% 100%"}},n?{timeout:{appear:1500,enter:1500,exit:1e3}}:{}),e.createElement(c.a,{elevation:4,className:E.paper},e.createElement(l.a,{list:u.a,currentSlide:p,setCurrentSlide:g,setStepper:v}))),e.createElement(i.a,m({in:n,style:{transformOrigin:"50% 100%"}},n?{timeout:{appear:2e3,enter:1500,exit:1e3}}:{}),e.createElement(c.a,{elevation:4,className:E.textPaper},e.createElement(s.a,{stepper:b}))))))}}).call(this,n(0))},401:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return l}));var r=n(418),a=n(17),o=n(16),i=n(34),c=Object(i.a)((function(e){return{textContainer:{width:"100%",backgroundColor:"inherit",color:"#fff",textShadow:"2px 1.5px 1.5px gray",display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"column"}}}));function l(t){var n=c(),i=t.list?t.list:[{}],l=t.setStepper,u=t.currentSlide,s=t.setCurrentSlide;return e.createElement(r.a,{slideIndex:u,afterSlide:function(e){return l(t=e),void s(t);var t},autoplay:!1,autoplayInterval:3e3,transitionMode:"scroll",speed:800,heightMode:"max"},i.map((function(t,r){return e.createElement(a.a,{style:{width:"100%",height:"100%"},key:r},r>0?e.createElement(a.a,{className:n.textContainer},e.createElement(o.a,{variant:"h3",color:"inherit",style:{fontWeight:"bolder"}},"#".concat(r," ").concat(t.name))):null,e.createElement(a.a,{style:{height:"100%"}},0===r?e.createElement(a.a,{className:n.textContainer,style:{height:"100%",alignItems:"center"}},e.createElement(o.a,{variant:"h3",color:"inherit",style:{fontWeight:"bolder"}},"QUICK START GUIDE",e.createElement("img",{src:""})),e.createElement(o.a,{variant:"h6",color:"inherit",style:{fontWeight:"bold"}},"Make your work easier"),e.createElement(o.a,{variant:"subtitle1",color:"inherit",style:{fontWeight:"bold"}},"Turn the slide over and check."),e.createElement(o.a,{variant:"subtitle1",color:"inherit",style:{fontWeight:"bold"}},"It consists of a few slides.")):e.createElement("img",{src:t.src})))})))}}).call(this,n(0))},403:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(34),a=n(17),o=n(580),i=n(577),c=n(578),l=n(16),u=n(226),s=Object(r.a)((function(e){return{root:{width:"100%",flexDirection:"row",fontWeight:"bolder"},inline:{display:"inline"}}}));function f(t){var n=t.stepper,r=s();return e.createElement(a.a,{className:r.root},e.createElement(o.a,{activeStep:n,orientation:"horizontal",style:{backgroundColor:"inherit"}},u.a.map((function(t,r){return e.createElement(i.a,{completed:r<n,key:r},e.createElement(c.a,null,e.createElement(l.a,{variant:"caption",style:{fontWeight:"bolder"}},t.name)))}))))}}).call(this,n(0))},404:function(e,t,n){"use strict";t.a=n.p+"whitebackground.fb140f5e810dc2146dad1b6f03caf9c8.jpg"},405:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return g}));var r=n(93),a=n(17),o=n(426),i=n(16),c=n(34),l=n(406),u=n(407),s=n(408),f=n(409);function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return p(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return p(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var h=Object(c.a)((function(e){return{root:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",height:"100vh",width:"100vw",backgroundImage:"url(".concat(f.a,")"),backgroundSize:"cover"},logoBox:{display:"flex",justifyContent:"center",alignItems:"center",flexDirection:"row"},bigAvatar:{width:e.spacing(12),height:e.spacing(12)},textWithShadow:{color:"#fff",fontWeight:"bolder",fontSize:"4rem",marginLeft:"2vw",textShadow:"1px 5px 5px #9e9999"},descriptionBox:{display:"flex",color:"#fff",flexDirection:"column",justifyContent:"center",alignItems:"center",maxWidth:"50vw",margin:"0 0 0 3vw"}}}));function g(){var t=d(e.useState(!1),2),n=t[0],c=t[1],f=h(),p=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return c(e.isIntersecting)}))}),{rootMargin:"-70px 0px"});return e.observe(p.current),function(){return e.unobserve(p.current)}}),[]),e.createElement(e.Fragment,null,e.createElement(r.a,{in:n,timeout:{enter:2e3,exit:800}},e.createElement(a.a,{className:f.root,ref:p},e.createElement(u.a,null,e.createElement(a.a,{className:f.logoBox},e.createElement(r.a,m({in:n},n?{timeout:{enter:5e3,exit:800}}:{}),e.createElement(o.a,{alt:"help",src:l.a,className:f.bigAvatar})),e.createElement(i.a,{variant:"button",className:f.textWithShadow}," Management App ")),e.createElement(a.a,{className:f.descriptionBox},e.createElement(i.a,{variant:"subtitle2"},"An application that you can easily create & design your own data."),e.createElement(i.a,{variant:"subtitle2"},"Get started with your Google account!"),e.createElement(i.a,{variant:"subtitle2"},"This app will not keep any personal information."))),e.createElement(s.a,null))))}}).call(this,n(0))},406:function(e,t,n){"use strict";t.a=n.p+"moon.f206bc3d5be8311c77d9897da44e1f65.png"},407:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return u}));var r=n(34),a=n(93),o=n(17);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return c(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var l=Object(r.a)((function(e){return{root:(t={margin:0,padding:"1vw",display:"flex",flexWrap:"wrap",width:"100%",justifyContent:"center",flexDirection:"column",alignItems:"center"},n="margin",r="auto",n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t)};var t,n,r}));function u(t){var n=t.children,r=i(e.useState(!1),2),c=r[0],u=r[1],s=l(),f=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return u(e.isIntersecting)}))}),{rootMargin:"-50px 0px"});return e.observe(f.current),function(){return e.unobserve(f.current)}}),[]),e.createElement(a.a,{in:c,timeout:{enter:2e3,exit:800}},e.createElement(o.a,{className:s.root,boxShadow:4,ref:f},n))}}).call(this,n(0))},408:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(34),a=n(147),o=n(17),i=n(16);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s=Object(r.a)((function(e){return{root:{display:"flex",flexDirection:"row",justifyContent:"center",alignItems:"flex-start",width:"100%",height:"35vh",backgroundColor:"inherit"},innerBox:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",backgroundColor:"inherit",width:"30vw",color:"#eaeaea",textShadow:"1px 5px 5px #9e9999"}}}));function f(){var t=s(),n=l(e.useState(!1),2),r=n[0],u=n[1],f=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){u(e.isIntersecting)}))}),{rootMargin:"150px 0px"});return e.observe(f.current),function(){return e.unobserve(f.current)}}),[]),e.createElement(e.Fragment,null,e.createElement(a.a,c({in:r,style:{transformOrigin:"50% 100%"}},r?{timeout:{appear:1500,enter:1500,exit:1e3}}:{}),e.createElement(o.a,{className:t.root,ref:f},e.createElement(o.a,{className:t.innerBox},e.createElement(i.a,{variant:"h4",style:{fontWeight:"bolder"}},"SOME TEXT")),e.createElement(o.a,{className:t.innerBox},e.createElement(i.a,{variant:"h4",style:{fontWeight:"bolder"}},"SOME TEXT")))))}}).call(this,n(0))},409:function(e,t,n){"use strict";t.a=n.p+"black.3f02a132738700226c84ed1f5863d59a.png"},410:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return m}));var r=n(34),a=n(17),o=n(16),i=n(93),c=n(411),l=n(412);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var f=Object(r.a)((function(e){return{root:{display:"flex",flexDirection:"column",flexWrap:"wrap",justifyContent:"center",alignContent:"center",height:"100vh",width:"100%",backgroundImage:"url(".concat(l.a,")"),backgroundSize:"cover",color:"white"}}}));function m(){var t=f(),n=u(e.useState(!1),2),r=n[0],l=n[1],s=e.useRef(!0),m=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return l(e.isIntersecting)})),s.current&&(s.current=!1)}),{rootMargin:"-350px 0px"});return e.observe(m.current),function(){return e.unobserve(m.current)}}),[]),e.createElement(i.a,{in:r,timeout:{enter:1300,exit:800}},e.createElement(a.a,{className:t.root,ref:m},e.createElement(o.a,{variant:"h1",color:"inherit",style:{textShadow:"5px 1.5px 1.5px gray"}},s.current?"WELCOME":"Ready to start?"),s.current?null:e.createElement(c.a,null)))}}).call(this,n(0))},411:function(e,t,n){"use strict";(function(e){var r=n(17),a=n(57),o=n(34),i=n(582),c=n(78);function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=Object(o.a)((function(e){return{button:{width:"fit-content",marginBottom:"0.5vh"},text:u(u({},e.typography.button),{},{backgroundColor:"inherit",textShadow:"2px 1px 1px gray",color:"inherit"}),innerBox:{marginTop:"1vh",color:"white"}}}));t.a=function(){var t=f();return e.createElement(r.a,{className:t.innerBox},e.createElement(c.b,{to:"/management",style:{textDecoration:"none",color:"white"}},e.createElement(a.a,{size:"large",color:"secondary",variant:"contained",startIcon:e.createElement(i.a,{color:"inherit",style:{fontSize:30}}),className:t.button},"GET STARTED")))}}).call(this,n(0))},412:function(e,t,n){"use strict";t.a=n.p+"desk.3207c1ef94c867f80b0e9df6ac78d52b.jpg"},413:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return p}));var r=n(16),a=n(34),o=n(570),i=n(574),c=n(414),l=n(224),u=n(17),s=n(121),f=n(141);function m(){return e.createElement(r.a,{variant:"body2",color:"textSecondary"},"Copyright © ",e.createElement(i.a,{color:"inherit",href:"#"},"Jack's Website")," ",(new Date).getFullYear(),".")}var d=Object(a.a)((function(e){return{root:{display:"flex",flexDirection:"column",minHeight:"20vh",justifyContent:"center"},footer:{padding:e.spacing(3,2),marginTop:"auto",background:e.palette.grey[200],textAlign:"center",color:"white"},arrow:{width:"4vw",height:"4vw",padding:"3vw",alignSelf:"center",marginBottom:"2vh",marginTop:"2vh",backgroundSize:"contain"}}}));function p(t){var n=d(),r=t.location;console.log("location.pathname? ".concat(r.pathname));return e.createElement(e.Fragment,null,"/board"===r.pathname?null:e.createElement(e.Fragment,null,e.createElement(u.a,{className:n.root,style:"/"===r.pathname?{background:"linear-gradient(black, #eeeeee)"}:{backgroundImage:"url(".concat(f.a,")"),backgroundSize:"auto",transform:"scaleY(-1)"}},e.createElement(s.a,{title:"Move to Top","aria-label":"move-to-top",placement:"top",enterDelay:350,leaveDelay:150},e.createElement(u.a,{className:n.arrow,style:"/"===r.pathname?{background:"no-repeat center/80% url(".concat(c.a,")")}:{background:"no-repeat center/80% url(".concat(l.a,")"),transform:"rotate(180deg)"},onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},onMouseOver:function(e){return function(e){e.target.style.cursor="pointer"}(e)}}))),e.createElement("footer",{className:n.footer},e.createElement(o.a,{maxWidth:"sm"},e.createElement(m,{style:{fontWeight:"bolder"}})))))}}).call(this,n(0))},414:function(e,t,n){"use strict";t.a=n.p+"white-arrow.c4422a7bc5ee23d081b3566f93e91f1f.png"},416:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(17),a=n(53),o=n(16),i=n(57),c=n(34);function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s=Object(c.a)((function(e){return{root:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",width:"100vw",height:"100vh"},paper:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"center",width:"80vw",height:"50vh",color:e.palette.grey[500],fontWeight:"bolder"},paper2:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"flex-start",marginTop:"3vh",fontWeight:"bolder"},button:{marginTop:"5vh",fontWeight:"bolder"}}}));function f(t){var n=t.error,c=(t.componentStack,t.resetErrorBoundary),u=s(),f=l(e.useState(10),2),m=f[0],d=f[1];return e.useEffect((function(){m<=0&&location.replace(location.origin),console.log("second :  ".concat(m));var e=setInterval((function(){d(m-1)}),1e3);return function(){return clearInterval(e)}}),[m]),e.createElement(r.a,{className:u.root},e.createElement(a.a,{className:u.paper},e.createElement(o.a,{variant:"h3"}," ","ERROR : ".concat(n.message)," "),e.createElement(o.a,{variant:"h3"}," ","Will go back to the HOME","  "),e.createElement(o.a,{variant:"h2"}," ","in ".concat(m," seconds."),"  "),e.createElement(i.a,{className:u.button,variant:"outlined",color:"secondary",size:"large",onClick:c},"Return to Home Now"),e.createElement(a.a,{className:u.paper2,elevation:0},e.createElement(o.a,{variant:"subtitle1"}," ","Please check below.","  "),e.createElement(o.a,{variant:"subtitle2"}," ","1. Login timeout - Login Retention Time: 2 hours","  "),e.createElement(o.a,{variant:"subtitle2"}," ","2. Invalid Request","  "))))}}).call(this,n(0))},428:function(e,t,n){"use strict";n.r(t),function(e){var t=n(18),r=n.n(t),a=n(86),o=n(583);r.a.render(e.createElement(o.a,null,e.createElement(a.d,null)),document.getElementById("root"))}.call(this,n(0))},67:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return l}));var r=n(118),a=n.n(r),o=n(119),i=function(){return a.a.get("".concat(o.a,"/management"),{withCredentials:!0})},c=function(e,t){return console.log("saving headers : \n    headers : ".concat(JSON.stringify(e),"\n    groupings : ").concat(JSON.stringify(t))),a.a.put("".concat(o.a,"/headers"),{headers:e,groupings:t},{withCredentials:!0}).then((function(e){return Promise.resolve(e.data)}))},l=function(e,t,n){return a.a.put("".concat(o.a,"/data"),{headers:e,groupings:t,data:n},{withCredentials:!0}).then((function(e){return 400===e.status?Promise.reject(400):Promise.resolve(e.data)}))}},86:function(e,t,n){"use strict";(function(e){n.d(t,"c",(function(){return w})),n.d(t,"b",(function(){return S})),n.d(t,"a",(function(){return j})),n.d(t,"d",(function(){return x}));var r=n(78),a=n(27),o=n(378),i=n(387),c=n(388),l=n(398),u=n(571),s=n(399),f=n(413),m=n(415),d=n.n(m),p=n(233),h=n(212),g=n(100),y=n(416),b=n(417);function v(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return E(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var w=e.createContext(),O=e.createContext(),S=e.createContext(),j=e.createContext();function x(){var t=d.a.parse(window.location.hash.substr(1)).id_token,n=v(Object(p.a)(["profile"]),3),m=n[0],E=n[1],x=(n[2],v(e.useState(m.profile),2)),I=x[0],A=x[1],C=v(e.useState(!1),2),k=C[0],P=C[1],N=v(e.useState({open:!1,result:"success"}),2),D=N[0],M=N[1],T=e.useRef(0);return e.useEffect((function(){t&&(console.log("fetch API 실행"),Object(h.a)(t).then((function(e){console.log("response data : ".concat(JSON.stringify(e)));var t=e.name,n=e.email,r=e.picture;E("profile",{name:t,email:n,picture:r},{path:"/",maxAge:7200})})).catch((function(e){throw new Error("Login Failed. Please authorize the use of cookies in your browser.")})))}),[t]),e.useEffect((function(){m.profile&&(console.log("cookies.profile : ".concat(JSON.stringify(m.profile))),A(m.profile))}),[m.profile]),e.createElement(e.Fragment,null,e.createElement(b.ErrorBoundary,{FallbackComponent:y.a,onError:function(e,t){console.log("error : ".concat(e,"\n                componentStack : ").concat(t))},onReset:function(){return location.replace(location.origin)}},e.createElement(w.Provider,{value:I||{name:""}},"          ",e.createElement(O.Provider,{value:A},"   ",e.createElement(S.Provider,{value:function(e){return function(e){var t=setInterval((function(){console.log("progress : ".concat(T.current)),P(!0),T.current=T.current<100?T.current+20:100,100===T.current&&(T.current=0,P(!1),M({open:!0,result:e}),clearInterval(t))}),200)}(e)}},"  ",e.createElement(j.Provider,{value:M},"  ",e.createElement(u.a,null),e.createElement(r.a,null,e.createElement(o.a,null),e.createElement(a.c,null,e.createElement(a.a,{exact:!0,path:"/",render:function(){return e.createElement(s.a,{isLoading:k})}}),e.createElement(a.a,{path:"/board",render:function(){return e.createElement(i.a,{isLoading:k})}}),e.createElement(a.a,{path:"/management",render:function(){return e.createElement(c.a,{isLoading:k})}}),e.createElement(a.a,{path:"/headers",render:function(){return e.createElement(l.a,{isLoading:k})}})),e.createElement(a.a,{path:"/",render:function(t){return e.createElement(f.a,t)}})))))),e.createElement(g.a,{open:D.open,onClose:function(){return M({open:!1})},content:"error"===D.result?"Not saved.\n                Reason : Invalid input.":" SAVED ",status:D.result,direction:{vertical:"top",horizontal:"right"}})))}}).call(this,n(0))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,