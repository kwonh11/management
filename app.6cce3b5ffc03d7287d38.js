!function(e){function t(t){for(var r,i,c=t[0],l=t[1],u=t[2],f=0,m=[];f<c.length;f++)i=c[f],Object.prototype.hasOwnProperty.call(o,i)&&o[i]&&m.push(o[i][0]),o[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(s&&s(t);m.length;)m.shift()();return a.push.apply(a,u||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],r=!0,c=1;c<n.length;c++){var l=n[c];0!==o[l]&&(r=!1)}r&&(a.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},o={0:0},a=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var s=l;a.push([387,1,2]),n()}({118:function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return y})),n.d(t,"a",(function(){return g})),n.d(t,"c",(function(){return v}));var r=n(105),o=n(26),a=n(351),i=n(360),c=n(361),l=n(505),u=n(369),s=n(376),f=n(197),m=n.n(f),p=n(378),d=n.n(p);function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return b(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var y=e.createContext(),g=e.createContext();function v(){var t=h(e.useState(),2),n=t[0],f=t[1],p=m.a.parse(window.location.hash.substr(1)).id_token,b=localStorage.getItem("token");return e.useEffect((function(){if(p)localStorage.setItem("token",p),window.location.href=window.location.origin;else if(b){var e=d()(b),t=e.sub,n=e.name,r=e.email,o=e.picture;f({id:t,name:n,email:r,picture:o})}}),[p,b]),e.createElement(e.Fragment,null,e.createElement(y.Provider,{value:n},"          ",e.createElement(g.Provider,{value:f},"   ",e.createElement(l.a,null),e.createElement(r.a,null,e.createElement(a.a,null),e.createElement(o.c,null,e.createElement(o.a,{exact:!0,path:"/",component:u.a}),e.createElement(o.a,{path:"/board",component:i.a}),e.createElement(o.a,{path:"/management",component:c.a}))),e.createElement(s.a,null))))}}).call(this,n(0))},259:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return o}));var r={exportButton:!0,grouping:!0,selection:!0,headerStyle:{fontWeight:"bolder"},actionsColumnIndex:-1,columnsButton:!0,debounceInterval:160,pageSize:20,pageSizeOptions:[5,10,20,50,100]},o={pagination:{labelDisplayedRows:"{count} rows | {from}-{to}"},toolbar:{nRowsSelected:"{0} row(s) selected"},header:{actions:"Edit"},body:{emptyDataSourceMessage:"No record to display.. Click the [+] button on the right-top"}}},351:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return E}));var r=n(105),o=n(60),a=n(131),i=n(157),c=n(54),l=n(381),u=n(495),s=n(250),f=n(352),m=n(353),p=n(118),d=n(357);function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var w=Object(c.a)((function(e){return{root:{flexGrow:1,alignItems:"flex-start",paddingTop:18,paddingBottom:18},left:{flexGrow:1,paddingLeft:30,justify:"flex-start"},center:{flexGrow:1},right:{display:"flex",paddingRight:45,justify:"flex-end",flexDirection:"row",padding:"0 ".concat(e.spacing(3))}}}));function E(t){var n=g(e.useState({menu:!1}),2),c=n[0],h=n[1],v=w(),E=function(e,t){return function(n){h(b(b({},c),{},y({},e,t)))}},O=e.useContext(p.b),j=O?"MYPAGE":"LOGIN",x=O?e.createElement(d.a,null):null;return e.createElement(e.Fragment,null,e.createElement(f.a,t,e.createElement(u.a,{color:"inherit",style:{boxShadow:"none"}},e.createElement(s.a,null,e.createElement(i.a,{container:!0,spacing:3},e.createElement(i.a,{container:!0,className:v.root},e.createElement(i.a,{item:!0,className:v.left},e.createElement(r.b,{to:"/",style:{textDecoration:"none"}},e.createElement(a.a,{variant:"outlined"}," Home ")),["board","management"].map((function(t){return e.createElement(r.b,{to:"/".concat(t),style:{textDecoration:"none"},key:t},e.createElement(a.a,{variant:"outlined"}," ",t," "))}))),e.createElement(i.a,{item:!0,className:v.center},e.createElement("span",null)),e.createElement(i.a,{item:!0,className:v.right},e.createElement(a.a,{variant:"outlined",color:"primary",onClick:E(j,!0),style:{marginRight:"5px"}},j),x,e.createElement(o.a,{open:c[j],onClose:E(j,!1)},Object(m.a)(b(b({},t),{},{anchor:j,toggleDrawer:E,profile:O}))))),e.createElement(l.a,null))))))}}).call(this,n(0))},352:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a}));var r=n(489),o=n(379);function a(t){var n=t.children,a=Object(r.a)();return e.createElement(o.a,{appear:!1,direction:"down",in:!a},n)}}).call(this,n(0))},353:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return h}));var r=n(260),o=n(130),a=n(133),i=n(492),c=n(512),l=n(381),u=n(50),s=n(54),f=n(354),m=n(355),p=n(356),d=Object(s.a)((function(e){return{list:{width:"22vw",display:"flex",justifyContent:"center",flexDirection:"column"},listItem:{width:"100%",height:"100%",padding:"1.3vh 1.5vw"},listItemText:{textAlign:"center",color:"#838282",marginBottom:"30px"},largeAvatar:{width:e.spacing(9),height:e.spacing(9)},inline:{display:"inline"},listText:{color:"#838282",textAlign:"center"}}}));function h(t){var n=t.anchor,s=t.toggleDrawer,h=t.profile,b=d();var y=!!h;return console.log("profile : ".concat(JSON.stringify(h))),e.createElement("div",{className:b.list,role:"presentation",onClick:s(n,!1),onKeyDown:s(n,!1)},e.createElement(r.a,null,e.createElement(o.a,{primary:y?"PROFILE":"LOGIN MENU",className:b.listItemText}),y?e.createElement(e.Fragment,null,e.createElement(a.a,{alignItems:"center",className:b.listItem},e.createElement(i.a,null,e.createElement(c.a,{src:h.picture,className:b.largeAvatar,alt:h.name})),e.createElement(o.a,{primary:h.name,className:b.listText}),e.createElement("br",null)),e.createElement(l.a,{variant:"inset",component:"li"}),e.createElement(a.a,{className:b.listItem,divider:!0},e.createElement(o.a,{primary:"EMAIL : ",secondary:e.createElement(e.Fragment,null,e.createElement(u.a,{component:"span",variant:"body2",color:"textPrimary",className:b.inline},h.email))}))):e.createElement(a.a,{button:!0,className:b.listItem,onClick:function(){return e=p.a,void window.location.assign(e);var e}},e.createElement(f.a,{signIn:m.a}))))}}).call(this,n(0))},354:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return i}));var r=n(54),o=n(66),a=Object(r.a)((function(e){return{button:{width:"100%",height:"100%"}}}));function i(t){var n=a(),r=t.signIn;return e.createElement(o.a,{component:"span"},e.createElement("img",{src:r,className:n.button}))}}).call(this,n(0))},355:function(e,t,n){"use strict";t.a=n.p+"googleSignin.1ce1aaa5a127fa3e492a12bb62f99304.png"},356:function(e,t,n){"use strict";var r=n(197),o=n.n(r).a.stringify({client_id:"1029543737304-qpf4g96mg3qchkgefigjt3rj5rkqmlog.apps.googleusercontent.com",redirect_uri:"http://localhost:5000",response_type:"token id_token",scope:"openid profile email",nonce:Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15)});t.a="https://accounts.google.com/o/oauth2/v2/auth?"+o},357:function(e,t,n){"use strict";(function(e){var r=n(359),o=n.n(r),a=n(199),i=n(133),c=n(200),l=n(54),u=n(4),s=n(118),f=Object(l.a)((function(e){return{logout:{justifyContent:"flex-end",padding:"2px",margin:0,width:"auto"}}})),m=Object(u.a)((function(e){return{tooltip:{backgroundColor:e.palette.common.white,color:"rgba(0, 0, 0, 0.87)",boxShadow:e.shadows[2],fontSize:14,fontWeight:"bold"}}}))(a.a);t.a=function(){var t=f(),n=e.useContext(s.a);return e.createElement(e.Fragment,null,e.createElement(i.a,{className:t.logout},e.createElement(m,{title:"Log-out"},e.createElement(c.a,{style:{padding:4},onClick:function(){localStorage.removeItem("token"),n()}},e.createElement(o.a,null)))))}}).call(this,n(0))},360:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return o}));var r=n(383);function o(){return e.createElement(r.a,{fixed:!0},e.createElement("div",null,"Board"))}}).call(this,n(0))},361:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return y}));var r=n(362),o=n.n(r),a=n(66),i=n(509),c=n(511),l=n(368),u=n(259);function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e){return function(e){if(Array.isArray(e))return b(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||h(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||h(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){if(e){if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(e,t):void 0}}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function y(){var t=d(e.useState({open:!1}),2),n=t[0],r=t[1],s=d(e.useState({open:!1}),2),m=s[0],h=s[1];e.useEffect((function(){setTimeout((function(){r({open:!0})}),400)}),[]),e.useEffect((function(){var e=function(){return h({open:!m.open})};return window.addEventListener("dblclick",e),function(){window.removeEventListener("dblclick",e)}}),[]);var b=d(e.useState({columns:[{title:"Name",field:"name",grouping:!1},{title:"Surname",field:"surname"},{title:"Birth Year",field:"birthYear"},{title:"Phone",field:"phone",grouping:!1},{title:"Gender",field:"gender",lookup:{1:"Male",2:"Female"}},{title:"Memo",field:"memo"}],data:[{name:"Mehmet",surname:"Baran",birthYear:1983,phone:"01046509995",gender:1,memo:""},{name:"Adam",surname:"Adam",birthYear:1984,phone:"01046509795",gender:2,memo:""},{name:"Mehmet",surname:"Atom",birthYear:1985,phone:"01046509695",gender:1,memo:""},{name:"mul",surname:"Kongna",birthYear:1986,phone:"01046509195",gender:1,memo:""},{name:"Jack",surname:"Jack",birthYear:1987,phone:"01046509295",gender:2,memo:""},{name:"Bob",surname:"Bob",birthYear:1988,phone:"01046509395",gender:2,memo:""},{name:"Mehmet",surname:"Bill",birthYear:1989,phone:"01046509495",gender:1,memo:""},{name:"Johnson",surname:"Johnson",birthYear:1990,phone:"01046509895",gender:2,memo:""}]}),2),y=b[0],g=b[1],v=function(){return e.createElement(a.a,{style:{height:"100px"}})},w=function(e,t){r({open:!1})};return e.createElement(a.a,null,e.createElement(l.a,{open:m.open,onClose:function(){h({open:!1})}}),e.createElement(v,null),e.createElement(o.a,{title:"Management App",columns:y.columns,data:y.data,localization:u.a,options:u.b,actions:[{tooltip:"Remove All Selected Users",icon:"delete",onClick:function(e,t){var n=p(y.data);t.forEach((function(e){n.splice(n.indexOf(e),1)})),g((function(e){return f(f({},e),{},{data:n})}))}}],editable:{onRowAdd:function(e){return new Promise((function(t){setTimeout((function(){t(),g((function(t){var n=p(t.data);return n.push(e),f(f({},t),{},{data:n})}))}),600)}))},onRowUpdate:function(e,t){return new Promise((function(n){setTimeout((function(){n(),t&&g((function(n){var r=p(n.data);return r[r.indexOf(t)]=e,f(f({},n),{},{data:r})}))}),600)}))}}}),e.createElement(v,null),e.createElement(i.a,{open:n.open,onClose:w,anchorOrigin:{vertical:"top",horizontal:"center"}},e.createElement(c.a,{onClose:w,severity:"success",variant:"filled",message:{fontWeight:"bolder",fontSize:"5rem"}},"need some help? ? double-click any space !")))}}).call(this,n(0))},368:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return f}));var r=n(54),o=n(503),a=n(506),i=n(260),c=n(133),l=n(66),u=n(130),s=Object(r.a)((function(e){}));function f(t){var n=s(),r=t.open,f=t.onClose;return e.createElement(o.a,{onClose:f,open:r},e.createElement(a.a,null," BASIC MANUAL "),e.createElement(i.a,null,[{icon:"add_box",description:"[Add] rows."},{icon:"create",description:"[Edit] records."},{icon:"search",description:"Type down words to [search]."},{icon:"save_alt",description:"[Download] files in CVS format."},{icon:"view_week",description:"[Select] columns to be displayed"},{icon:"playlist_add_check",description:"Follow the steps below to [delete] rows."},{icon:"check_box",description:" ① Select the checkbox on the row."},{icon:"fact_check",description:" ② Check the number of the rows selected."},{icon:"delete",description:" ③ Click the bin icon on the right above."}].map((function(t,r){return e.createElement(c.a,{key:"".concat(t," + ").concat(r)},e.createElement(l.a,{component:"span",className:"material-icons ".concat(n.icon),style:{width:"3vw"}},t.icon),e.createElement(u.a,{primary:t.description}))}))))}}).call(this,n(0))},369:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return l}));var r=n(54),o=n(370),a=n(372),i=n(373),c=Object(r.a)((function(e){return{root:{display:"flex",flexWrap:"wrap",height:"350vh",justifyContent:"center"}}}));function l(){var t=c();return e.createElement("div",{className:t.root},e.createElement(i.a,null),e.createElement(o.a,null),e.createElement(a.a,null))}}).call(this,n(0))},370:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return m}));var r=n(75),o=n(54),a=n(108),i=n(50),c=n(371);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var f=Object(o.a)((function(e){return{root:{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"space-evenly",alignContent:"center",height:"100vh",width:"90vw",marginTop:"-10vh",zIndex:0},paper:{maxWidth:850,minWidth:350,width:"50vw",height:"70vh",margin:e.spacing(4),flex:2},text:{maxWidth:650,minWidth:225,width:"30vw",height:"50vh",flex:1,alignSelf:"center"}}}));function m(){var t=u(e.useState(!1),2),n=t[0],o=t[1],s=f(),m=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return o(e.isIntersecting)}))}),{rootMargin:"-70px 0px"});return e.observe(m.current),function(){return e.unobserve(m.current)}}),[]),e.createElement(e.Fragment,null,e.createElement(c.a,null,e.createElement(i.a,{variant:"h2",style:{color:"white",alignSelf:"center"}}," User's Guide ")),e.createElement("div",{className:s.root,ref:m},e.createElement(a.a,l({in:n,style:{transformOrigin:"0 0 0"}},n?{timeout:1e3}:{}),e.createElement(r.a,{elevation:3,className:s.paper})),e.createElement(a.a,l({in:n,style:{transformOrigin:"0 0 0"}},n?{timeout:1200}:{}),e.createElement(r.a,{elevation:1,className:s.text}))))}}).call(this,n(0))},371:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return s}));var r=n(54),o=n(66),a=n(216);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return c(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=Object(r.a)((function(e){var t;return{root:(t={margin:0,padding:0,display:"flex",flexWrap:"wrap",height:"13vh",width:"100%",justifyContent:"center",alignItems:"center",background:"rgb(191,185,185)"},l(t,"background","linear-gradient(160deg, rgba(191,185,185,1) 26%, rgba(47,135,166,1) 77%)"),l(t,"zIndex",100),l(t,"margin","auto"),l(t,"opacity",.7),t)}}));function s(t){var n=t.children,r=i(e.useState(!1),2),c=r[0],l=r[1],s=u(),f=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return l(e.isIntersecting)}))}),{rootMargin:"-50px 0px"});return e.observe(f.current),function(){return e.unobserve(f.current)}}),[]),e.createElement(a.a,{in:c,timeout:{enter:1e3,exit:800}},e.createElement(o.a,{className:s.root,boxShadow:4,ref:f},n))}}).call(this,n(0))},372:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return s}));var r=n(75),o=n(54),a=n(108);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var u=Object(o.a)((function(e){return{root:{display:"flex",flexDirection:"row-reverse",flexWrap:"wrap",justifyContent:"space-evenly",alignContent:"center",height:"100vh",width:"90vw",zIndex:0},paper:{maxWidth:850,minWidth:350,width:"50vw",height:"70vh",margin:e.spacing(4),flex:2},text:{maxWidth:650,minWidth:225,width:"30vw",height:"50vh",flex:1,alignSelf:"center"}}}));function s(){var t=c(e.useState(!1),2),n=t[0],o=t[1],l=u(),s=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return o(e.isIntersecting)}))}),{rootMargin:"-70px 0px"});return e.observe(s.current),function(){return e.unobserve(s.current)}}),[]),e.createElement("div",{className:l.root,ref:s},e.createElement(a.a,i({in:n,style:{transformOrigin:"0 0 0"}},n?{timeout:1e3}:{}),e.createElement(r.a,{elevation:3,className:l.paper})),e.createElement(a.a,i({in:n,style:{transformOrigin:"0 0 0"}},n?{timeout:1200}:{}),e.createElement(r.a,{elevation:1,className:l.text})))}}).call(this,n(0))},373:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return m}));var r=n(54),o=n(66),a=n(50),i=n(374),c=n(216),l=n(375);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var f=Object(r.a)((function(e){return{root:{display:"flex",flexDirection:"column",flexWrap:"wrap",justifyContent:"center",alignContent:"center",height:"100vh",width:"100%",backgroundImage:"url(".concat(i.a,")")}}}));function m(){var t=f(),n=u(e.useState(!1),2),r=n[0],i=n[1],s=e.useRef(!0),m=e.useRef();return e.useEffect((function(){var e=new IntersectionObserver((function(e){e.forEach((function(e){return i(e.isIntersecting)})),s.current&&(s.current=!1)}),{rootMargin:"-350px 0px"});return e.observe(m.current),function(){return e.unobserve(m.current)}}),[]),e.createElement(c.a,{in:r,timeout:{enter:1300,exit:800}},e.createElement(o.a,{className:t.root,ref:m},e.createElement(a.a,{variant:"h1",color:"textSecondary"},s.current?"WELCOME!!":"Ready to start?"),s.current?null:e.createElement(l.a,null)))}}).call(this,n(0))},374:function(e,t,n){"use strict";t.a=n.p+"wood2.dc3dfeb18edf546f7718cbd7d5c09741.jpg"},375:function(e,t,n){"use strict";(function(e){var r=n(66),o=n(131),a=n(50),i=n(54),c=n(514),l=n(105);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m=Object(i.a)((function(e){return{button:{width:"fit-content",marginBottom:"0.5vh"},text:s(s({},e.typography.button),{},{backgroundColor:"inherit",textShadow:"0.5px 0.5px 1px #0000005c"}),innerBox:{marginTop:"1vh"}}}));t.a=function(){var t=m();return e.createElement(r.a,{className:t.innerBox},e.createElement(l.b,{to:"/management",style:{textDecoration:"none"}},e.createElement(o.a,{size:"large",variant:"outlined",startIcon:e.createElement(c.a,{color:"primary",style:{fontSize:30}}),className:t.button},"GET STARTED")),e.createElement(a.a,{className:t.text},"지금 바로 시작해보세요."))}}).call(this,n(0))},376:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return m}));var r=n(50),o=n(54),a=n(383),i=n(508),c=n(377),l=n(66),u=n(199);function s(){return e.createElement(r.a,{variant:"body2",color:"textSecondary"},"Copyright © ",e.createElement(i.a,{color:"inherit",href:"#"},"Jack's Website")," ",(new Date).getFullYear(),".")}var f=Object(o.a)((function(e){return{root:{display:"flex",flexDirection:"column",minHeight:"20vh",justifyContent:"center"},footer:{padding:e.spacing(3,2),marginTop:"auto",backgroundColor:e.palette.grey[200],textAlign:"center"},arrow:{width:"12vw",height:"12vh",alignSelf:"center",background:"no-repeat center/80% url(".concat(c.a,")"),marginBottom:"3vh",backgroundSize:"contain"}}}));function m(){var t=f();return e.createElement(l.a,{className:t.root},e.createElement(u.a,{title:"Move to Top","aria-label":"move-to-top",placement:"top",enterDelay:350,leaveDelay:150},e.createElement(l.a,{className:t.arrow,onClick:function(){window.scrollTo({top:0,behavior:"smooth"})},onMouseOver:function(e){return function(e){e.target.style.cursor="pointer"}(e)}})),e.createElement("footer",{className:t.footer},e.createElement(a.a,{maxWidth:"sm"},e.createElement(s,null))))}}).call(this,n(0))},377:function(e,t,n){"use strict";t.a=n.p+"arrow.d08328f62d19b66f8ea8d6d006724c8b.png"},387:function(e,t,n){"use strict";n.r(t),function(e){var t=n(16),r=n.n(t),o=n(118);r.a.render(e.createElement(o.c,null),document.getElementById("root"))}.call(this,n(0))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,